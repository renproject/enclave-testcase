// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethereumbinding

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AddressABI is the input ABI used to generate the binding from.
const AddressABI = "[]"

// AddressBin is the compiled bytecode used for deploying new contracts.
var AddressBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582054ad6d91f0a9458aa38774eb9c9fee9204545b452ba727f970453bacb8ce1e6d64736f6c63430005100032"

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// AdminUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const AdminUpgradeabilityProxyABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// AdminUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var AdminUpgradeabilityProxyBin = "0x60806040526040516109823803806109828339818101604052606081101561002657600080fd5b8151602083015160408085018051915193959294830192918464010000000082111561005157600080fd5b90830190602082018581111561006657600080fd5b825164010000000081118282018810171561008057600080fd5b82525081516020918201929091019080838360005b838110156100ad578181015183820152602001610095565b50505050905090810190601f1680156100da5780820380516001836020036101000a031916815260200191505b5060408181527f656970313936372e70726f78792e696d706c656d656e746174696f6e0000000082525190819003601c01902086935084925060008051602061092783398151915260001990910114905061013157fe5b610143826001600160e01b0361026516565b8051156101fb576000826001600160a01b0316826040518082805190602001908083835b602083106101865780518252601f199092019160209182019101610167565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101e6576040519150601f19603f3d011682016040523d82523d6000602084013e6101eb565b606091505b50509050806101f957600080fd5b505b5050604080517f656970313936372e70726f78792e61646d696e00000000000000000000000000815290519081900360130190206000805160206109078339815191526000199091011461024b57fe5b61025d826001600160e01b036102c516565b5050506102dd565b610278816102d760201b61053d1760201c565b6102b35760405162461bcd60e51b815260040180806020018281038252603b815260200180610947603b913960400191505060405180910390fd5b60008051602061092783398151915255565b60008051602061090783398151915255565b3b151590565b61061b806102ec6000396000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100875780635c60da1b146101075780638f28397014610138578063f851a4401461016b575b610052610180565b005b34801561006057600080fd5b506100526004803603602081101561007757600080fd5b50356001600160a01b031661019a565b6100526004803603604081101561009d57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100c857600080fd5b8201836020820111156100da57600080fd5b803590602001918460018302840111640100000000831117156100fc57600080fd5b5090925090506101d4565b34801561011357600080fd5b5061011c610281565b604080516001600160a01b039092168252519081900360200190f35b34801561014457600080fd5b506100526004803603602081101561015b57600080fd5b50356001600160a01b03166102be565b34801561017757600080fd5b5061011c610378565b6101886103a3565b610198610193610403565b610428565b565b6101a261044c565b6001600160a01b0316336001600160a01b031614156101c9576101c481610471565b6101d1565b6101d1610180565b50565b6101dc61044c565b6001600160a01b0316336001600160a01b03161415610274576101fe83610471565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d806000811461025b576040519150601f19603f3d011682016040523d82523d6000602084013e610260565b606091505b505090508061026e57600080fd5b5061027c565b61027c610180565b505050565b600061028b61044c565b6001600160a01b0316336001600160a01b031614156102b3576102ac610403565b90506102bb565b6102bb610180565b90565b6102c661044c565b6001600160a01b0316336001600160a01b031614156101c9576001600160a01b0381166103245760405162461bcd60e51b81526004018080602001828103825260368152602001806105766036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61034d61044c565b604080516001600160a01b03928316815291841660208301528051918290030190a16101c4816104b1565b600061038261044c565b6001600160a01b0316336001600160a01b031614156102b3576102ac61044c565b6103ab61044c565b6001600160a01b0316336001600160a01b031614156103fb5760405162461bcd60e51b81526004018080602001828103825260328152602001806105446032913960400191505060405180910390fd5b610198610198565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015610447573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b61047a816104d5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b6104de8161053d565b6105195760405162461bcd60e51b815260040180806020018281038252603b8152602001806105ac603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b15159056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a265627a7a723158207781a0ec006e62021284798cc25cf430b8d62a3d313d50287069c9fb390f0cf464736f6c63430005100032b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc43616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373"

// DeployAdminUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of AdminUpgradeabilityProxy to it.
func DeployAdminUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend, _logic common.Address, _admin common.Address, _data []byte) (common.Address, *types.Transaction, *AdminUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AdminUpgradeabilityProxyBin), backend, _logic, _admin, _data)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AdminUpgradeabilityProxy{AdminUpgradeabilityProxyCaller: AdminUpgradeabilityProxyCaller{contract: contract}, AdminUpgradeabilityProxyTransactor: AdminUpgradeabilityProxyTransactor{contract: contract}, AdminUpgradeabilityProxyFilterer: AdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// AdminUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type AdminUpgradeabilityProxy struct {
	AdminUpgradeabilityProxyCaller     // Read-only binding to the contract
	AdminUpgradeabilityProxyTransactor // Write-only binding to the contract
	AdminUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// AdminUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AdminUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AdminUpgradeabilityProxySession struct {
	Contract     *AdminUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// AdminUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AdminUpgradeabilityProxyCallerSession struct {
	Contract *AdminUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// AdminUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AdminUpgradeabilityProxyTransactorSession struct {
	Contract     *AdminUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// AdminUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyRaw struct {
	Contract *AdminUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// AdminUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyCallerRaw struct {
	Contract *AdminUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// AdminUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AdminUpgradeabilityProxyTransactorRaw struct {
	Contract *AdminUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAdminUpgradeabilityProxy creates a new instance of AdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewAdminUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*AdminUpgradeabilityProxy, error) {
	contract, err := bindAdminUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxy{AdminUpgradeabilityProxyCaller: AdminUpgradeabilityProxyCaller{contract: contract}, AdminUpgradeabilityProxyTransactor: AdminUpgradeabilityProxyTransactor{contract: contract}, AdminUpgradeabilityProxyFilterer: AdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewAdminUpgradeabilityProxyCaller creates a new read-only instance of AdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewAdminUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*AdminUpgradeabilityProxyCaller, error) {
	contract, err := bindAdminUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewAdminUpgradeabilityProxyTransactor creates a new write-only instance of AdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewAdminUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*AdminUpgradeabilityProxyTransactor, error) {
	contract, err := bindAdminUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewAdminUpgradeabilityProxyFilterer creates a new log filterer instance of AdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewAdminUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*AdminUpgradeabilityProxyFilterer, error) {
	contract, err := bindAdminUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindAdminUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindAdminUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AdminUpgradeabilityProxy.Contract.AdminUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.AdminUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.AdminUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AdminUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) Admin() (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Admin(&_AdminUpgradeabilityProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Admin(&_AdminUpgradeabilityProxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.ChangeAdmin(&_AdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.ChangeAdmin(&_AdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) Implementation() (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Implementation(&_AdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Implementation(&_AdminUpgradeabilityProxy.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.UpgradeTo(&_AdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.UpgradeTo(&_AdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_AdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_AdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Fallback(&_AdminUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _AdminUpgradeabilityProxy.Contract.Fallback(&_AdminUpgradeabilityProxy.TransactOpts, calldata)
}

// AdminUpgradeabilityProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the AdminUpgradeabilityProxy contract.
type AdminUpgradeabilityProxyAdminChangedIterator struct {
	Event *AdminUpgradeabilityProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AdminUpgradeabilityProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AdminUpgradeabilityProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AdminUpgradeabilityProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AdminUpgradeabilityProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AdminUpgradeabilityProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AdminUpgradeabilityProxyAdminChanged represents a AdminChanged event raised by the AdminUpgradeabilityProxy contract.
type AdminUpgradeabilityProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*AdminUpgradeabilityProxyAdminChangedIterator, error) {

	logs, sub, err := _AdminUpgradeabilityProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyAdminChangedIterator{contract: _AdminUpgradeabilityProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *AdminUpgradeabilityProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _AdminUpgradeabilityProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AdminUpgradeabilityProxyAdminChanged)
				if err := _AdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) ParseAdminChanged(log types.Log) (*AdminUpgradeabilityProxyAdminChanged, error) {
	event := new(AdminUpgradeabilityProxyAdminChanged)
	if err := _AdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AdminUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the AdminUpgradeabilityProxy contract.
type AdminUpgradeabilityProxyUpgradedIterator struct {
	Event *AdminUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AdminUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AdminUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AdminUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AdminUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AdminUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AdminUpgradeabilityProxyUpgraded represents a Upgraded event raised by the AdminUpgradeabilityProxy contract.
type AdminUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*AdminUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AdminUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AdminUpgradeabilityProxyUpgradedIterator{contract: _AdminUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *AdminUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AdminUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AdminUpgradeabilityProxyUpgraded)
				if err := _AdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AdminUpgradeabilityProxy *AdminUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*AdminUpgradeabilityProxyUpgraded, error) {
	event := new(AdminUpgradeabilityProxyUpgraded)
	if err := _AdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAdminUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const BaseAdminUpgradeabilityProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// BaseAdminUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var BaseAdminUpgradeabilityProxyBin = "0x608060405234801561001057600080fd5b5061061b806100206000396000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100875780635c60da1b146101075780638f28397014610138578063f851a4401461016b575b610052610180565b005b34801561006057600080fd5b506100526004803603602081101561007757600080fd5b50356001600160a01b031661019a565b6100526004803603604081101561009d57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100c857600080fd5b8201836020820111156100da57600080fd5b803590602001918460018302840111640100000000831117156100fc57600080fd5b5090925090506101d4565b34801561011357600080fd5b5061011c610281565b604080516001600160a01b039092168252519081900360200190f35b34801561014457600080fd5b506100526004803603602081101561015b57600080fd5b50356001600160a01b03166102be565b34801561017757600080fd5b5061011c610378565b6101886103a3565b610198610193610403565b610428565b565b6101a261044c565b6001600160a01b0316336001600160a01b031614156101c9576101c481610471565b6101d1565b6101d1610180565b50565b6101dc61044c565b6001600160a01b0316336001600160a01b03161415610274576101fe83610471565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d806000811461025b576040519150601f19603f3d011682016040523d82523d6000602084013e610260565b606091505b505090508061026e57600080fd5b5061027c565b61027c610180565b505050565b600061028b61044c565b6001600160a01b0316336001600160a01b031614156102b3576102ac610403565b90506102bb565b6102bb610180565b90565b6102c661044c565b6001600160a01b0316336001600160a01b031614156101c9576001600160a01b0381166103245760405162461bcd60e51b81526004018080602001828103825260368152602001806105766036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61034d61044c565b604080516001600160a01b03928316815291841660208301528051918290030190a16101c4816104b1565b600061038261044c565b6001600160a01b0316336001600160a01b031614156102b3576102ac61044c565b6103ab61044c565b6001600160a01b0316336001600160a01b031614156103fb5760405162461bcd60e51b81526004018080602001828103825260328152602001806105446032913960400191505060405180910390fd5b610198610198565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e808015610447573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b61047a816104d5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b6104de8161053d565b6105195760405162461bcd60e51b815260040180806020018281038252603b8152602001806105ac603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b15159056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a265627a7a72315820bc6895495428a67cf67cd075655d8233a0577e678653797aba75a16fc5c9f5a564736f6c63430005100032"

// DeployBaseAdminUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of BaseAdminUpgradeabilityProxy to it.
func DeployBaseAdminUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseAdminUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAdminUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseAdminUpgradeabilityProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAdminUpgradeabilityProxy{BaseAdminUpgradeabilityProxyCaller: BaseAdminUpgradeabilityProxyCaller{contract: contract}, BaseAdminUpgradeabilityProxyTransactor: BaseAdminUpgradeabilityProxyTransactor{contract: contract}, BaseAdminUpgradeabilityProxyFilterer: BaseAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// BaseAdminUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxy struct {
	BaseAdminUpgradeabilityProxyCaller     // Read-only binding to the contract
	BaseAdminUpgradeabilityProxyTransactor // Write-only binding to the contract
	BaseAdminUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// BaseAdminUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAdminUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAdminUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAdminUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAdminUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseAdminUpgradeabilityProxySession struct {
	Contract     *BaseAdminUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// BaseAdminUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseAdminUpgradeabilityProxyCallerSession struct {
	Contract *BaseAdminUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// BaseAdminUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseAdminUpgradeabilityProxyTransactorSession struct {
	Contract     *BaseAdminUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// BaseAdminUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyRaw struct {
	Contract *BaseAdminUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// BaseAdminUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyCallerRaw struct {
	Contract *BaseAdminUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// BaseAdminUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseAdminUpgradeabilityProxyTransactorRaw struct {
	Contract *BaseAdminUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseAdminUpgradeabilityProxy creates a new instance of BaseAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseAdminUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*BaseAdminUpgradeabilityProxy, error) {
	contract, err := bindBaseAdminUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxy{BaseAdminUpgradeabilityProxyCaller: BaseAdminUpgradeabilityProxyCaller{contract: contract}, BaseAdminUpgradeabilityProxyTransactor: BaseAdminUpgradeabilityProxyTransactor{contract: contract}, BaseAdminUpgradeabilityProxyFilterer: BaseAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewBaseAdminUpgradeabilityProxyCaller creates a new read-only instance of BaseAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseAdminUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*BaseAdminUpgradeabilityProxyCaller, error) {
	contract, err := bindBaseAdminUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewBaseAdminUpgradeabilityProxyTransactor creates a new write-only instance of BaseAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseAdminUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAdminUpgradeabilityProxyTransactor, error) {
	contract, err := bindBaseAdminUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewBaseAdminUpgradeabilityProxyFilterer creates a new log filterer instance of BaseAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseAdminUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAdminUpgradeabilityProxyFilterer, error) {
	contract, err := bindBaseAdminUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindBaseAdminUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindBaseAdminUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseAdminUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAdminUpgradeabilityProxy.Contract.BaseAdminUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.BaseAdminUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.BaseAdminUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseAdminUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) Admin() (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Admin(&_BaseAdminUpgradeabilityProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Admin(&_BaseAdminUpgradeabilityProxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.ChangeAdmin(&_BaseAdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.ChangeAdmin(&_BaseAdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) Implementation() (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Implementation(&_BaseAdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Implementation(&_BaseAdminUpgradeabilityProxy.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.UpgradeTo(&_BaseAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.UpgradeTo(&_BaseAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_BaseAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_BaseAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Fallback(&_BaseAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseAdminUpgradeabilityProxy.Contract.Fallback(&_BaseAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// BaseAdminUpgradeabilityProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the BaseAdminUpgradeabilityProxy contract.
type BaseAdminUpgradeabilityProxyAdminChangedIterator struct {
	Event *BaseAdminUpgradeabilityProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAdminUpgradeabilityProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAdminUpgradeabilityProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAdminUpgradeabilityProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAdminUpgradeabilityProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAdminUpgradeabilityProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAdminUpgradeabilityProxyAdminChanged represents a AdminChanged event raised by the BaseAdminUpgradeabilityProxy contract.
type BaseAdminUpgradeabilityProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*BaseAdminUpgradeabilityProxyAdminChangedIterator, error) {

	logs, sub, err := _BaseAdminUpgradeabilityProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyAdminChangedIterator{contract: _BaseAdminUpgradeabilityProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *BaseAdminUpgradeabilityProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAdminUpgradeabilityProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAdminUpgradeabilityProxyAdminChanged)
				if err := _BaseAdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) ParseAdminChanged(log types.Log) (*BaseAdminUpgradeabilityProxyAdminChanged, error) {
	event := new(BaseAdminUpgradeabilityProxyAdminChanged)
	if err := _BaseAdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseAdminUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the BaseAdminUpgradeabilityProxy contract.
type BaseAdminUpgradeabilityProxyUpgradedIterator struct {
	Event *BaseAdminUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAdminUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAdminUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAdminUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAdminUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAdminUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAdminUpgradeabilityProxyUpgraded represents a Upgraded event raised by the BaseAdminUpgradeabilityProxy contract.
type BaseAdminUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BaseAdminUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseAdminUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BaseAdminUpgradeabilityProxyUpgradedIterator{contract: _BaseAdminUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BaseAdminUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseAdminUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAdminUpgradeabilityProxyUpgraded)
				if err := _BaseAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseAdminUpgradeabilityProxy *BaseAdminUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*BaseAdminUpgradeabilityProxyUpgraded, error) {
	event := new(BaseAdminUpgradeabilityProxyUpgraded)
	if err := _BaseAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BaseUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const BaseUpgradeabilityProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// BaseUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var BaseUpgradeabilityProxyBin = "0x6080604052348015600f57600080fd5b50609d8061001e6000396000f3fe6080604052600a600c565b005b6012601e565b601e601a6020565b6045565b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156063573d6000f35b3d6000fdfea265627a7a72315820ea68fb4bcabe695fbb04369057c90a2a6d2b7d0f23f610809e0bd7de4521dcbc64736f6c63430005100032"

// DeployBaseUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of BaseUpgradeabilityProxy to it.
func DeployBaseUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BaseUpgradeabilityProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseUpgradeabilityProxy{BaseUpgradeabilityProxyCaller: BaseUpgradeabilityProxyCaller{contract: contract}, BaseUpgradeabilityProxyTransactor: BaseUpgradeabilityProxyTransactor{contract: contract}, BaseUpgradeabilityProxyFilterer: BaseUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// BaseUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type BaseUpgradeabilityProxy struct {
	BaseUpgradeabilityProxyCaller     // Read-only binding to the contract
	BaseUpgradeabilityProxyTransactor // Write-only binding to the contract
	BaseUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// BaseUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseUpgradeabilityProxySession struct {
	Contract     *BaseUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BaseUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseUpgradeabilityProxyCallerSession struct {
	Contract *BaseUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// BaseUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseUpgradeabilityProxyTransactorSession struct {
	Contract     *BaseUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// BaseUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyRaw struct {
	Contract *BaseUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// BaseUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyCallerRaw struct {
	Contract *BaseUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// BaseUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseUpgradeabilityProxyTransactorRaw struct {
	Contract *BaseUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseUpgradeabilityProxy creates a new instance of BaseUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*BaseUpgradeabilityProxy, error) {
	contract, err := bindBaseUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxy{BaseUpgradeabilityProxyCaller: BaseUpgradeabilityProxyCaller{contract: contract}, BaseUpgradeabilityProxyTransactor: BaseUpgradeabilityProxyTransactor{contract: contract}, BaseUpgradeabilityProxyFilterer: BaseUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewBaseUpgradeabilityProxyCaller creates a new read-only instance of BaseUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*BaseUpgradeabilityProxyCaller, error) {
	contract, err := bindBaseUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewBaseUpgradeabilityProxyTransactor creates a new write-only instance of BaseUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseUpgradeabilityProxyTransactor, error) {
	contract, err := bindBaseUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewBaseUpgradeabilityProxyFilterer creates a new log filterer instance of BaseUpgradeabilityProxy, bound to a specific deployed contract.
func NewBaseUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseUpgradeabilityProxyFilterer, error) {
	contract, err := bindBaseUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindBaseUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindBaseUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseUpgradeabilityProxy.Contract.BaseUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.BaseUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.BaseUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BaseUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.Fallback(&_BaseUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BaseUpgradeabilityProxy.Contract.Fallback(&_BaseUpgradeabilityProxy.TransactOpts, calldata)
}

// BaseUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the BaseUpgradeabilityProxy contract.
type BaseUpgradeabilityProxyUpgradedIterator struct {
	Event *BaseUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseUpgradeabilityProxyUpgraded represents a Upgraded event raised by the BaseUpgradeabilityProxy contract.
type BaseUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BaseUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BaseUpgradeabilityProxyUpgradedIterator{contract: _BaseUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BaseUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BaseUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseUpgradeabilityProxyUpgraded)
				if err := _BaseUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BaseUpgradeabilityProxy *BaseUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*BaseUpgradeabilityProxyUpgraded, error) {
	event := new(BaseUpgradeabilityProxyUpgraded)
	if err := _BaseUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BasicAdapterABI is the input ABI used to generate the binding from.
const BasicAdapterABI = "[{\"inputs\":[{\"internalType\":\"contractIGatewayRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRelayHub\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRelayHub\",\"type\":\"address\"}],\"name\":\"RelayHubChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedFunction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxPossibleCharge\",\"type\":\"uint256\"}],\"name\":\"acceptRelayedCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHubAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"actualCharge\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"preRetVal\",\"type\":\"bytes32\"}],\"name\":\"postRelayedCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"preRelayedCall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"relayHubVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDefaultRelayHub\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BasicAdapterBin is the compiled bytecode used for deploying new contracts.
var BasicAdapterBin = "0x60806040523480156200001157600080fd5b506040516200133f3803806200133f833981810160405260208110156200003757600080fd5b50516200004f62000075602090811b6200092717901c565b603480546001600160a01b0319166001600160a01b039290921691909117905562000280565b600054610100900460ff16806200009a57506200009a6001600160e01b036200014c16565b80620000a9575060005460ff16155b620000e65760405162461bcd60e51b815260040180806020018281038252602e815260200180620012e4602e913960400191505060405180910390fd5b600054610100900460ff1615801562000112576000805460ff1961ff0019909116610100171660011790555b6033546001600160a01b03166200013657620001366001600160e01b036200015216565b801562000149576000805461ff00191690555b50565b303b1590565b6200017a73d216153c06e857cd7f72665e0af1d7d82172f4946001600160e01b036200017c16565b565b6033546001600160a01b03908116908216620001ca5760405162461bcd60e51b815260040180806020018281038252602e815260200180620012b6602e913960400191505060405180910390fd5b806001600160a01b0316826001600160a01b031614156200021d5760405162461bcd60e51b815260040180806020018281038252602d81526020018062001312602d913960400191505060405180910390fd5b816001600160a01b0316816001600160a01b03167fb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e860405160405180910390a350603380546001600160a01b0319166001600160a01b0392909216919091179055565b61102680620002906000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638129fc1c116100665780638129fc1c1461021f57806383947ea014610227578063ad61ccd514610394578063b0ba3c5a14610411578063e06e0e22146104cf57610093565b80631220e2ff1461009857806374e861d6146100a257806377f61403146100c657806380274db71461019f575b600080fd5b6100a061054b565b005b6100aa61056a565b604080516001600160a01b039092168252519081900360200190f35b6100a0600480360360a08110156100dc57600080fd5b810190602081018135600160201b8111156100f657600080fd5b82018360208201111561010857600080fd5b803590602001918460018302840111600160201b8311171561012957600080fd5b919390926001600160a01b03833516926020810135926040820135929091608081019060600135600160201b81111561016157600080fd5b82018360208201111561017357600080fd5b803590602001918460018302840111600160201b8311171561019457600080fd5b50909250905061057a565b61020d600480360360208110156101b557600080fd5b810190602081018135600160201b8111156101cf57600080fd5b8201836020820111156101e157600080fd5b803590602001918460018302840111600160201b8311171561020257600080fd5b509092509050610888565b60408051918252519081900360200190f35b6100a0610927565b610315600480360361012081101561023e57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561027157600080fd5b82018360208201111561028357600080fd5b803590602001918460018302840111600160201b831117156102a457600080fd5b9193909282359260208101359260408201359260608301359260a081019060800135600160201b8111156102d757600080fd5b8201836020820111156102e957600080fd5b803590602001918460018302840111600160201b8311171561030a57600080fd5b9193509150356109e1565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610358578181015183820152602001610340565b50505050905090810190601f1680156103855780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61039c610a01565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103d65781810151838201526020016103be565b50505050905090810190601f1680156104035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100a06004803603606081101561042757600080fd5b810190602081018135600160201b81111561044157600080fd5b82018360208201111561045357600080fd5b803590602001918460018302840111600160201b8311171561047457600080fd5b919390929091602081019035600160201b81111561049157600080fd5b8201836020820111156104a357600080fd5b803590602001918460018302840111600160201b831117156104c457600080fd5b919350915035610a20565b6100a0600480360360808110156104e557600080fd5b810190602081018135600160201b8111156104ff57600080fd5b82018360208201111561051157600080fd5b803590602001918460018302840111600160201b8311171561053257600080fd5b9193509150803515159060208101359060400135610cef565b61056873d216153c06e857cd7f72665e0af1d7d82172f494610d91565b565b6033546001600160a01b03165b90565b60008787876040516020018080602001836001600160a01b03166001600160a01b031681526020018281038252858582818152602001925080828437600081840152601f19601f8201169050808301925050509450505050506040516020818303038152906040528051906020012090506000603460009054906101000a90046001600160a01b03166001600160a01b03166364936b1e8a8a6040518363ffffffff1660e01b815260040180806020018281038252848482818152602001925080828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b15801561067157600080fd5b505afa158015610685573d6000803e3d6000fd5b505050506040513d602081101561069b57600080fd5b505160405163159ab14d60e01b8152600481018481526024820189905260448201889052608060648301908152608483018790526001600160a01b039093169263159ab14d9286928b928b928b928b92909160a401848480828437600081840152601f19601f8201169050808301925050509650505050505050602060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050506040513d602081101561075957600080fd5b505160345460405163efa74f1f60e01b8152602060048201908152602482018c90529293506001600160a01b039091169163efa74f1f918c918c918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b1580156107d257600080fd5b505afa1580156107e6573d6000803e3d6000fd5b505050506040513d60208110156107fc57600080fd5b50516040805163a9059cbb60e01b81526001600160a01b038a81166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561085157600080fd5b505af1158015610865573d6000803e3d6000fd5b505050506040513d602081101561087b57600080fd5b5050505050505050505050565b600061089261056a565b6001600160a01b0316336001600160a01b0316146108e15760405162461bcd60e51b8152600401808060200182810382526024815260200180610fce6024913960400191505060405180910390fd5b61092083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e9192505050565b9392505050565b600054610100900460ff16806109405750610940610e97565b8061094e575060005460ff16155b6109895760405162461bcd60e51b815260040180806020018281038252602e815260200180610f73602e913960400191505060405180910390fd5b600054610100900460ff161580156109b4576000805460ff1961ff0019909116610100171660011790555b6033546001600160a01b03166109cc576109cc61054b565b80156109de576000805461ff00191690555b50565b600060606109ed610e9d565b915091509b509b9950505050505050505050565b6040805180820190915260058152640312e302e360dc1b602082015290565b60345460405163efa74f1f60e01b8152602060048201908152602482018790526001600160a01b039092169163efa74f1f91889188918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b158015610a9457600080fd5b505afa158015610aa8573d6000803e3d6000fd5b505050506040513d6020811015610abe57600080fd5b50516001600160a01b03166323b872dd610ad6610ec1565b604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152306024830152604482018590525160648083019260209291908290030181600087803b158015610b2a57600080fd5b505af1158015610b3e573d6000803e3d6000fd5b505050506040513d6020811015610b5457600080fd5b5051610b9f576040805162461bcd60e51b81526020600482015260156024820152741d1bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604482015290519081900360640190fd5b603454604051633249b58f60e11b8152602060048201908152602482018790526001600160a01b03909216916364936b1e91889188918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b158015610c1357600080fd5b505afa158015610c27573d6000803e3d6000fd5b505050506040513d6020811015610c3d57600080fd5b5051604080516338463cff60e01b81526024810184905260048101918252604481018590526001600160a01b03909216916338463cff918691869186918190606401858580828437600081840152601f19601f820116905080830192505050945050505050602060405180830381600087803b158015610cbc57600080fd5b505af1158015610cd0573d6000803e3d6000fd5b505050506040513d6020811015610ce657600080fd5b50505050505050565b610cf761056a565b6001600160a01b0316336001600160a01b031614610d465760405162461bcd60e51b8152600401808060200182810382526024815260200180610fce6024913960400191505060405180910390fd5b610d8a85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250869150859050610eec565b5050505050565b6033546001600160a01b03908116908216610ddd5760405162461bcd60e51b815260040180806020018281038252602e815260200180610f45602e913960400191505060405180910390fd5b806001600160a01b0316826001600160a01b03161415610e2e5760405162461bcd60e51b815260040180806020018281038252602d815260200180610fa1602d913960400191505060405180910390fd5b816001600160a01b0316816001600160a01b03167fb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e860405160405180910390a350603380546001600160a01b0319166001600160a01b0392909216919091179055565b50600090565b303b1590565b60006060610eb960405180602001604052806000815250610ef2565b915091509091565b6033546000906001600160a01b03163314610edd575033610577565b610ee5610ef7565b9050610577565b50505050565b600091565b600060606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169291505056fe47534e526563697069656e743a206e65772052656c617948756220697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656447534e526563697069656e743a206e65772052656c6179487562206973207468652063757272656e74206f6e6547534e526563697069656e743a2063616c6c6572206973206e6f742052656c6179487562a265627a7a723158200f5f96dce70e4ecc68c13edd2119a73de85a231054a69c1ff77c33519dc9454c64736f6c6343000510003247534e526563697069656e743a206e65772052656c617948756220697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656447534e526563697069656e743a206e65772052656c6179487562206973207468652063757272656e74206f6e65"

// DeployBasicAdapter deploys a new Ethereum contract, binding an instance of BasicAdapter to it.
func DeployBasicAdapter(auth *bind.TransactOpts, backend bind.ContractBackend, _registry common.Address) (common.Address, *types.Transaction, *BasicAdapter, error) {
	parsed, err := abi.JSON(strings.NewReader(BasicAdapterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BasicAdapterBin), backend, _registry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BasicAdapter{BasicAdapterCaller: BasicAdapterCaller{contract: contract}, BasicAdapterTransactor: BasicAdapterTransactor{contract: contract}, BasicAdapterFilterer: BasicAdapterFilterer{contract: contract}}, nil
}

// BasicAdapter is an auto generated Go binding around an Ethereum contract.
type BasicAdapter struct {
	BasicAdapterCaller     // Read-only binding to the contract
	BasicAdapterTransactor // Write-only binding to the contract
	BasicAdapterFilterer   // Log filterer for contract events
}

// BasicAdapterCaller is an auto generated read-only Go binding around an Ethereum contract.
type BasicAdapterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicAdapterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BasicAdapterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicAdapterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BasicAdapterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicAdapterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BasicAdapterSession struct {
	Contract     *BasicAdapter     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BasicAdapterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BasicAdapterCallerSession struct {
	Contract *BasicAdapterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// BasicAdapterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BasicAdapterTransactorSession struct {
	Contract     *BasicAdapterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// BasicAdapterRaw is an auto generated low-level Go binding around an Ethereum contract.
type BasicAdapterRaw struct {
	Contract *BasicAdapter // Generic contract binding to access the raw methods on
}

// BasicAdapterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BasicAdapterCallerRaw struct {
	Contract *BasicAdapterCaller // Generic read-only contract binding to access the raw methods on
}

// BasicAdapterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BasicAdapterTransactorRaw struct {
	Contract *BasicAdapterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBasicAdapter creates a new instance of BasicAdapter, bound to a specific deployed contract.
func NewBasicAdapter(address common.Address, backend bind.ContractBackend) (*BasicAdapter, error) {
	contract, err := bindBasicAdapter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BasicAdapter{BasicAdapterCaller: BasicAdapterCaller{contract: contract}, BasicAdapterTransactor: BasicAdapterTransactor{contract: contract}, BasicAdapterFilterer: BasicAdapterFilterer{contract: contract}}, nil
}

// NewBasicAdapterCaller creates a new read-only instance of BasicAdapter, bound to a specific deployed contract.
func NewBasicAdapterCaller(address common.Address, caller bind.ContractCaller) (*BasicAdapterCaller, error) {
	contract, err := bindBasicAdapter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BasicAdapterCaller{contract: contract}, nil
}

// NewBasicAdapterTransactor creates a new write-only instance of BasicAdapter, bound to a specific deployed contract.
func NewBasicAdapterTransactor(address common.Address, transactor bind.ContractTransactor) (*BasicAdapterTransactor, error) {
	contract, err := bindBasicAdapter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BasicAdapterTransactor{contract: contract}, nil
}

// NewBasicAdapterFilterer creates a new log filterer instance of BasicAdapter, bound to a specific deployed contract.
func NewBasicAdapterFilterer(address common.Address, filterer bind.ContractFilterer) (*BasicAdapterFilterer, error) {
	contract, err := bindBasicAdapter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BasicAdapterFilterer{contract: contract}, nil
}

// bindBasicAdapter binds a generic wrapper to an already deployed contract.
func bindBasicAdapter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BasicAdapterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicAdapter *BasicAdapterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BasicAdapter.Contract.BasicAdapterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicAdapter *BasicAdapterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicAdapter.Contract.BasicAdapterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicAdapter *BasicAdapterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicAdapter.Contract.BasicAdapterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicAdapter *BasicAdapterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BasicAdapter.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicAdapter *BasicAdapterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicAdapter.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicAdapter *BasicAdapterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicAdapter.Contract.contract.Transact(opts, method, params...)
}

// AcceptRelayedCall is a free data retrieval call binding the contract method 0x83947ea0.
//
// Solidity: function acceptRelayedCall(address relay, address from, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes approvalData, uint256 maxPossibleCharge) view returns(uint256, bytes)
func (_BasicAdapter *BasicAdapterCaller) AcceptRelayedCall(opts *bind.CallOpts, relay common.Address, from common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, approvalData []byte, maxPossibleCharge *big.Int) (*big.Int, []byte, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new([]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _BasicAdapter.contract.Call(opts, out, "acceptRelayedCall", relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, approvalData, maxPossibleCharge)
	return *ret0, *ret1, err
}

// AcceptRelayedCall is a free data retrieval call binding the contract method 0x83947ea0.
//
// Solidity: function acceptRelayedCall(address relay, address from, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes approvalData, uint256 maxPossibleCharge) view returns(uint256, bytes)
func (_BasicAdapter *BasicAdapterSession) AcceptRelayedCall(relay common.Address, from common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, approvalData []byte, maxPossibleCharge *big.Int) (*big.Int, []byte, error) {
	return _BasicAdapter.Contract.AcceptRelayedCall(&_BasicAdapter.CallOpts, relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, approvalData, maxPossibleCharge)
}

// AcceptRelayedCall is a free data retrieval call binding the contract method 0x83947ea0.
//
// Solidity: function acceptRelayedCall(address relay, address from, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes approvalData, uint256 maxPossibleCharge) view returns(uint256, bytes)
func (_BasicAdapter *BasicAdapterCallerSession) AcceptRelayedCall(relay common.Address, from common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, approvalData []byte, maxPossibleCharge *big.Int) (*big.Int, []byte, error) {
	return _BasicAdapter.Contract.AcceptRelayedCall(&_BasicAdapter.CallOpts, relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, approvalData, maxPossibleCharge)
}

// GetHubAddr is a free data retrieval call binding the contract method 0x74e861d6.
//
// Solidity: function getHubAddr() view returns(address)
func (_BasicAdapter *BasicAdapterCaller) GetHubAddr(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BasicAdapter.contract.Call(opts, out, "getHubAddr")
	return *ret0, err
}

// GetHubAddr is a free data retrieval call binding the contract method 0x74e861d6.
//
// Solidity: function getHubAddr() view returns(address)
func (_BasicAdapter *BasicAdapterSession) GetHubAddr() (common.Address, error) {
	return _BasicAdapter.Contract.GetHubAddr(&_BasicAdapter.CallOpts)
}

// GetHubAddr is a free data retrieval call binding the contract method 0x74e861d6.
//
// Solidity: function getHubAddr() view returns(address)
func (_BasicAdapter *BasicAdapterCallerSession) GetHubAddr() (common.Address, error) {
	return _BasicAdapter.Contract.GetHubAddr(&_BasicAdapter.CallOpts)
}

// RelayHubVersion is a free data retrieval call binding the contract method 0xad61ccd5.
//
// Solidity: function relayHubVersion() view returns(string)
func (_BasicAdapter *BasicAdapterCaller) RelayHubVersion(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _BasicAdapter.contract.Call(opts, out, "relayHubVersion")
	return *ret0, err
}

// RelayHubVersion is a free data retrieval call binding the contract method 0xad61ccd5.
//
// Solidity: function relayHubVersion() view returns(string)
func (_BasicAdapter *BasicAdapterSession) RelayHubVersion() (string, error) {
	return _BasicAdapter.Contract.RelayHubVersion(&_BasicAdapter.CallOpts)
}

// RelayHubVersion is a free data retrieval call binding the contract method 0xad61ccd5.
//
// Solidity: function relayHubVersion() view returns(string)
func (_BasicAdapter *BasicAdapterCallerSession) RelayHubVersion() (string, error) {
	return _BasicAdapter.Contract.RelayHubVersion(&_BasicAdapter.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0xb0ba3c5a.
//
// Solidity: function burn(string _symbol, bytes _to, uint256 _amount) returns()
func (_BasicAdapter *BasicAdapterTransactor) Burn(opts *bind.TransactOpts, _symbol string, _to []byte, _amount *big.Int) (*types.Transaction, error) {
	return _BasicAdapter.contract.Transact(opts, "burn", _symbol, _to, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb0ba3c5a.
//
// Solidity: function burn(string _symbol, bytes _to, uint256 _amount) returns()
func (_BasicAdapter *BasicAdapterSession) Burn(_symbol string, _to []byte, _amount *big.Int) (*types.Transaction, error) {
	return _BasicAdapter.Contract.Burn(&_BasicAdapter.TransactOpts, _symbol, _to, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb0ba3c5a.
//
// Solidity: function burn(string _symbol, bytes _to, uint256 _amount) returns()
func (_BasicAdapter *BasicAdapterTransactorSession) Burn(_symbol string, _to []byte, _amount *big.Int) (*types.Transaction, error) {
	return _BasicAdapter.Contract.Burn(&_BasicAdapter.TransactOpts, _symbol, _to, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_BasicAdapter *BasicAdapterTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicAdapter.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_BasicAdapter *BasicAdapterSession) Initialize() (*types.Transaction, error) {
	return _BasicAdapter.Contract.Initialize(&_BasicAdapter.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_BasicAdapter *BasicAdapterTransactorSession) Initialize() (*types.Transaction, error) {
	return _BasicAdapter.Contract.Initialize(&_BasicAdapter.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x77f61403.
//
// Solidity: function mint(string _symbol, address _recipient, uint256 _amount, bytes32 _nHash, bytes _sig) returns()
func (_BasicAdapter *BasicAdapterTransactor) Mint(opts *bind.TransactOpts, _symbol string, _recipient common.Address, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _BasicAdapter.contract.Transact(opts, "mint", _symbol, _recipient, _amount, _nHash, _sig)
}

// Mint is a paid mutator transaction binding the contract method 0x77f61403.
//
// Solidity: function mint(string _symbol, address _recipient, uint256 _amount, bytes32 _nHash, bytes _sig) returns()
func (_BasicAdapter *BasicAdapterSession) Mint(_symbol string, _recipient common.Address, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _BasicAdapter.Contract.Mint(&_BasicAdapter.TransactOpts, _symbol, _recipient, _amount, _nHash, _sig)
}

// Mint is a paid mutator transaction binding the contract method 0x77f61403.
//
// Solidity: function mint(string _symbol, address _recipient, uint256 _amount, bytes32 _nHash, bytes _sig) returns()
func (_BasicAdapter *BasicAdapterTransactorSession) Mint(_symbol string, _recipient common.Address, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _BasicAdapter.Contract.Mint(&_BasicAdapter.TransactOpts, _symbol, _recipient, _amount, _nHash, _sig)
}

// PostRelayedCall is a paid mutator transaction binding the contract method 0xe06e0e22.
//
// Solidity: function postRelayedCall(bytes context, bool success, uint256 actualCharge, bytes32 preRetVal) returns()
func (_BasicAdapter *BasicAdapterTransactor) PostRelayedCall(opts *bind.TransactOpts, context []byte, success bool, actualCharge *big.Int, preRetVal [32]byte) (*types.Transaction, error) {
	return _BasicAdapter.contract.Transact(opts, "postRelayedCall", context, success, actualCharge, preRetVal)
}

// PostRelayedCall is a paid mutator transaction binding the contract method 0xe06e0e22.
//
// Solidity: function postRelayedCall(bytes context, bool success, uint256 actualCharge, bytes32 preRetVal) returns()
func (_BasicAdapter *BasicAdapterSession) PostRelayedCall(context []byte, success bool, actualCharge *big.Int, preRetVal [32]byte) (*types.Transaction, error) {
	return _BasicAdapter.Contract.PostRelayedCall(&_BasicAdapter.TransactOpts, context, success, actualCharge, preRetVal)
}

// PostRelayedCall is a paid mutator transaction binding the contract method 0xe06e0e22.
//
// Solidity: function postRelayedCall(bytes context, bool success, uint256 actualCharge, bytes32 preRetVal) returns()
func (_BasicAdapter *BasicAdapterTransactorSession) PostRelayedCall(context []byte, success bool, actualCharge *big.Int, preRetVal [32]byte) (*types.Transaction, error) {
	return _BasicAdapter.Contract.PostRelayedCall(&_BasicAdapter.TransactOpts, context, success, actualCharge, preRetVal)
}

// PreRelayedCall is a paid mutator transaction binding the contract method 0x80274db7.
//
// Solidity: function preRelayedCall(bytes context) returns(bytes32)
func (_BasicAdapter *BasicAdapterTransactor) PreRelayedCall(opts *bind.TransactOpts, context []byte) (*types.Transaction, error) {
	return _BasicAdapter.contract.Transact(opts, "preRelayedCall", context)
}

// PreRelayedCall is a paid mutator transaction binding the contract method 0x80274db7.
//
// Solidity: function preRelayedCall(bytes context) returns(bytes32)
func (_BasicAdapter *BasicAdapterSession) PreRelayedCall(context []byte) (*types.Transaction, error) {
	return _BasicAdapter.Contract.PreRelayedCall(&_BasicAdapter.TransactOpts, context)
}

// PreRelayedCall is a paid mutator transaction binding the contract method 0x80274db7.
//
// Solidity: function preRelayedCall(bytes context) returns(bytes32)
func (_BasicAdapter *BasicAdapterTransactorSession) PreRelayedCall(context []byte) (*types.Transaction, error) {
	return _BasicAdapter.Contract.PreRelayedCall(&_BasicAdapter.TransactOpts, context)
}

// SetDefaultRelayHub is a paid mutator transaction binding the contract method 0x1220e2ff.
//
// Solidity: function setDefaultRelayHub() returns()
func (_BasicAdapter *BasicAdapterTransactor) SetDefaultRelayHub(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicAdapter.contract.Transact(opts, "setDefaultRelayHub")
}

// SetDefaultRelayHub is a paid mutator transaction binding the contract method 0x1220e2ff.
//
// Solidity: function setDefaultRelayHub() returns()
func (_BasicAdapter *BasicAdapterSession) SetDefaultRelayHub() (*types.Transaction, error) {
	return _BasicAdapter.Contract.SetDefaultRelayHub(&_BasicAdapter.TransactOpts)
}

// SetDefaultRelayHub is a paid mutator transaction binding the contract method 0x1220e2ff.
//
// Solidity: function setDefaultRelayHub() returns()
func (_BasicAdapter *BasicAdapterTransactorSession) SetDefaultRelayHub() (*types.Transaction, error) {
	return _BasicAdapter.Contract.SetDefaultRelayHub(&_BasicAdapter.TransactOpts)
}

// BasicAdapterRelayHubChangedIterator is returned from FilterRelayHubChanged and is used to iterate over the raw logs and unpacked data for RelayHubChanged events raised by the BasicAdapter contract.
type BasicAdapterRelayHubChangedIterator struct {
	Event *BasicAdapterRelayHubChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BasicAdapterRelayHubChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BasicAdapterRelayHubChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BasicAdapterRelayHubChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BasicAdapterRelayHubChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BasicAdapterRelayHubChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BasicAdapterRelayHubChanged represents a RelayHubChanged event raised by the BasicAdapter contract.
type BasicAdapterRelayHubChanged struct {
	OldRelayHub common.Address
	NewRelayHub common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRelayHubChanged is a free log retrieval operation binding the contract event 0xb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e8.
//
// Solidity: event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub)
func (_BasicAdapter *BasicAdapterFilterer) FilterRelayHubChanged(opts *bind.FilterOpts, oldRelayHub []common.Address, newRelayHub []common.Address) (*BasicAdapterRelayHubChangedIterator, error) {

	var oldRelayHubRule []interface{}
	for _, oldRelayHubItem := range oldRelayHub {
		oldRelayHubRule = append(oldRelayHubRule, oldRelayHubItem)
	}
	var newRelayHubRule []interface{}
	for _, newRelayHubItem := range newRelayHub {
		newRelayHubRule = append(newRelayHubRule, newRelayHubItem)
	}

	logs, sub, err := _BasicAdapter.contract.FilterLogs(opts, "RelayHubChanged", oldRelayHubRule, newRelayHubRule)
	if err != nil {
		return nil, err
	}
	return &BasicAdapterRelayHubChangedIterator{contract: _BasicAdapter.contract, event: "RelayHubChanged", logs: logs, sub: sub}, nil
}

// WatchRelayHubChanged is a free log subscription operation binding the contract event 0xb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e8.
//
// Solidity: event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub)
func (_BasicAdapter *BasicAdapterFilterer) WatchRelayHubChanged(opts *bind.WatchOpts, sink chan<- *BasicAdapterRelayHubChanged, oldRelayHub []common.Address, newRelayHub []common.Address) (event.Subscription, error) {

	var oldRelayHubRule []interface{}
	for _, oldRelayHubItem := range oldRelayHub {
		oldRelayHubRule = append(oldRelayHubRule, oldRelayHubItem)
	}
	var newRelayHubRule []interface{}
	for _, newRelayHubItem := range newRelayHub {
		newRelayHubRule = append(newRelayHubRule, newRelayHubItem)
	}

	logs, sub, err := _BasicAdapter.contract.WatchLogs(opts, "RelayHubChanged", oldRelayHubRule, newRelayHubRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BasicAdapterRelayHubChanged)
				if err := _BasicAdapter.contract.UnpackLog(event, "RelayHubChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayHubChanged is a log parse operation binding the contract event 0xb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e8.
//
// Solidity: event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub)
func (_BasicAdapter *BasicAdapterFilterer) ParseRelayHubChanged(log types.Log) (*BasicAdapterRelayHubChanged, error) {
	event := new(BasicAdapterRelayHubChanged)
	if err := _BasicAdapter.contract.UnpackLog(event, "RelayHubChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BindingsABI is the input ABI used to generate the binding from.
const BindingsABI = "[]"

// BindingsBin is the compiled bytecode used for deploying new contracts.
var BindingsBin = "0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a72315820cd5ba1f89398c92d0b6471cb4f6a8af4ca68ecb2b4465be78cd24b8278bdd64764736f6c63430005100032"

// DeployBindings deploys a new Ethereum contract, binding an instance of Bindings to it.
func DeployBindings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bindings, error) {
	parsed, err := abi.JSON(strings.NewReader(BindingsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BindingsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bindings{BindingsCaller: BindingsCaller{contract: contract}, BindingsTransactor: BindingsTransactor{contract: contract}, BindingsFilterer: BindingsFilterer{contract: contract}}, nil
}

// Bindings is an auto generated Go binding around an Ethereum contract.
type Bindings struct {
	BindingsCaller     // Read-only binding to the contract
	BindingsTransactor // Write-only binding to the contract
	BindingsFilterer   // Log filterer for contract events
}

// BindingsCaller is an auto generated read-only Go binding around an Ethereum contract.
type BindingsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BindingsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BindingsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BindingsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BindingsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BindingsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BindingsSession struct {
	Contract     *Bindings         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BindingsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BindingsCallerSession struct {
	Contract *BindingsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// BindingsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BindingsTransactorSession struct {
	Contract     *BindingsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BindingsRaw is an auto generated low-level Go binding around an Ethereum contract.
type BindingsRaw struct {
	Contract *Bindings // Generic contract binding to access the raw methods on
}

// BindingsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BindingsCallerRaw struct {
	Contract *BindingsCaller // Generic read-only contract binding to access the raw methods on
}

// BindingsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BindingsTransactorRaw struct {
	Contract *BindingsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBindings creates a new instance of Bindings, bound to a specific deployed contract.
func NewBindings(address common.Address, backend bind.ContractBackend) (*Bindings, error) {
	contract, err := bindBindings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bindings{BindingsCaller: BindingsCaller{contract: contract}, BindingsTransactor: BindingsTransactor{contract: contract}, BindingsFilterer: BindingsFilterer{contract: contract}}, nil
}

// NewBindingsCaller creates a new read-only instance of Bindings, bound to a specific deployed contract.
func NewBindingsCaller(address common.Address, caller bind.ContractCaller) (*BindingsCaller, error) {
	contract, err := bindBindings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BindingsCaller{contract: contract}, nil
}

// NewBindingsTransactor creates a new write-only instance of Bindings, bound to a specific deployed contract.
func NewBindingsTransactor(address common.Address, transactor bind.ContractTransactor) (*BindingsTransactor, error) {
	contract, err := bindBindings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BindingsTransactor{contract: contract}, nil
}

// NewBindingsFilterer creates a new log filterer instance of Bindings, bound to a specific deployed contract.
func NewBindingsFilterer(address common.Address, filterer bind.ContractFilterer) (*BindingsFilterer, error) {
	contract, err := bindBindings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BindingsFilterer{contract: contract}, nil
}

// bindBindings binds a generic wrapper to an already deployed contract.
func bindBindings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BindingsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bindings *BindingsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bindings.Contract.BindingsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bindings *BindingsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bindings.Contract.BindingsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bindings *BindingsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bindings.Contract.BindingsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bindings *BindingsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bindings.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bindings *BindingsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bindings.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bindings *BindingsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bindings.Contract.contract.Transact(opts, method, params...)
}

// CanReclaimTokensABI is the input ABI used to generate the binding from.
const CanReclaimTokensABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"blacklistRecoverableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// CanReclaimTokensBin is the compiled bytecode used for deploying new contracts.
var CanReclaimTokensBin = "0x6080604052610c02806100136000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638f32d59b116100665780638f32d59b146100f4578063c4d66de814610110578063e30c397814610136578063f2fde38b1461013e578063f65d901c1461016457610093565b806316114acd146100985780634e71e0c8146100c0578063715018a6146100c85780638da5cb5b146100d0575b600080fd5b6100be600480360360208110156100ae57600080fd5b50356001600160a01b031661018a565b005b6100be6102fb565b6100be61037b565b6100d861040c565b604080516001600160a01b039092168252519081900360200190f35b6100fc61041b565b604080519115158252519081900360200190f35b6100be6004803603602081101561012657600080fd5b50356001600160a01b0316610441565b6100d86104ed565b6100be6004803603602081101561015457600080fd5b50356001600160a01b03166104fc565b6100be6004803603602081101561017a57600080fd5b50356001600160a01b03166105ed565b61019261041b565b6101d1576040805162461bcd60e51b81526020600482018190526024820152600080516020610b2c833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526067602052604090205460ff16156102295760405162461bcd60e51b815260040180806020018281038252602a815260200180610b02602a913960400191505060405180910390fd5b6001600160a01b0381166102695760405133904780156108fc02916000818181858888f19350505050158015610263573d6000803e3d6000fd5b506102f8565b604080516370a0823160e01b815230600482015290516102f89133916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156102b557600080fd5b505afa1580156102c9573d6000803e3d6000fd5b505050506040513d60208110156102df57600080fd5b50516001600160a01b038416919063ffffffff61065816565b50565b6066546001600160a01b031661030f6106af565b6001600160a01b0316146103545760405162461bcd60e51b815260040180806020018281038252602a815260200180610b7a602a913960400191505060405180910390fd5b606654610369906001600160a01b03166106b3565b606680546001600160a01b0319169055565b61038361041b565b6103c2576040805162461bcd60e51b81526020600482018190526024820152600080516020610b2c833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6033546000906001600160a01b03166104326106af565b6001600160a01b031614905090565b600054610100900460ff168061045a575061045a610754565b80610468575060005460ff16155b6104a35760405162461bcd60e51b815260040180806020018281038252602e815260200180610b4c602e913960400191505060405180910390fd5b600054610100900460ff161580156104ce576000805460ff1961ff0019909116610100171660011790555b6104d78261075a565b80156104e9576000805461ff00191690555b5050565b6066546001600160a01b031681565b61050461041b565b610543576040805162461bcd60e51b81526020600482018190526024820152600080516020610b2c833981519152604482015290519081900360640190fd5b61054b61040c565b6001600160a01b0316816001600160a01b03161415801561057a57506066546001600160a01b03828116911614155b6105cb576040805162461bcd60e51b815260206004820152601c60248201527f436c61696d61626c653a20696e76616c6964206e6577206f776e657200000000604482015290519081900360640190fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6105f561041b565b610634576040805162461bcd60e51b81526020600482018190526024820152600080516020610b2c833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606760205260409020805460ff19166001179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106aa9084906107f0565b505050565b3390565b6001600160a01b0381166106f85760405162461bcd60e51b8152600401808060200182810382526026815260200180610adc6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b303b1590565b600054610100900460ff16806107735750610773610754565b80610781575060005460ff16155b6107bc5760405162461bcd60e51b815260040180806020018281038252602e815260200180610b4c602e913960400191505060405180910390fd5b600054610100900460ff161580156107e7576000805460ff1961ff0019909116610100171660011790555b6104d7826109ae565b610802826001600160a01b0316610a9f565b610853576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106108915780518252601f199092019160209182019101610872565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146108f3576040519150601f19603f3d011682016040523d82523d6000602084013e6108f8565b606091505b50915091508161094f576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156109a85780806020019051602081101561096b57600080fd5b50516109a85760405162461bcd60e51b815260040180806020018281038252602a815260200180610ba4602a913960400191505060405180910390fd5b50505050565b600054610100900460ff16806109c757506109c7610754565b806109d5575060005460ff16155b610a105760405162461bcd60e51b815260040180806020018281038252602e815260200180610b4c602e913960400191505060405180910390fd5b600054610100900460ff16158015610a3b576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156104e9576000805461ff00191690555050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610ad357508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737343616e5265636c61696d546f6b656e733a20746f6b656e206973206e6f74207265636f76657261626c654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564436c61696d61626c653a2063616c6c6572206973206e6f74207468652070656e64696e67206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a723158206df9246688d1140d4149a98d5ea0e72c8f4249bda8bbd802b1f05e32afa62c1864736f6c63430005100032"

// DeployCanReclaimTokens deploys a new Ethereum contract, binding an instance of CanReclaimTokens to it.
func DeployCanReclaimTokens(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CanReclaimTokens, error) {
	parsed, err := abi.JSON(strings.NewReader(CanReclaimTokensABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CanReclaimTokensBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CanReclaimTokens{CanReclaimTokensCaller: CanReclaimTokensCaller{contract: contract}, CanReclaimTokensTransactor: CanReclaimTokensTransactor{contract: contract}, CanReclaimTokensFilterer: CanReclaimTokensFilterer{contract: contract}}, nil
}

// CanReclaimTokens is an auto generated Go binding around an Ethereum contract.
type CanReclaimTokens struct {
	CanReclaimTokensCaller     // Read-only binding to the contract
	CanReclaimTokensTransactor // Write-only binding to the contract
	CanReclaimTokensFilterer   // Log filterer for contract events
}

// CanReclaimTokensCaller is an auto generated read-only Go binding around an Ethereum contract.
type CanReclaimTokensCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanReclaimTokensTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CanReclaimTokensTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanReclaimTokensFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CanReclaimTokensFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanReclaimTokensSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CanReclaimTokensSession struct {
	Contract     *CanReclaimTokens // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CanReclaimTokensCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CanReclaimTokensCallerSession struct {
	Contract *CanReclaimTokensCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CanReclaimTokensTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CanReclaimTokensTransactorSession struct {
	Contract     *CanReclaimTokensTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CanReclaimTokensRaw is an auto generated low-level Go binding around an Ethereum contract.
type CanReclaimTokensRaw struct {
	Contract *CanReclaimTokens // Generic contract binding to access the raw methods on
}

// CanReclaimTokensCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CanReclaimTokensCallerRaw struct {
	Contract *CanReclaimTokensCaller // Generic read-only contract binding to access the raw methods on
}

// CanReclaimTokensTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CanReclaimTokensTransactorRaw struct {
	Contract *CanReclaimTokensTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCanReclaimTokens creates a new instance of CanReclaimTokens, bound to a specific deployed contract.
func NewCanReclaimTokens(address common.Address, backend bind.ContractBackend) (*CanReclaimTokens, error) {
	contract, err := bindCanReclaimTokens(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CanReclaimTokens{CanReclaimTokensCaller: CanReclaimTokensCaller{contract: contract}, CanReclaimTokensTransactor: CanReclaimTokensTransactor{contract: contract}, CanReclaimTokensFilterer: CanReclaimTokensFilterer{contract: contract}}, nil
}

// NewCanReclaimTokensCaller creates a new read-only instance of CanReclaimTokens, bound to a specific deployed contract.
func NewCanReclaimTokensCaller(address common.Address, caller bind.ContractCaller) (*CanReclaimTokensCaller, error) {
	contract, err := bindCanReclaimTokens(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CanReclaimTokensCaller{contract: contract}, nil
}

// NewCanReclaimTokensTransactor creates a new write-only instance of CanReclaimTokens, bound to a specific deployed contract.
func NewCanReclaimTokensTransactor(address common.Address, transactor bind.ContractTransactor) (*CanReclaimTokensTransactor, error) {
	contract, err := bindCanReclaimTokens(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CanReclaimTokensTransactor{contract: contract}, nil
}

// NewCanReclaimTokensFilterer creates a new log filterer instance of CanReclaimTokens, bound to a specific deployed contract.
func NewCanReclaimTokensFilterer(address common.Address, filterer bind.ContractFilterer) (*CanReclaimTokensFilterer, error) {
	contract, err := bindCanReclaimTokens(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CanReclaimTokensFilterer{contract: contract}, nil
}

// bindCanReclaimTokens binds a generic wrapper to an already deployed contract.
func bindCanReclaimTokens(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CanReclaimTokensABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CanReclaimTokens *CanReclaimTokensRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CanReclaimTokens.Contract.CanReclaimTokensCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CanReclaimTokens *CanReclaimTokensRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.CanReclaimTokensTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CanReclaimTokens *CanReclaimTokensRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.CanReclaimTokensTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CanReclaimTokens *CanReclaimTokensCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CanReclaimTokens.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CanReclaimTokens *CanReclaimTokensTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CanReclaimTokens *CanReclaimTokensTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.contract.Transact(opts, method, params...)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_CanReclaimTokens *CanReclaimTokensCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CanReclaimTokens.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_CanReclaimTokens *CanReclaimTokensSession) IsOwner() (bool, error) {
	return _CanReclaimTokens.Contract.IsOwner(&_CanReclaimTokens.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_CanReclaimTokens *CanReclaimTokensCallerSession) IsOwner() (bool, error) {
	return _CanReclaimTokens.Contract.IsOwner(&_CanReclaimTokens.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CanReclaimTokens *CanReclaimTokensCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CanReclaimTokens.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CanReclaimTokens *CanReclaimTokensSession) Owner() (common.Address, error) {
	return _CanReclaimTokens.Contract.Owner(&_CanReclaimTokens.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CanReclaimTokens *CanReclaimTokensCallerSession) Owner() (common.Address, error) {
	return _CanReclaimTokens.Contract.Owner(&_CanReclaimTokens.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_CanReclaimTokens *CanReclaimTokensCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CanReclaimTokens.contract.Call(opts, out, "pendingOwner")
	return *ret0, err
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_CanReclaimTokens *CanReclaimTokensSession) PendingOwner() (common.Address, error) {
	return _CanReclaimTokens.Contract.PendingOwner(&_CanReclaimTokens.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_CanReclaimTokens *CanReclaimTokensCallerSession) PendingOwner() (common.Address, error) {
	return _CanReclaimTokens.Contract.PendingOwner(&_CanReclaimTokens.CallOpts)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_CanReclaimTokens *CanReclaimTokensTransactor) BlacklistRecoverableToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.contract.Transact(opts, "blacklistRecoverableToken", _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_CanReclaimTokens *CanReclaimTokensSession) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.BlacklistRecoverableToken(&_CanReclaimTokens.TransactOpts, _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_CanReclaimTokens *CanReclaimTokensTransactorSession) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.BlacklistRecoverableToken(&_CanReclaimTokens.TransactOpts, _token)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_CanReclaimTokens *CanReclaimTokensTransactor) ClaimOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanReclaimTokens.contract.Transact(opts, "claimOwnership")
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_CanReclaimTokens *CanReclaimTokensSession) ClaimOwnership() (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.ClaimOwnership(&_CanReclaimTokens.TransactOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_CanReclaimTokens *CanReclaimTokensTransactorSession) ClaimOwnership() (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.ClaimOwnership(&_CanReclaimTokens.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_CanReclaimTokens *CanReclaimTokensTransactor) Initialize(opts *bind.TransactOpts, _nextOwner common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.contract.Transact(opts, "initialize", _nextOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_CanReclaimTokens *CanReclaimTokensSession) Initialize(_nextOwner common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.Initialize(&_CanReclaimTokens.TransactOpts, _nextOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_CanReclaimTokens *CanReclaimTokensTransactorSession) Initialize(_nextOwner common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.Initialize(&_CanReclaimTokens.TransactOpts, _nextOwner)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_CanReclaimTokens *CanReclaimTokensTransactor) RecoverTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.contract.Transact(opts, "recoverTokens", _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_CanReclaimTokens *CanReclaimTokensSession) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.RecoverTokens(&_CanReclaimTokens.TransactOpts, _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_CanReclaimTokens *CanReclaimTokensTransactorSession) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.RecoverTokens(&_CanReclaimTokens.TransactOpts, _token)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CanReclaimTokens *CanReclaimTokensTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanReclaimTokens.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CanReclaimTokens *CanReclaimTokensSession) RenounceOwnership() (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.RenounceOwnership(&_CanReclaimTokens.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CanReclaimTokens *CanReclaimTokensTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.RenounceOwnership(&_CanReclaimTokens.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CanReclaimTokens *CanReclaimTokensTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CanReclaimTokens *CanReclaimTokensSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.TransferOwnership(&_CanReclaimTokens.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CanReclaimTokens *CanReclaimTokensTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CanReclaimTokens.Contract.TransferOwnership(&_CanReclaimTokens.TransactOpts, newOwner)
}

// CanReclaimTokensOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CanReclaimTokens contract.
type CanReclaimTokensOwnershipTransferredIterator struct {
	Event *CanReclaimTokensOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanReclaimTokensOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanReclaimTokensOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanReclaimTokensOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanReclaimTokensOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanReclaimTokensOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanReclaimTokensOwnershipTransferred represents a OwnershipTransferred event raised by the CanReclaimTokens contract.
type CanReclaimTokensOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CanReclaimTokens *CanReclaimTokensFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CanReclaimTokensOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CanReclaimTokens.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CanReclaimTokensOwnershipTransferredIterator{contract: _CanReclaimTokens.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CanReclaimTokens *CanReclaimTokensFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CanReclaimTokensOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CanReclaimTokens.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanReclaimTokensOwnershipTransferred)
				if err := _CanReclaimTokens.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CanReclaimTokens *CanReclaimTokensFilterer) ParseOwnershipTransferred(log types.Log) (*CanReclaimTokensOwnershipTransferred, error) {
	event := new(CanReclaimTokensOwnershipTransferred)
	if err := _CanReclaimTokens.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ClaimableABI is the input ABI used to generate the binding from.
const ClaimableABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ClaimableBin is the compiled bytecode used for deploying new contracts.
var ClaimableBin = "0x608060405261068d806100136000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638f32d59b1161005b5780638f32d59b146100b8578063c4d66de8146100d4578063e30c3978146100fa578063f2fde38b146101025761007d565b80634e71e0c814610082578063715018a61461008c5780638da5cb5b14610094575b600080fd5b61008a610128565b005b61008a6101a8565b61009c61024b565b604080516001600160a01b039092168252519081900360200190f35b6100c061025a565b604080519115158252519081900360200190f35b61008a600480360360208110156100ea57600080fd5b50356001600160a01b0316610280565b61009c61032c565b61008a6004803603602081101561011857600080fd5b50356001600160a01b031661033b565b6066546001600160a01b031661013c61043e565b6001600160a01b0316146101815760405162461bcd60e51b815260040180806020018281038252602a81526020018061062f602a913960400191505060405180910390fd5b606654610196906001600160a01b0316610442565b606680546001600160a01b0319169055565b6101b061025a565b610201576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6033546000906001600160a01b031661027161043e565b6001600160a01b031614905090565b600054610100900460ff168061029957506102996104e3565b806102a7575060005460ff16155b6102e25760405162461bcd60e51b815260040180806020018281038252602e815260200180610601602e913960400191505060405180910390fd5b600054610100900460ff1615801561030d576000805460ff1961ff0019909116610100171660011790555b610316826104e9565b8015610328576000805461ff00191690555b5050565b6066546001600160a01b031681565b61034361025a565b610394576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61039c61024b565b6001600160a01b0316816001600160a01b0316141580156103cb57506066546001600160a01b03828116911614155b61041c576040805162461bcd60e51b815260206004820152601c60248201527f436c61696d61626c653a20696e76616c6964206e6577206f776e657200000000604482015290519081900360640190fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b0381166104875760405162461bcd60e51b81526004018080602001828103825260268152602001806105db6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b303b1590565b600054610100900460ff168061050257506105026104e3565b80610510575060005460ff16155b61054b5760405162461bcd60e51b815260040180806020018281038252602e815260200180610601602e913960400191505060405180910390fd5b600054610100900460ff16158015610576576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610328576000805461ff0019169055505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564436c61696d61626c653a2063616c6c6572206973206e6f74207468652070656e64696e67206f776e6572a265627a7a72315820e21f09ac635a07dc8e75db989f7e8d53c500f4c4bd7d367a7722b527c401e6de64736f6c63430005100032"

// DeployClaimable deploys a new Ethereum contract, binding an instance of Claimable to it.
func DeployClaimable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Claimable, error) {
	parsed, err := abi.JSON(strings.NewReader(ClaimableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ClaimableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Claimable{ClaimableCaller: ClaimableCaller{contract: contract}, ClaimableTransactor: ClaimableTransactor{contract: contract}, ClaimableFilterer: ClaimableFilterer{contract: contract}}, nil
}

// Claimable is an auto generated Go binding around an Ethereum contract.
type Claimable struct {
	ClaimableCaller     // Read-only binding to the contract
	ClaimableTransactor // Write-only binding to the contract
	ClaimableFilterer   // Log filterer for contract events
}

// ClaimableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ClaimableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClaimableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ClaimableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClaimableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ClaimableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClaimableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ClaimableSession struct {
	Contract     *Claimable        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ClaimableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ClaimableCallerSession struct {
	Contract *ClaimableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ClaimableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ClaimableTransactorSession struct {
	Contract     *ClaimableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ClaimableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ClaimableRaw struct {
	Contract *Claimable // Generic contract binding to access the raw methods on
}

// ClaimableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ClaimableCallerRaw struct {
	Contract *ClaimableCaller // Generic read-only contract binding to access the raw methods on
}

// ClaimableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ClaimableTransactorRaw struct {
	Contract *ClaimableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewClaimable creates a new instance of Claimable, bound to a specific deployed contract.
func NewClaimable(address common.Address, backend bind.ContractBackend) (*Claimable, error) {
	contract, err := bindClaimable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Claimable{ClaimableCaller: ClaimableCaller{contract: contract}, ClaimableTransactor: ClaimableTransactor{contract: contract}, ClaimableFilterer: ClaimableFilterer{contract: contract}}, nil
}

// NewClaimableCaller creates a new read-only instance of Claimable, bound to a specific deployed contract.
func NewClaimableCaller(address common.Address, caller bind.ContractCaller) (*ClaimableCaller, error) {
	contract, err := bindClaimable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ClaimableCaller{contract: contract}, nil
}

// NewClaimableTransactor creates a new write-only instance of Claimable, bound to a specific deployed contract.
func NewClaimableTransactor(address common.Address, transactor bind.ContractTransactor) (*ClaimableTransactor, error) {
	contract, err := bindClaimable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ClaimableTransactor{contract: contract}, nil
}

// NewClaimableFilterer creates a new log filterer instance of Claimable, bound to a specific deployed contract.
func NewClaimableFilterer(address common.Address, filterer bind.ContractFilterer) (*ClaimableFilterer, error) {
	contract, err := bindClaimable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ClaimableFilterer{contract: contract}, nil
}

// bindClaimable binds a generic wrapper to an already deployed contract.
func bindClaimable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ClaimableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Claimable *ClaimableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Claimable.Contract.ClaimableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Claimable *ClaimableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Claimable.Contract.ClaimableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Claimable *ClaimableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Claimable.Contract.ClaimableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Claimable *ClaimableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Claimable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Claimable *ClaimableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Claimable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Claimable *ClaimableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Claimable.Contract.contract.Transact(opts, method, params...)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_Claimable *ClaimableCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Claimable.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_Claimable *ClaimableSession) IsOwner() (bool, error) {
	return _Claimable.Contract.IsOwner(&_Claimable.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_Claimable *ClaimableCallerSession) IsOwner() (bool, error) {
	return _Claimable.Contract.IsOwner(&_Claimable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Claimable *ClaimableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Claimable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Claimable *ClaimableSession) Owner() (common.Address, error) {
	return _Claimable.Contract.Owner(&_Claimable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Claimable *ClaimableCallerSession) Owner() (common.Address, error) {
	return _Claimable.Contract.Owner(&_Claimable.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_Claimable *ClaimableCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Claimable.contract.Call(opts, out, "pendingOwner")
	return *ret0, err
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_Claimable *ClaimableSession) PendingOwner() (common.Address, error) {
	return _Claimable.Contract.PendingOwner(&_Claimable.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_Claimable *ClaimableCallerSession) PendingOwner() (common.Address, error) {
	return _Claimable.Contract.PendingOwner(&_Claimable.CallOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_Claimable *ClaimableTransactor) ClaimOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Claimable.contract.Transact(opts, "claimOwnership")
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_Claimable *ClaimableSession) ClaimOwnership() (*types.Transaction, error) {
	return _Claimable.Contract.ClaimOwnership(&_Claimable.TransactOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_Claimable *ClaimableTransactorSession) ClaimOwnership() (*types.Transaction, error) {
	return _Claimable.Contract.ClaimOwnership(&_Claimable.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_Claimable *ClaimableTransactor) Initialize(opts *bind.TransactOpts, _nextOwner common.Address) (*types.Transaction, error) {
	return _Claimable.contract.Transact(opts, "initialize", _nextOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_Claimable *ClaimableSession) Initialize(_nextOwner common.Address) (*types.Transaction, error) {
	return _Claimable.Contract.Initialize(&_Claimable.TransactOpts, _nextOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_Claimable *ClaimableTransactorSession) Initialize(_nextOwner common.Address) (*types.Transaction, error) {
	return _Claimable.Contract.Initialize(&_Claimable.TransactOpts, _nextOwner)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Claimable *ClaimableTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Claimable.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Claimable *ClaimableSession) RenounceOwnership() (*types.Transaction, error) {
	return _Claimable.Contract.RenounceOwnership(&_Claimable.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Claimable *ClaimableTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Claimable.Contract.RenounceOwnership(&_Claimable.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Claimable *ClaimableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Claimable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Claimable *ClaimableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Claimable.Contract.TransferOwnership(&_Claimable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Claimable *ClaimableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Claimable.Contract.TransferOwnership(&_Claimable.TransactOpts, newOwner)
}

// ClaimableOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Claimable contract.
type ClaimableOwnershipTransferredIterator struct {
	Event *ClaimableOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClaimableOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClaimableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClaimableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClaimableOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClaimableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClaimableOwnershipTransferred represents a OwnershipTransferred event raised by the Claimable contract.
type ClaimableOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Claimable *ClaimableFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ClaimableOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Claimable.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ClaimableOwnershipTransferredIterator{contract: _Claimable.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Claimable *ClaimableFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ClaimableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Claimable.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClaimableOwnershipTransferred)
				if err := _Claimable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Claimable *ClaimableFilterer) ParseOwnershipTransferred(log types.Log) (*ClaimableOwnershipTransferred, error) {
	event := new(ClaimableOwnershipTransferred)
	if err := _Claimable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ClaimerABI is the input ABI used to generate the binding from.
const ClaimerABI = "[{\"inputs\":[{\"internalType\":\"contractClaimable\",\"name\":\"_child\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimStoreOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferStoreOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ClaimerBin is the compiled bytecode used for deploying new contracts.
var ClaimerBin = "0x608060405234801561001057600080fd5b506040516101dc3803806101dc8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610177806100656000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806310731a651461005157806321e6b53d1461005b5780636fd689e814610051578063c2250a991461005b575b600080fd5b610059610081565b005b6100596004803603602081101561007157600080fd5b50356001600160a01b03166100dc565b60008054604080516309ce3c1960e31b815290516001600160a01b0390921692634e71e0c89260048084019382900301818387803b1580156100c257600080fd5b505af11580156100d6573d6000803e3d6000fd5b50505050565b600080546040805163f2fde38b60e01b81526001600160a01b0385811660048301529151919092169263f2fde38b926024808201939182900301818387803b15801561012757600080fd5b505af115801561013b573d6000803e3d6000fd5b505050505056fea265627a7a72315820218a748d910fab09f933d163e09de3f25a183d107839f9d136f7b3b627829e6564736f6c63430005100032"

// DeployClaimer deploys a new Ethereum contract, binding an instance of Claimer to it.
func DeployClaimer(auth *bind.TransactOpts, backend bind.ContractBackend, _child common.Address) (common.Address, *types.Transaction, *Claimer, error) {
	parsed, err := abi.JSON(strings.NewReader(ClaimerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ClaimerBin), backend, _child)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Claimer{ClaimerCaller: ClaimerCaller{contract: contract}, ClaimerTransactor: ClaimerTransactor{contract: contract}, ClaimerFilterer: ClaimerFilterer{contract: contract}}, nil
}

// Claimer is an auto generated Go binding around an Ethereum contract.
type Claimer struct {
	ClaimerCaller     // Read-only binding to the contract
	ClaimerTransactor // Write-only binding to the contract
	ClaimerFilterer   // Log filterer for contract events
}

// ClaimerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ClaimerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClaimerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ClaimerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClaimerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ClaimerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClaimerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ClaimerSession struct {
	Contract     *Claimer          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ClaimerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ClaimerCallerSession struct {
	Contract *ClaimerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ClaimerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ClaimerTransactorSession struct {
	Contract     *ClaimerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ClaimerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ClaimerRaw struct {
	Contract *Claimer // Generic contract binding to access the raw methods on
}

// ClaimerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ClaimerCallerRaw struct {
	Contract *ClaimerCaller // Generic read-only contract binding to access the raw methods on
}

// ClaimerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ClaimerTransactorRaw struct {
	Contract *ClaimerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewClaimer creates a new instance of Claimer, bound to a specific deployed contract.
func NewClaimer(address common.Address, backend bind.ContractBackend) (*Claimer, error) {
	contract, err := bindClaimer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Claimer{ClaimerCaller: ClaimerCaller{contract: contract}, ClaimerTransactor: ClaimerTransactor{contract: contract}, ClaimerFilterer: ClaimerFilterer{contract: contract}}, nil
}

// NewClaimerCaller creates a new read-only instance of Claimer, bound to a specific deployed contract.
func NewClaimerCaller(address common.Address, caller bind.ContractCaller) (*ClaimerCaller, error) {
	contract, err := bindClaimer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ClaimerCaller{contract: contract}, nil
}

// NewClaimerTransactor creates a new write-only instance of Claimer, bound to a specific deployed contract.
func NewClaimerTransactor(address common.Address, transactor bind.ContractTransactor) (*ClaimerTransactor, error) {
	contract, err := bindClaimer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ClaimerTransactor{contract: contract}, nil
}

// NewClaimerFilterer creates a new log filterer instance of Claimer, bound to a specific deployed contract.
func NewClaimerFilterer(address common.Address, filterer bind.ContractFilterer) (*ClaimerFilterer, error) {
	contract, err := bindClaimer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ClaimerFilterer{contract: contract}, nil
}

// bindClaimer binds a generic wrapper to an already deployed contract.
func bindClaimer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ClaimerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Claimer *ClaimerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Claimer.Contract.ClaimerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Claimer *ClaimerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Claimer.Contract.ClaimerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Claimer *ClaimerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Claimer.Contract.ClaimerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Claimer *ClaimerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Claimer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Claimer *ClaimerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Claimer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Claimer *ClaimerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Claimer.Contract.contract.Transact(opts, method, params...)
}

// ClaimStoreOwnership is a paid mutator transaction binding the contract method 0x6fd689e8.
//
// Solidity: function claimStoreOwnership() returns()
func (_Claimer *ClaimerTransactor) ClaimStoreOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Claimer.contract.Transact(opts, "claimStoreOwnership")
}

// ClaimStoreOwnership is a paid mutator transaction binding the contract method 0x6fd689e8.
//
// Solidity: function claimStoreOwnership() returns()
func (_Claimer *ClaimerSession) ClaimStoreOwnership() (*types.Transaction, error) {
	return _Claimer.Contract.ClaimStoreOwnership(&_Claimer.TransactOpts)
}

// ClaimStoreOwnership is a paid mutator transaction binding the contract method 0x6fd689e8.
//
// Solidity: function claimStoreOwnership() returns()
func (_Claimer *ClaimerTransactorSession) ClaimStoreOwnership() (*types.Transaction, error) {
	return _Claimer.Contract.ClaimStoreOwnership(&_Claimer.TransactOpts)
}

// ClaimTokenOwnership is a paid mutator transaction binding the contract method 0x10731a65.
//
// Solidity: function claimTokenOwnership() returns()
func (_Claimer *ClaimerTransactor) ClaimTokenOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Claimer.contract.Transact(opts, "claimTokenOwnership")
}

// ClaimTokenOwnership is a paid mutator transaction binding the contract method 0x10731a65.
//
// Solidity: function claimTokenOwnership() returns()
func (_Claimer *ClaimerSession) ClaimTokenOwnership() (*types.Transaction, error) {
	return _Claimer.Contract.ClaimTokenOwnership(&_Claimer.TransactOpts)
}

// ClaimTokenOwnership is a paid mutator transaction binding the contract method 0x10731a65.
//
// Solidity: function claimTokenOwnership() returns()
func (_Claimer *ClaimerTransactorSession) ClaimTokenOwnership() (*types.Transaction, error) {
	return _Claimer.Contract.ClaimTokenOwnership(&_Claimer.TransactOpts)
}

// TransferStoreOwnership is a paid mutator transaction binding the contract method 0xc2250a99.
//
// Solidity: function transferStoreOwnership(address _newOwner) returns()
func (_Claimer *ClaimerTransactor) TransferStoreOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Claimer.contract.Transact(opts, "transferStoreOwnership", _newOwner)
}

// TransferStoreOwnership is a paid mutator transaction binding the contract method 0xc2250a99.
//
// Solidity: function transferStoreOwnership(address _newOwner) returns()
func (_Claimer *ClaimerSession) TransferStoreOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Claimer.Contract.TransferStoreOwnership(&_Claimer.TransactOpts, _newOwner)
}

// TransferStoreOwnership is a paid mutator transaction binding the contract method 0xc2250a99.
//
// Solidity: function transferStoreOwnership(address _newOwner) returns()
func (_Claimer *ClaimerTransactorSession) TransferStoreOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Claimer.Contract.TransferStoreOwnership(&_Claimer.TransactOpts, _newOwner)
}

// TransferTokenOwnership is a paid mutator transaction binding the contract method 0x21e6b53d.
//
// Solidity: function transferTokenOwnership(address _newOwner) returns()
func (_Claimer *ClaimerTransactor) TransferTokenOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Claimer.contract.Transact(opts, "transferTokenOwnership", _newOwner)
}

// TransferTokenOwnership is a paid mutator transaction binding the contract method 0x21e6b53d.
//
// Solidity: function transferTokenOwnership(address _newOwner) returns()
func (_Claimer *ClaimerSession) TransferTokenOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Claimer.Contract.TransferTokenOwnership(&_Claimer.TransactOpts, _newOwner)
}

// TransferTokenOwnership is a paid mutator transaction binding the contract method 0x21e6b53d.
//
// Solidity: function transferTokenOwnership(address _newOwner) returns()
func (_Claimer *ClaimerTransactorSession) TransferTokenOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Claimer.Contract.TransferTokenOwnership(&_Claimer.TransactOpts, _newOwner)
}

// ContextABI is the input ABI used to generate the binding from.
const ContextABI = "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"

// Context is an auto generated Go binding around an Ethereum contract.
type Context struct {
	ContextCaller     // Read-only binding to the contract
	ContextTransactor // Write-only binding to the contract
	ContextFilterer   // Log filterer for contract events
}

// ContextCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContextCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContextTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContextFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContextSession struct {
	Contract     *Context          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContextCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContextCallerSession struct {
	Contract *ContextCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContextTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContextTransactorSession struct {
	Contract     *ContextTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContextRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContextRaw struct {
	Contract *Context // Generic contract binding to access the raw methods on
}

// ContextCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContextCallerRaw struct {
	Contract *ContextCaller // Generic read-only contract binding to access the raw methods on
}

// ContextTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContextTransactorRaw struct {
	Contract *ContextTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContext creates a new instance of Context, bound to a specific deployed contract.
func NewContext(address common.Address, backend bind.ContractBackend) (*Context, error) {
	contract, err := bindContext(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Context{ContextCaller: ContextCaller{contract: contract}, ContextTransactor: ContextTransactor{contract: contract}, ContextFilterer: ContextFilterer{contract: contract}}, nil
}

// NewContextCaller creates a new read-only instance of Context, bound to a specific deployed contract.
func NewContextCaller(address common.Address, caller bind.ContractCaller) (*ContextCaller, error) {
	contract, err := bindContext(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContextCaller{contract: contract}, nil
}

// NewContextTransactor creates a new write-only instance of Context, bound to a specific deployed contract.
func NewContextTransactor(address common.Address, transactor bind.ContractTransactor) (*ContextTransactor, error) {
	contract, err := bindContext(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContextTransactor{contract: contract}, nil
}

// NewContextFilterer creates a new log filterer instance of Context, bound to a specific deployed contract.
func NewContextFilterer(address common.Address, filterer bind.ContractFilterer) (*ContextFilterer, error) {
	contract, err := bindContext(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContextFilterer{contract: contract}, nil
}

// bindContext binds a generic wrapper to an already deployed contract.
func bindContext(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContextABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Context.Contract.ContextCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Context.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.contract.Transact(opts, method, params...)
}

// ECDSAABI is the input ABI used to generate the binding from.
const ECDSAABI = "[]"

// ECDSABin is the compiled bytecode used for deploying new contracts.
var ECDSABin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158204ce0edc71c392bd1f4e133798323e72264d88ee406719d8eb37ae7604df5c3a764736f6c63430005100032"

// DeployECDSA deploys a new Ethereum contract, binding an instance of ECDSA to it.
func DeployECDSA(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ECDSA, error) {
	parsed, err := abi.JSON(strings.NewReader(ECDSAABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ECDSABin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ECDSA{ECDSACaller: ECDSACaller{contract: contract}, ECDSATransactor: ECDSATransactor{contract: contract}, ECDSAFilterer: ECDSAFilterer{contract: contract}}, nil
}

// ECDSA is an auto generated Go binding around an Ethereum contract.
type ECDSA struct {
	ECDSACaller     // Read-only binding to the contract
	ECDSATransactor // Write-only binding to the contract
	ECDSAFilterer   // Log filterer for contract events
}

// ECDSACaller is an auto generated read-only Go binding around an Ethereum contract.
type ECDSACaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ECDSATransactor is an auto generated write-only Go binding around an Ethereum contract.
type ECDSATransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ECDSAFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ECDSAFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ECDSASession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ECDSASession struct {
	Contract     *ECDSA            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ECDSACallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ECDSACallerSession struct {
	Contract *ECDSACaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ECDSATransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ECDSATransactorSession struct {
	Contract     *ECDSATransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ECDSARaw is an auto generated low-level Go binding around an Ethereum contract.
type ECDSARaw struct {
	Contract *ECDSA // Generic contract binding to access the raw methods on
}

// ECDSACallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ECDSACallerRaw struct {
	Contract *ECDSACaller // Generic read-only contract binding to access the raw methods on
}

// ECDSATransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ECDSATransactorRaw struct {
	Contract *ECDSATransactor // Generic write-only contract binding to access the raw methods on
}

// NewECDSA creates a new instance of ECDSA, bound to a specific deployed contract.
func NewECDSA(address common.Address, backend bind.ContractBackend) (*ECDSA, error) {
	contract, err := bindECDSA(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ECDSA{ECDSACaller: ECDSACaller{contract: contract}, ECDSATransactor: ECDSATransactor{contract: contract}, ECDSAFilterer: ECDSAFilterer{contract: contract}}, nil
}

// NewECDSACaller creates a new read-only instance of ECDSA, bound to a specific deployed contract.
func NewECDSACaller(address common.Address, caller bind.ContractCaller) (*ECDSACaller, error) {
	contract, err := bindECDSA(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ECDSACaller{contract: contract}, nil
}

// NewECDSATransactor creates a new write-only instance of ECDSA, bound to a specific deployed contract.
func NewECDSATransactor(address common.Address, transactor bind.ContractTransactor) (*ECDSATransactor, error) {
	contract, err := bindECDSA(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ECDSATransactor{contract: contract}, nil
}

// NewECDSAFilterer creates a new log filterer instance of ECDSA, bound to a specific deployed contract.
func NewECDSAFilterer(address common.Address, filterer bind.ContractFilterer) (*ECDSAFilterer, error) {
	contract, err := bindECDSA(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ECDSAFilterer{contract: contract}, nil
}

// bindECDSA binds a generic wrapper to an already deployed contract.
func bindECDSA(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ECDSAABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ECDSA *ECDSARaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ECDSA.Contract.ECDSACaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ECDSA *ECDSARaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ECDSA.Contract.ECDSATransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ECDSA *ECDSARaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ECDSA.Contract.ECDSATransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ECDSA *ECDSACallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ECDSA.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ECDSA *ECDSATransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ECDSA.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ECDSA *ECDSATransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ECDSA.Contract.contract.Transact(opts, method, params...)
}

// ERC20ABI is the input ABI used to generate the binding from.
const ERC20ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ERC20Bin is the compiled bytecode used for deploying new contracts.
var ERC20Bin = "0x608060405261083d806100136000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a0823114610149578063a457c2d71461016f578063a9059cbb1461019b578063dd62ed3e146101c757610088565b8063095ea7b31461008d57806318160ddd146100cd57806323b872dd146100e7578063395093511461011d575b600080fd5b6100b9600480360360408110156100a357600080fd5b506001600160a01b0381351690602001356101f5565b604080519115158252519081900360200190f35b6100d5610212565b60408051918252519081900360200190f35b6100b9600480360360608110156100fd57600080fd5b506001600160a01b03813581169160208101359091169060400135610218565b6100b96004803603604081101561013357600080fd5b506001600160a01b0381351690602001356102a5565b6100d56004803603602081101561015f57600080fd5b50356001600160a01b03166102f9565b6100b96004803603604081101561018557600080fd5b506001600160a01b038135169060200135610314565b6100b9600480360360408110156101b157600080fd5b506001600160a01b038135169060200135610382565b6100d5600480360360408110156101dd57600080fd5b506001600160a01b0381358116916020013516610396565b60006102096102026103c1565b84846103c5565b50600192915050565b60355490565b60006102258484846104b1565b61029b846102316103c1565b61029685604051806060016040528060288152602001610773602891396001600160a01b038a1660009081526034602052604081209061026f6103c1565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61060f16565b6103c5565b5060019392505050565b60006102096102b26103c1565b8461029685603460006102c36103c1565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff6106a616565b6001600160a01b031660009081526033602052604090205490565b60006102096103216103c1565b84610296856040518060600160405280602581526020016107e4602591396034600061034b6103c1565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61060f16565b600061020961038f6103c1565b84846104b1565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661040a5760405162461bcd60e51b81526004018080602001828103825260248152602001806107c06024913960400191505060405180910390fd5b6001600160a01b03821661044f5760405162461bcd60e51b815260040180806020018281038252602281526020018061072b6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260346020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166104f65760405162461bcd60e51b815260040180806020018281038252602581526020018061079b6025913960400191505060405180910390fd5b6001600160a01b03821661053b5760405162461bcd60e51b81526004018080602001828103825260238152602001806107086023913960400191505060405180910390fd5b61057e8160405180606001604052806026815260200161074d602691396001600160a01b038616600090815260336020526040902054919063ffffffff61060f16565b6001600160a01b0380851660009081526033602052604080822093909355908416815220546105b3908263ffffffff6106a616565b6001600160a01b0380841660008181526033602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561069e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561066357818101518382015260200161064b565b50505050905090810190601f1680156106905780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610700576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a723158202d1ffc338d27dba80939cb69ec0c7fb25f6a70199eec4d1e7ff370a35c54b42d64736f6c63430005100032"

// DeployERC20 deploys a new Ethereum contract, binding an instance of ERC20 to it.
func DeployERC20(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC20Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// ERC20 is an auto generated Go binding around an Ethereum contract.
type ERC20 struct {
	ERC20Caller     // Read-only binding to the contract
	ERC20Transactor // Write-only binding to the contract
	ERC20Filterer   // Log filterer for contract events
}

// ERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20Session struct {
	Contract     *ERC20            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20CallerSession struct {
	Contract *ERC20Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TransactorSession struct {
	Contract     *ERC20Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20Raw struct {
	Contract *ERC20 // Generic contract binding to access the raw methods on
}

// ERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20CallerRaw struct {
	Contract *ERC20Caller // Generic read-only contract binding to access the raw methods on
}

// ERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TransactorRaw struct {
	Contract *ERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20 creates a new instance of ERC20, bound to a specific deployed contract.
func NewERC20(address common.Address, backend bind.ContractBackend) (*ERC20, error) {
	contract, err := bindERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// NewERC20Caller creates a new read-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Caller(address common.Address, caller bind.ContractCaller) (*ERC20Caller, error) {
	contract, err := bindERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Caller{contract: contract}, nil
}

// NewERC20Transactor creates a new write-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC20Transactor, error) {
	contract, err := bindERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Transactor{contract: contract}, nil
}

// NewERC20Filterer creates a new log filterer instance of ERC20, bound to a specific deployed contract.
func NewERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC20Filterer, error) {
	contract, err := bindERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20Filterer{contract: contract}, nil
}

// bindERC20 binds a generic wrapper to an already deployed contract.
func bindERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.ERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Session) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, sender, recipient, amount)
}

// ERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20 contract.
type ERC20ApprovalIterator struct {
	Event *ERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Approval represents a Approval event raised by the ERC20 contract.
type ERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20ApprovalIterator{contract: _ERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Approval)
				if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) ParseApproval(log types.Log) (*ERC20Approval, error) {
	event := new(ERC20Approval)
	if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20 contract.
type ERC20TransferIterator struct {
	Event *ERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Transfer represents a Transfer event raised by the ERC20 contract.
type ERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TransferIterator{contract: _ERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Transfer)
				if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) ParseTransfer(log types.Log) (*ERC20Transfer, error) {
	event := new(ERC20Transfer)
	if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20DetailedABI is the input ABI used to generate the binding from.
const ERC20DetailedABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ERC20Detailed is an auto generated Go binding around an Ethereum contract.
type ERC20Detailed struct {
	ERC20DetailedCaller     // Read-only binding to the contract
	ERC20DetailedTransactor // Write-only binding to the contract
	ERC20DetailedFilterer   // Log filterer for contract events
}

// ERC20DetailedCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20DetailedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20DetailedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20DetailedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20DetailedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20DetailedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20DetailedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20DetailedSession struct {
	Contract     *ERC20Detailed    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20DetailedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20DetailedCallerSession struct {
	Contract *ERC20DetailedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ERC20DetailedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20DetailedTransactorSession struct {
	Contract     *ERC20DetailedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ERC20DetailedRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20DetailedRaw struct {
	Contract *ERC20Detailed // Generic contract binding to access the raw methods on
}

// ERC20DetailedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20DetailedCallerRaw struct {
	Contract *ERC20DetailedCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20DetailedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20DetailedTransactorRaw struct {
	Contract *ERC20DetailedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20Detailed creates a new instance of ERC20Detailed, bound to a specific deployed contract.
func NewERC20Detailed(address common.Address, backend bind.ContractBackend) (*ERC20Detailed, error) {
	contract, err := bindERC20Detailed(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20Detailed{ERC20DetailedCaller: ERC20DetailedCaller{contract: contract}, ERC20DetailedTransactor: ERC20DetailedTransactor{contract: contract}, ERC20DetailedFilterer: ERC20DetailedFilterer{contract: contract}}, nil
}

// NewERC20DetailedCaller creates a new read-only instance of ERC20Detailed, bound to a specific deployed contract.
func NewERC20DetailedCaller(address common.Address, caller bind.ContractCaller) (*ERC20DetailedCaller, error) {
	contract, err := bindERC20Detailed(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20DetailedCaller{contract: contract}, nil
}

// NewERC20DetailedTransactor creates a new write-only instance of ERC20Detailed, bound to a specific deployed contract.
func NewERC20DetailedTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20DetailedTransactor, error) {
	contract, err := bindERC20Detailed(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20DetailedTransactor{contract: contract}, nil
}

// NewERC20DetailedFilterer creates a new log filterer instance of ERC20Detailed, bound to a specific deployed contract.
func NewERC20DetailedFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20DetailedFilterer, error) {
	contract, err := bindERC20Detailed(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20DetailedFilterer{contract: contract}, nil
}

// bindERC20Detailed binds a generic wrapper to an already deployed contract.
func bindERC20Detailed(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20DetailedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Detailed *ERC20DetailedRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20Detailed.Contract.ERC20DetailedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Detailed *ERC20DetailedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.ERC20DetailedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Detailed *ERC20DetailedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.ERC20DetailedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Detailed *ERC20DetailedCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20Detailed.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Detailed *ERC20DetailedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Detailed *ERC20DetailedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Detailed *ERC20DetailedCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20Detailed.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Detailed *ERC20DetailedSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Detailed.Contract.Allowance(&_ERC20Detailed.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Detailed *ERC20DetailedCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Detailed.Contract.Allowance(&_ERC20Detailed.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Detailed *ERC20DetailedCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20Detailed.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Detailed *ERC20DetailedSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Detailed.Contract.BalanceOf(&_ERC20Detailed.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Detailed *ERC20DetailedCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Detailed.Contract.BalanceOf(&_ERC20Detailed.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Detailed *ERC20DetailedCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ERC20Detailed.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Detailed *ERC20DetailedSession) Decimals() (uint8, error) {
	return _ERC20Detailed.Contract.Decimals(&_ERC20Detailed.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Detailed *ERC20DetailedCallerSession) Decimals() (uint8, error) {
	return _ERC20Detailed.Contract.Decimals(&_ERC20Detailed.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Detailed *ERC20DetailedCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ERC20Detailed.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Detailed *ERC20DetailedSession) Name() (string, error) {
	return _ERC20Detailed.Contract.Name(&_ERC20Detailed.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Detailed *ERC20DetailedCallerSession) Name() (string, error) {
	return _ERC20Detailed.Contract.Name(&_ERC20Detailed.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Detailed *ERC20DetailedCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ERC20Detailed.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Detailed *ERC20DetailedSession) Symbol() (string, error) {
	return _ERC20Detailed.Contract.Symbol(&_ERC20Detailed.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Detailed *ERC20DetailedCallerSession) Symbol() (string, error) {
	return _ERC20Detailed.Contract.Symbol(&_ERC20Detailed.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Detailed *ERC20DetailedCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20Detailed.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Detailed *ERC20DetailedSession) TotalSupply() (*big.Int, error) {
	return _ERC20Detailed.Contract.TotalSupply(&_ERC20Detailed.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Detailed *ERC20DetailedCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20Detailed.Contract.TotalSupply(&_ERC20Detailed.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Detailed *ERC20DetailedTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Detailed.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Detailed *ERC20DetailedSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.Approve(&_ERC20Detailed.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Detailed *ERC20DetailedTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.Approve(&_ERC20Detailed.TransactOpts, spender, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_ERC20Detailed *ERC20DetailedTransactor) Initialize(opts *bind.TransactOpts, name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _ERC20Detailed.contract.Transact(opts, "initialize", name, symbol, decimals)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_ERC20Detailed *ERC20DetailedSession) Initialize(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.Initialize(&_ERC20Detailed.TransactOpts, name, symbol, decimals)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_ERC20Detailed *ERC20DetailedTransactorSession) Initialize(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.Initialize(&_ERC20Detailed.TransactOpts, name, symbol, decimals)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20Detailed *ERC20DetailedTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Detailed.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20Detailed *ERC20DetailedSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.Transfer(&_ERC20Detailed.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20Detailed *ERC20DetailedTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.Transfer(&_ERC20Detailed.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20Detailed *ERC20DetailedTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Detailed.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20Detailed *ERC20DetailedSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.TransferFrom(&_ERC20Detailed.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20Detailed *ERC20DetailedTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Detailed.Contract.TransferFrom(&_ERC20Detailed.TransactOpts, sender, recipient, amount)
}

// ERC20DetailedApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20Detailed contract.
type ERC20DetailedApprovalIterator struct {
	Event *ERC20DetailedApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20DetailedApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20DetailedApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20DetailedApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20DetailedApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20DetailedApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20DetailedApproval represents a Approval event raised by the ERC20Detailed contract.
type ERC20DetailedApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Detailed *ERC20DetailedFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20DetailedApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Detailed.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20DetailedApprovalIterator{contract: _ERC20Detailed.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Detailed *ERC20DetailedFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20DetailedApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Detailed.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20DetailedApproval)
				if err := _ERC20Detailed.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Detailed *ERC20DetailedFilterer) ParseApproval(log types.Log) (*ERC20DetailedApproval, error) {
	event := new(ERC20DetailedApproval)
	if err := _ERC20Detailed.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20DetailedTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20Detailed contract.
type ERC20DetailedTransferIterator struct {
	Event *ERC20DetailedTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20DetailedTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20DetailedTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20DetailedTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20DetailedTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20DetailedTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20DetailedTransfer represents a Transfer event raised by the ERC20Detailed contract.
type ERC20DetailedTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Detailed *ERC20DetailedFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20DetailedTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Detailed.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20DetailedTransferIterator{contract: _ERC20Detailed.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Detailed *ERC20DetailedFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20DetailedTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Detailed.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20DetailedTransfer)
				if err := _ERC20Detailed.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Detailed *ERC20DetailedFilterer) ParseTransfer(log types.Log) (*ERC20DetailedTransfer, error) {
	event := new(ERC20DetailedTransfer)
	if err := _ERC20Detailed.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20MintableABI is the input ABI used to generate the binding from.
const ERC20MintableABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ERC20MintableBin is the compiled bytecode used for deploying new contracts.
var ERC20MintableBin = "0x6080604052610ec7806100136000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063983b2d561161008c578063a9059cbb11610066578063a9059cbb1461023e578063aa271e1a1461026a578063c4d66de814610290578063dd62ed3e146102b6576100cf565b8063983b2d56146101e2578063986502751461020a578063a457c2d714610212576100cf565b8063095ea7b3146100d457806318160ddd1461011457806323b872dd1461012e578063395093511461016457806340c10f191461019057806370a08231146101bc575b600080fd5b610100600480360360408110156100ea57600080fd5b506001600160a01b0381351690602001356102e4565b604080519115158252519081900360200190f35b61011c610301565b60408051918252519081900360200190f35b6101006004803603606081101561014457600080fd5b506001600160a01b03813581169160208101359091169060400135610307565b6101006004803603604081101561017a57600080fd5b506001600160a01b038135169060200135610394565b610100600480360360408110156101a657600080fd5b506001600160a01b0381351690602001356103e8565b61011c600480360360208110156101d257600080fd5b50356001600160a01b031661043f565b610208600480360360208110156101f857600080fd5b50356001600160a01b031661045a565b005b6102086104ac565b6101006004803603604081101561022857600080fd5b506001600160a01b0381351690602001356104be565b6101006004803603604081101561025457600080fd5b506001600160a01b03813516906020013561052c565b6101006004803603602081101561028057600080fd5b50356001600160a01b0316610540565b610208600480360360208110156102a657600080fd5b50356001600160a01b0316610559565b61011c600480360360408110156102cc57600080fd5b506001600160a01b0381358116916020013516610605565b60006102f86102f1610630565b8484610634565b50600192915050565b60355490565b6000610314848484610720565b61038a84610320610630565b61038585604051806060016040528060288152602001610dad602891396001600160a01b038a1660009081526034602052604081209061035e610630565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61087e16565b610634565b5060019392505050565b60006102f86103a1610630565b8461038585603460006103b2610630565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61091516565b60006103fa6103f5610630565b610540565b6104355760405162461bcd60e51b8152600401808060200182810382526030815260200180610d5c6030913960400191505060405180910390fd5b6102f88383610976565b6001600160a01b031660009081526033602052604090205490565b6104656103f5610630565b6104a05760405162461bcd60e51b8152600401808060200182810382526030815260200180610d5c6030913960400191505060405180910390fd5b6104a981610a68565b50565b6104bc6104b7610630565b610ab0565b565b60006102f86104cb610630565b8461038585604051806060016040528060258152602001610e6e60259139603460006104f5610630565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61087e16565b60006102f8610539610630565b8484610720565b600061055360688363ffffffff610af816565b92915050565b600054610100900460ff16806105725750610572610b5f565b80610580575060005460ff16155b6105bb5760405162461bcd60e51b815260040180806020018281038252602e815260200180610df7602e913960400191505060405180910390fd5b600054610100900460ff161580156105e6576000805460ff1961ff0019909116610100171660011790555b6105ef82610b65565b8015610601576000805461ff00191690555b5050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166106795760405162461bcd60e51b8152600401808060200182810382526024815260200180610e4a6024913960400191505060405180910390fd5b6001600160a01b0382166106be5760405162461bcd60e51b8152600401808060200182810382526022815260200180610d146022913960400191505060405180910390fd5b6001600160a01b03808416600081815260346020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166107655760405162461bcd60e51b8152600401808060200182810382526025815260200180610e256025913960400191505060405180910390fd5b6001600160a01b0382166107aa5760405162461bcd60e51b8152600401808060200182810382526023815260200180610cf16023913960400191505060405180910390fd5b6107ed81604051806060016040528060268152602001610d36602691396001600160a01b038616600090815260336020526040902054919063ffffffff61087e16565b6001600160a01b038085166000908152603360205260408082209390935590841681522054610822908263ffffffff61091516565b6001600160a01b0380841660008181526033602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561090d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108d25781810151838201526020016108ba565b50505050905090810190601f1680156108ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561096f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0382166109d1576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6035546109e4908263ffffffff61091516565b6035556001600160a01b038216600090815260336020526040902054610a10908263ffffffff61091516565b6001600160a01b03831660008181526033602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610a7960688263ffffffff610c0816565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610ac160688263ffffffff610c8916565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60006001600160a01b038216610b3f5760405162461bcd60e51b8152600401808060200182810382526022815260200180610dd56022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b303b1590565b600054610100900460ff1680610b7e5750610b7e610b5f565b80610b8c575060005460ff16155b610bc75760405162461bcd60e51b815260040180806020018281038252602e815260200180610df7602e913960400191505060405180910390fd5b600054610100900460ff16158015610bf2576000805460ff1961ff0019909116610100171660011790555b610bfb82610540565b6105ef576105ef82610a68565b610c128282610af8565b15610c64576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b610c938282610af8565b610cce5760405162461bcd60e51b8152600401808060200182810382526021815260200180610d8c6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff1916905556fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a72315820721f2f01ed2e61c8a7c55df95ded652eafe394caff473a22b36dc7e4759e165b64736f6c63430005100032"

// DeployERC20Mintable deploys a new Ethereum contract, binding an instance of ERC20Mintable to it.
func DeployERC20Mintable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20Mintable, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20MintableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC20MintableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20Mintable{ERC20MintableCaller: ERC20MintableCaller{contract: contract}, ERC20MintableTransactor: ERC20MintableTransactor{contract: contract}, ERC20MintableFilterer: ERC20MintableFilterer{contract: contract}}, nil
}

// ERC20Mintable is an auto generated Go binding around an Ethereum contract.
type ERC20Mintable struct {
	ERC20MintableCaller     // Read-only binding to the contract
	ERC20MintableTransactor // Write-only binding to the contract
	ERC20MintableFilterer   // Log filterer for contract events
}

// ERC20MintableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20MintableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20MintableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20MintableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20MintableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20MintableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20MintableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20MintableSession struct {
	Contract     *ERC20Mintable    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20MintableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20MintableCallerSession struct {
	Contract *ERC20MintableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ERC20MintableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20MintableTransactorSession struct {
	Contract     *ERC20MintableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ERC20MintableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20MintableRaw struct {
	Contract *ERC20Mintable // Generic contract binding to access the raw methods on
}

// ERC20MintableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20MintableCallerRaw struct {
	Contract *ERC20MintableCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20MintableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20MintableTransactorRaw struct {
	Contract *ERC20MintableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20Mintable creates a new instance of ERC20Mintable, bound to a specific deployed contract.
func NewERC20Mintable(address common.Address, backend bind.ContractBackend) (*ERC20Mintable, error) {
	contract, err := bindERC20Mintable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20Mintable{ERC20MintableCaller: ERC20MintableCaller{contract: contract}, ERC20MintableTransactor: ERC20MintableTransactor{contract: contract}, ERC20MintableFilterer: ERC20MintableFilterer{contract: contract}}, nil
}

// NewERC20MintableCaller creates a new read-only instance of ERC20Mintable, bound to a specific deployed contract.
func NewERC20MintableCaller(address common.Address, caller bind.ContractCaller) (*ERC20MintableCaller, error) {
	contract, err := bindERC20Mintable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20MintableCaller{contract: contract}, nil
}

// NewERC20MintableTransactor creates a new write-only instance of ERC20Mintable, bound to a specific deployed contract.
func NewERC20MintableTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20MintableTransactor, error) {
	contract, err := bindERC20Mintable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20MintableTransactor{contract: contract}, nil
}

// NewERC20MintableFilterer creates a new log filterer instance of ERC20Mintable, bound to a specific deployed contract.
func NewERC20MintableFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20MintableFilterer, error) {
	contract, err := bindERC20Mintable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20MintableFilterer{contract: contract}, nil
}

// bindERC20Mintable binds a generic wrapper to an already deployed contract.
func bindERC20Mintable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20MintableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Mintable *ERC20MintableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20Mintable.Contract.ERC20MintableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Mintable *ERC20MintableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.ERC20MintableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Mintable *ERC20MintableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.ERC20MintableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Mintable *ERC20MintableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20Mintable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Mintable *ERC20MintableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Mintable *ERC20MintableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Mintable *ERC20MintableCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20Mintable.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Mintable *ERC20MintableSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Mintable.Contract.Allowance(&_ERC20Mintable.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Mintable *ERC20MintableCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Mintable.Contract.Allowance(&_ERC20Mintable.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Mintable *ERC20MintableCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20Mintable.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Mintable *ERC20MintableSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Mintable.Contract.BalanceOf(&_ERC20Mintable.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Mintable *ERC20MintableCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Mintable.Contract.BalanceOf(&_ERC20Mintable.CallOpts, account)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_ERC20Mintable *ERC20MintableCaller) IsMinter(opts *bind.CallOpts, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ERC20Mintable.contract.Call(opts, out, "isMinter", account)
	return *ret0, err
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_ERC20Mintable *ERC20MintableSession) IsMinter(account common.Address) (bool, error) {
	return _ERC20Mintable.Contract.IsMinter(&_ERC20Mintable.CallOpts, account)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_ERC20Mintable *ERC20MintableCallerSession) IsMinter(account common.Address) (bool, error) {
	return _ERC20Mintable.Contract.IsMinter(&_ERC20Mintable.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Mintable *ERC20MintableCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20Mintable.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Mintable *ERC20MintableSession) TotalSupply() (*big.Int, error) {
	return _ERC20Mintable.Contract.TotalSupply(&_ERC20Mintable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Mintable *ERC20MintableCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20Mintable.Contract.TotalSupply(&_ERC20Mintable.CallOpts)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_ERC20Mintable *ERC20MintableTransactor) AddMinter(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ERC20Mintable.contract.Transact(opts, "addMinter", account)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_ERC20Mintable *ERC20MintableSession) AddMinter(account common.Address) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.AddMinter(&_ERC20Mintable.TransactOpts, account)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_ERC20Mintable *ERC20MintableTransactorSession) AddMinter(account common.Address) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.AddMinter(&_ERC20Mintable.TransactOpts, account)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.Approve(&_ERC20Mintable.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.Approve(&_ERC20Mintable.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Mintable *ERC20MintableSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.DecreaseAllowance(&_ERC20Mintable.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.DecreaseAllowance(&_ERC20Mintable.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Mintable *ERC20MintableSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.IncreaseAllowance(&_ERC20Mintable.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.IncreaseAllowance(&_ERC20Mintable.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_ERC20Mintable *ERC20MintableTransactor) Initialize(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _ERC20Mintable.contract.Transact(opts, "initialize", sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_ERC20Mintable *ERC20MintableSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.Initialize(&_ERC20Mintable.TransactOpts, sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_ERC20Mintable *ERC20MintableTransactorSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.Initialize(&_ERC20Mintable.TransactOpts, sender)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactor) Mint(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.contract.Transact(opts, "mint", account, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableSession) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.Mint(&_ERC20Mintable.TransactOpts, account, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactorSession) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.Mint(&_ERC20Mintable.TransactOpts, account, amount)
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_ERC20Mintable *ERC20MintableTransactor) RenounceMinter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Mintable.contract.Transact(opts, "renounceMinter")
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_ERC20Mintable *ERC20MintableSession) RenounceMinter() (*types.Transaction, error) {
	return _ERC20Mintable.Contract.RenounceMinter(&_ERC20Mintable.TransactOpts)
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_ERC20Mintable *ERC20MintableTransactorSession) RenounceMinter() (*types.Transaction, error) {
	return _ERC20Mintable.Contract.RenounceMinter(&_ERC20Mintable.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.Transfer(&_ERC20Mintable.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.Transfer(&_ERC20Mintable.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.TransferFrom(&_ERC20Mintable.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20Mintable *ERC20MintableTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Mintable.Contract.TransferFrom(&_ERC20Mintable.TransactOpts, sender, recipient, amount)
}

// ERC20MintableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20Mintable contract.
type ERC20MintableApprovalIterator struct {
	Event *ERC20MintableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20MintableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20MintableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20MintableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20MintableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20MintableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20MintableApproval represents a Approval event raised by the ERC20Mintable contract.
type ERC20MintableApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Mintable *ERC20MintableFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20MintableApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Mintable.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20MintableApprovalIterator{contract: _ERC20Mintable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Mintable *ERC20MintableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20MintableApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Mintable.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20MintableApproval)
				if err := _ERC20Mintable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Mintable *ERC20MintableFilterer) ParseApproval(log types.Log) (*ERC20MintableApproval, error) {
	event := new(ERC20MintableApproval)
	if err := _ERC20Mintable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20MintableMinterAddedIterator is returned from FilterMinterAdded and is used to iterate over the raw logs and unpacked data for MinterAdded events raised by the ERC20Mintable contract.
type ERC20MintableMinterAddedIterator struct {
	Event *ERC20MintableMinterAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20MintableMinterAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20MintableMinterAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20MintableMinterAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20MintableMinterAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20MintableMinterAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20MintableMinterAdded represents a MinterAdded event raised by the ERC20Mintable contract.
type ERC20MintableMinterAdded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinterAdded is a free log retrieval operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_ERC20Mintable *ERC20MintableFilterer) FilterMinterAdded(opts *bind.FilterOpts, account []common.Address) (*ERC20MintableMinterAddedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ERC20Mintable.contract.FilterLogs(opts, "MinterAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return &ERC20MintableMinterAddedIterator{contract: _ERC20Mintable.contract, event: "MinterAdded", logs: logs, sub: sub}, nil
}

// WatchMinterAdded is a free log subscription operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_ERC20Mintable *ERC20MintableFilterer) WatchMinterAdded(opts *bind.WatchOpts, sink chan<- *ERC20MintableMinterAdded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ERC20Mintable.contract.WatchLogs(opts, "MinterAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20MintableMinterAdded)
				if err := _ERC20Mintable.contract.UnpackLog(event, "MinterAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterAdded is a log parse operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_ERC20Mintable *ERC20MintableFilterer) ParseMinterAdded(log types.Log) (*ERC20MintableMinterAdded, error) {
	event := new(ERC20MintableMinterAdded)
	if err := _ERC20Mintable.contract.UnpackLog(event, "MinterAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20MintableMinterRemovedIterator is returned from FilterMinterRemoved and is used to iterate over the raw logs and unpacked data for MinterRemoved events raised by the ERC20Mintable contract.
type ERC20MintableMinterRemovedIterator struct {
	Event *ERC20MintableMinterRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20MintableMinterRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20MintableMinterRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20MintableMinterRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20MintableMinterRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20MintableMinterRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20MintableMinterRemoved represents a MinterRemoved event raised by the ERC20Mintable contract.
type ERC20MintableMinterRemoved struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinterRemoved is a free log retrieval operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_ERC20Mintable *ERC20MintableFilterer) FilterMinterRemoved(opts *bind.FilterOpts, account []common.Address) (*ERC20MintableMinterRemovedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ERC20Mintable.contract.FilterLogs(opts, "MinterRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return &ERC20MintableMinterRemovedIterator{contract: _ERC20Mintable.contract, event: "MinterRemoved", logs: logs, sub: sub}, nil
}

// WatchMinterRemoved is a free log subscription operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_ERC20Mintable *ERC20MintableFilterer) WatchMinterRemoved(opts *bind.WatchOpts, sink chan<- *ERC20MintableMinterRemoved, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ERC20Mintable.contract.WatchLogs(opts, "MinterRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20MintableMinterRemoved)
				if err := _ERC20Mintable.contract.UnpackLog(event, "MinterRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterRemoved is a log parse operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_ERC20Mintable *ERC20MintableFilterer) ParseMinterRemoved(log types.Log) (*ERC20MintableMinterRemoved, error) {
	event := new(ERC20MintableMinterRemoved)
	if err := _ERC20Mintable.contract.UnpackLog(event, "MinterRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20MintableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20Mintable contract.
type ERC20MintableTransferIterator struct {
	Event *ERC20MintableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20MintableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20MintableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20MintableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20MintableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20MintableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20MintableTransfer represents a Transfer event raised by the ERC20Mintable contract.
type ERC20MintableTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Mintable *ERC20MintableFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20MintableTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Mintable.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20MintableTransferIterator{contract: _ERC20Mintable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Mintable *ERC20MintableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20MintableTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Mintable.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20MintableTransfer)
				if err := _ERC20Mintable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Mintable *ERC20MintableFilterer) ParseTransfer(log types.Log) (*ERC20MintableTransfer, error) {
	event := new(ERC20MintableTransfer)
	if err := _ERC20Mintable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20PausableABI is the input ABI used to generate the binding from.
const ERC20PausableABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ERC20PausableBin is the compiled bytecode used for deploying new contracts.
var ERC20PausableBin = ""

// DeployERC20Pausable deploys a new Ethereum contract, binding an instance of ERC20Pausable to it.
func DeployERC20Pausable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20Pausable, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20PausableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC20PausableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20Pausable{ERC20PausableCaller: ERC20PausableCaller{contract: contract}, ERC20PausableTransactor: ERC20PausableTransactor{contract: contract}, ERC20PausableFilterer: ERC20PausableFilterer{contract: contract}}, nil
}

// ERC20Pausable is an auto generated Go binding around an Ethereum contract.
type ERC20Pausable struct {
	ERC20PausableCaller     // Read-only binding to the contract
	ERC20PausableTransactor // Write-only binding to the contract
	ERC20PausableFilterer   // Log filterer for contract events
}

// ERC20PausableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20PausableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20PausableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20PausableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20PausableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20PausableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20PausableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20PausableSession struct {
	Contract     *ERC20Pausable    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20PausableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20PausableCallerSession struct {
	Contract *ERC20PausableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ERC20PausableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20PausableTransactorSession struct {
	Contract     *ERC20PausableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ERC20PausableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20PausableRaw struct {
	Contract *ERC20Pausable // Generic contract binding to access the raw methods on
}

// ERC20PausableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20PausableCallerRaw struct {
	Contract *ERC20PausableCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20PausableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20PausableTransactorRaw struct {
	Contract *ERC20PausableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20Pausable creates a new instance of ERC20Pausable, bound to a specific deployed contract.
func NewERC20Pausable(address common.Address, backend bind.ContractBackend) (*ERC20Pausable, error) {
	contract, err := bindERC20Pausable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20Pausable{ERC20PausableCaller: ERC20PausableCaller{contract: contract}, ERC20PausableTransactor: ERC20PausableTransactor{contract: contract}, ERC20PausableFilterer: ERC20PausableFilterer{contract: contract}}, nil
}

// NewERC20PausableCaller creates a new read-only instance of ERC20Pausable, bound to a specific deployed contract.
func NewERC20PausableCaller(address common.Address, caller bind.ContractCaller) (*ERC20PausableCaller, error) {
	contract, err := bindERC20Pausable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20PausableCaller{contract: contract}, nil
}

// NewERC20PausableTransactor creates a new write-only instance of ERC20Pausable, bound to a specific deployed contract.
func NewERC20PausableTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20PausableTransactor, error) {
	contract, err := bindERC20Pausable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20PausableTransactor{contract: contract}, nil
}

// NewERC20PausableFilterer creates a new log filterer instance of ERC20Pausable, bound to a specific deployed contract.
func NewERC20PausableFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20PausableFilterer, error) {
	contract, err := bindERC20Pausable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20PausableFilterer{contract: contract}, nil
}

// bindERC20Pausable binds a generic wrapper to an already deployed contract.
func bindERC20Pausable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20PausableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Pausable *ERC20PausableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20Pausable.Contract.ERC20PausableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Pausable *ERC20PausableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.ERC20PausableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Pausable *ERC20PausableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.ERC20PausableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Pausable *ERC20PausableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20Pausable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Pausable *ERC20PausableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Pausable *ERC20PausableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Pausable *ERC20PausableCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20Pausable.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Pausable *ERC20PausableSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Pausable.Contract.Allowance(&_ERC20Pausable.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Pausable *ERC20PausableCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Pausable.Contract.Allowance(&_ERC20Pausable.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Pausable *ERC20PausableCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20Pausable.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Pausable *ERC20PausableSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Pausable.Contract.BalanceOf(&_ERC20Pausable.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Pausable *ERC20PausableCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Pausable.Contract.BalanceOf(&_ERC20Pausable.CallOpts, account)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_ERC20Pausable *ERC20PausableCaller) IsPauser(opts *bind.CallOpts, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ERC20Pausable.contract.Call(opts, out, "isPauser", account)
	return *ret0, err
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_ERC20Pausable *ERC20PausableSession) IsPauser(account common.Address) (bool, error) {
	return _ERC20Pausable.Contract.IsPauser(&_ERC20Pausable.CallOpts, account)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_ERC20Pausable *ERC20PausableCallerSession) IsPauser(account common.Address) (bool, error) {
	return _ERC20Pausable.Contract.IsPauser(&_ERC20Pausable.CallOpts, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20Pausable *ERC20PausableCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ERC20Pausable.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20Pausable *ERC20PausableSession) Paused() (bool, error) {
	return _ERC20Pausable.Contract.Paused(&_ERC20Pausable.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ERC20Pausable *ERC20PausableCallerSession) Paused() (bool, error) {
	return _ERC20Pausable.Contract.Paused(&_ERC20Pausable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Pausable *ERC20PausableCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20Pausable.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Pausable *ERC20PausableSession) TotalSupply() (*big.Int, error) {
	return _ERC20Pausable.Contract.TotalSupply(&_ERC20Pausable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Pausable *ERC20PausableCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20Pausable.Contract.TotalSupply(&_ERC20Pausable.CallOpts)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_ERC20Pausable *ERC20PausableTransactor) AddPauser(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "addPauser", account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_ERC20Pausable *ERC20PausableSession) AddPauser(account common.Address) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.AddPauser(&_ERC20Pausable.TransactOpts, account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_ERC20Pausable *ERC20PausableTransactorSession) AddPauser(account common.Address) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.AddPauser(&_ERC20Pausable.TransactOpts, account)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ERC20Pausable *ERC20PausableSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Approve(&_ERC20Pausable.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Approve(&_ERC20Pausable.TransactOpts, spender, value)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Pausable *ERC20PausableSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.DecreaseAllowance(&_ERC20Pausable.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.DecreaseAllowance(&_ERC20Pausable.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Pausable *ERC20PausableSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.IncreaseAllowance(&_ERC20Pausable.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.IncreaseAllowance(&_ERC20Pausable.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_ERC20Pausable *ERC20PausableTransactor) Initialize(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "initialize", sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_ERC20Pausable *ERC20PausableSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Initialize(&_ERC20Pausable.TransactOpts, sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_ERC20Pausable *ERC20PausableTransactorSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Initialize(&_ERC20Pausable.TransactOpts, sender)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ERC20Pausable *ERC20PausableTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ERC20Pausable *ERC20PausableSession) Pause() (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Pause(&_ERC20Pausable.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ERC20Pausable *ERC20PausableTransactorSession) Pause() (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Pause(&_ERC20Pausable.TransactOpts)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_ERC20Pausable *ERC20PausableTransactor) RenouncePauser(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "renouncePauser")
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_ERC20Pausable *ERC20PausableSession) RenouncePauser() (*types.Transaction, error) {
	return _ERC20Pausable.Contract.RenouncePauser(&_ERC20Pausable.TransactOpts)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_ERC20Pausable *ERC20PausableTransactorSession) RenouncePauser() (*types.Transaction, error) {
	return _ERC20Pausable.Contract.RenouncePauser(&_ERC20Pausable.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ERC20Pausable *ERC20PausableSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Transfer(&_ERC20Pausable.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Transfer(&_ERC20Pausable.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ERC20Pausable *ERC20PausableSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.TransferFrom(&_ERC20Pausable.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ERC20Pausable *ERC20PausableTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20Pausable.Contract.TransferFrom(&_ERC20Pausable.TransactOpts, from, to, value)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ERC20Pausable *ERC20PausableTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Pausable.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ERC20Pausable *ERC20PausableSession) Unpause() (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Unpause(&_ERC20Pausable.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ERC20Pausable *ERC20PausableTransactorSession) Unpause() (*types.Transaction, error) {
	return _ERC20Pausable.Contract.Unpause(&_ERC20Pausable.TransactOpts)
}

// ERC20PausableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20Pausable contract.
type ERC20PausableApprovalIterator struct {
	Event *ERC20PausableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PausableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PausableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PausableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PausableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PausableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PausableApproval represents a Approval event raised by the ERC20Pausable contract.
type ERC20PausableApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Pausable *ERC20PausableFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20PausableApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Pausable.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20PausableApprovalIterator{contract: _ERC20Pausable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Pausable *ERC20PausableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20PausableApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Pausable.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PausableApproval)
				if err := _ERC20Pausable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Pausable *ERC20PausableFilterer) ParseApproval(log types.Log) (*ERC20PausableApproval, error) {
	event := new(ERC20PausableApproval)
	if err := _ERC20Pausable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20PausablePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ERC20Pausable contract.
type ERC20PausablePausedIterator struct {
	Event *ERC20PausablePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PausablePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PausablePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PausablePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PausablePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PausablePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PausablePaused represents a Paused event raised by the ERC20Pausable contract.
type ERC20PausablePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20Pausable *ERC20PausableFilterer) FilterPaused(opts *bind.FilterOpts) (*ERC20PausablePausedIterator, error) {

	logs, sub, err := _ERC20Pausable.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ERC20PausablePausedIterator{contract: _ERC20Pausable.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20Pausable *ERC20PausableFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ERC20PausablePaused) (event.Subscription, error) {

	logs, sub, err := _ERC20Pausable.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PausablePaused)
				if err := _ERC20Pausable.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ERC20Pausable *ERC20PausableFilterer) ParsePaused(log types.Log) (*ERC20PausablePaused, error) {
	event := new(ERC20PausablePaused)
	if err := _ERC20Pausable.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20PausablePauserAddedIterator is returned from FilterPauserAdded and is used to iterate over the raw logs and unpacked data for PauserAdded events raised by the ERC20Pausable contract.
type ERC20PausablePauserAddedIterator struct {
	Event *ERC20PausablePauserAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PausablePauserAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PausablePauserAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PausablePauserAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PausablePauserAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PausablePauserAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PausablePauserAdded represents a PauserAdded event raised by the ERC20Pausable contract.
type ERC20PausablePauserAdded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserAdded is a free log retrieval operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_ERC20Pausable *ERC20PausableFilterer) FilterPauserAdded(opts *bind.FilterOpts, account []common.Address) (*ERC20PausablePauserAddedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ERC20Pausable.contract.FilterLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return &ERC20PausablePauserAddedIterator{contract: _ERC20Pausable.contract, event: "PauserAdded", logs: logs, sub: sub}, nil
}

// WatchPauserAdded is a free log subscription operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_ERC20Pausable *ERC20PausableFilterer) WatchPauserAdded(opts *bind.WatchOpts, sink chan<- *ERC20PausablePauserAdded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ERC20Pausable.contract.WatchLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PausablePauserAdded)
				if err := _ERC20Pausable.contract.UnpackLog(event, "PauserAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserAdded is a log parse operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_ERC20Pausable *ERC20PausableFilterer) ParsePauserAdded(log types.Log) (*ERC20PausablePauserAdded, error) {
	event := new(ERC20PausablePauserAdded)
	if err := _ERC20Pausable.contract.UnpackLog(event, "PauserAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20PausablePauserRemovedIterator is returned from FilterPauserRemoved and is used to iterate over the raw logs and unpacked data for PauserRemoved events raised by the ERC20Pausable contract.
type ERC20PausablePauserRemovedIterator struct {
	Event *ERC20PausablePauserRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PausablePauserRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PausablePauserRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PausablePauserRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PausablePauserRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PausablePauserRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PausablePauserRemoved represents a PauserRemoved event raised by the ERC20Pausable contract.
type ERC20PausablePauserRemoved struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserRemoved is a free log retrieval operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_ERC20Pausable *ERC20PausableFilterer) FilterPauserRemoved(opts *bind.FilterOpts, account []common.Address) (*ERC20PausablePauserRemovedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ERC20Pausable.contract.FilterLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return &ERC20PausablePauserRemovedIterator{contract: _ERC20Pausable.contract, event: "PauserRemoved", logs: logs, sub: sub}, nil
}

// WatchPauserRemoved is a free log subscription operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_ERC20Pausable *ERC20PausableFilterer) WatchPauserRemoved(opts *bind.WatchOpts, sink chan<- *ERC20PausablePauserRemoved, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ERC20Pausable.contract.WatchLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PausablePauserRemoved)
				if err := _ERC20Pausable.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRemoved is a log parse operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_ERC20Pausable *ERC20PausableFilterer) ParsePauserRemoved(log types.Log) (*ERC20PausablePauserRemoved, error) {
	event := new(ERC20PausablePauserRemoved)
	if err := _ERC20Pausable.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20PausableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20Pausable contract.
type ERC20PausableTransferIterator struct {
	Event *ERC20PausableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PausableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PausableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PausableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PausableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PausableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PausableTransfer represents a Transfer event raised by the ERC20Pausable contract.
type ERC20PausableTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Pausable *ERC20PausableFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20PausableTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Pausable.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20PausableTransferIterator{contract: _ERC20Pausable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Pausable *ERC20PausableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20PausableTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Pausable.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PausableTransfer)
				if err := _ERC20Pausable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Pausable *ERC20PausableFilterer) ParseTransfer(log types.Log) (*ERC20PausableTransfer, error) {
	event := new(ERC20PausableTransfer)
	if err := _ERC20Pausable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20PausableUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ERC20Pausable contract.
type ERC20PausableUnpausedIterator struct {
	Event *ERC20PausableUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20PausableUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20PausableUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20PausableUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20PausableUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20PausableUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20PausableUnpaused represents a Unpaused event raised by the ERC20Pausable contract.
type ERC20PausableUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20Pausable *ERC20PausableFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ERC20PausableUnpausedIterator, error) {

	logs, sub, err := _ERC20Pausable.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ERC20PausableUnpausedIterator{contract: _ERC20Pausable.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20Pausable *ERC20PausableFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ERC20PausableUnpaused) (event.Subscription, error) {

	logs, sub, err := _ERC20Pausable.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20PausableUnpaused)
				if err := _ERC20Pausable.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ERC20Pausable *ERC20PausableFilterer) ParseUnpaused(log types.Log) (*ERC20PausableUnpaused, error) {
	event := new(ERC20PausableUnpaused)
	if err := _ERC20Pausable.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20WithPermitABI is the input ABI used to generate the binding from.
const ERC20WithPermitABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ERC20WithPermitBin is the compiled bytecode used for deploying new contracts.
var ERC20WithPermitBin = ""

// DeployERC20WithPermit deploys a new Ethereum contract, binding an instance of ERC20WithPermit to it.
func DeployERC20WithPermit(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20WithPermit, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20WithPermitABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC20WithPermitBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20WithPermit{ERC20WithPermitCaller: ERC20WithPermitCaller{contract: contract}, ERC20WithPermitTransactor: ERC20WithPermitTransactor{contract: contract}, ERC20WithPermitFilterer: ERC20WithPermitFilterer{contract: contract}}, nil
}

// ERC20WithPermit is an auto generated Go binding around an Ethereum contract.
type ERC20WithPermit struct {
	ERC20WithPermitCaller     // Read-only binding to the contract
	ERC20WithPermitTransactor // Write-only binding to the contract
	ERC20WithPermitFilterer   // Log filterer for contract events
}

// ERC20WithPermitCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20WithPermitCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20WithPermitTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20WithPermitTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20WithPermitFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20WithPermitFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20WithPermitSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20WithPermitSession struct {
	Contract     *ERC20WithPermit  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20WithPermitCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20WithPermitCallerSession struct {
	Contract *ERC20WithPermitCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ERC20WithPermitTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20WithPermitTransactorSession struct {
	Contract     *ERC20WithPermitTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ERC20WithPermitRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20WithPermitRaw struct {
	Contract *ERC20WithPermit // Generic contract binding to access the raw methods on
}

// ERC20WithPermitCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20WithPermitCallerRaw struct {
	Contract *ERC20WithPermitCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20WithPermitTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20WithPermitTransactorRaw struct {
	Contract *ERC20WithPermitTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20WithPermit creates a new instance of ERC20WithPermit, bound to a specific deployed contract.
func NewERC20WithPermit(address common.Address, backend bind.ContractBackend) (*ERC20WithPermit, error) {
	contract, err := bindERC20WithPermit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20WithPermit{ERC20WithPermitCaller: ERC20WithPermitCaller{contract: contract}, ERC20WithPermitTransactor: ERC20WithPermitTransactor{contract: contract}, ERC20WithPermitFilterer: ERC20WithPermitFilterer{contract: contract}}, nil
}

// NewERC20WithPermitCaller creates a new read-only instance of ERC20WithPermit, bound to a specific deployed contract.
func NewERC20WithPermitCaller(address common.Address, caller bind.ContractCaller) (*ERC20WithPermitCaller, error) {
	contract, err := bindERC20WithPermit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20WithPermitCaller{contract: contract}, nil
}

// NewERC20WithPermitTransactor creates a new write-only instance of ERC20WithPermit, bound to a specific deployed contract.
func NewERC20WithPermitTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20WithPermitTransactor, error) {
	contract, err := bindERC20WithPermit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20WithPermitTransactor{contract: contract}, nil
}

// NewERC20WithPermitFilterer creates a new log filterer instance of ERC20WithPermit, bound to a specific deployed contract.
func NewERC20WithPermitFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20WithPermitFilterer, error) {
	contract, err := bindERC20WithPermit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20WithPermitFilterer{contract: contract}, nil
}

// bindERC20WithPermit binds a generic wrapper to an already deployed contract.
func bindERC20WithPermit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20WithPermitABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20WithPermit *ERC20WithPermitRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20WithPermit.Contract.ERC20WithPermitCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20WithPermit *ERC20WithPermitRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.ERC20WithPermitTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20WithPermit *ERC20WithPermitRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.ERC20WithPermitTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20WithPermit *ERC20WithPermitCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20WithPermit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20WithPermit *ERC20WithPermitTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20WithPermit *ERC20WithPermitTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ERC20WithPermit *ERC20WithPermitCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "DOMAIN_SEPARATOR")
	return *ret0, err
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ERC20WithPermit *ERC20WithPermitSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _ERC20WithPermit.Contract.DOMAINSEPARATOR(&_ERC20WithPermit.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _ERC20WithPermit.Contract.DOMAINSEPARATOR(&_ERC20WithPermit.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_ERC20WithPermit *ERC20WithPermitCaller) PERMITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "PERMIT_TYPEHASH")
	return *ret0, err
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_ERC20WithPermit *ERC20WithPermitSession) PERMITTYPEHASH() ([32]byte, error) {
	return _ERC20WithPermit.Contract.PERMITTYPEHASH(&_ERC20WithPermit.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _ERC20WithPermit.Contract.PERMITTYPEHASH(&_ERC20WithPermit.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20WithPermit.Contract.Allowance(&_ERC20WithPermit.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20WithPermit.Contract.Allowance(&_ERC20WithPermit.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20WithPermit.Contract.BalanceOf(&_ERC20WithPermit.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20WithPermit.Contract.BalanceOf(&_ERC20WithPermit.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20WithPermit *ERC20WithPermitCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20WithPermit *ERC20WithPermitSession) Decimals() (uint8, error) {
	return _ERC20WithPermit.Contract.Decimals(&_ERC20WithPermit.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) Decimals() (uint8, error) {
	return _ERC20WithPermit.Contract.Decimals(&_ERC20WithPermit.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20WithPermit *ERC20WithPermitCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20WithPermit *ERC20WithPermitSession) Name() (string, error) {
	return _ERC20WithPermit.Contract.Name(&_ERC20WithPermit.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) Name() (string, error) {
	return _ERC20WithPermit.Contract.Name(&_ERC20WithPermit.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "nonces", arg0)
	return *ret0, err
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _ERC20WithPermit.Contract.Nonces(&_ERC20WithPermit.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _ERC20WithPermit.Contract.Nonces(&_ERC20WithPermit.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20WithPermit *ERC20WithPermitCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20WithPermit *ERC20WithPermitSession) Symbol() (string, error) {
	return _ERC20WithPermit.Contract.Symbol(&_ERC20WithPermit.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) Symbol() (string, error) {
	return _ERC20WithPermit.Contract.Symbol(&_ERC20WithPermit.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitSession) TotalSupply() (*big.Int, error) {
	return _ERC20WithPermit.Contract.TotalSupply(&_ERC20WithPermit.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20WithPermit.Contract.TotalSupply(&_ERC20WithPermit.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ERC20WithPermit *ERC20WithPermitCaller) Version(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _ERC20WithPermit.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ERC20WithPermit *ERC20WithPermitSession) Version() (string, error) {
	return _ERC20WithPermit.Contract.Version(&_ERC20WithPermit.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ERC20WithPermit *ERC20WithPermitCallerSession) Version() (string, error) {
	return _ERC20WithPermit.Contract.Version(&_ERC20WithPermit.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Approve(&_ERC20WithPermit.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Approve(&_ERC20WithPermit.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.DecreaseAllowance(&_ERC20WithPermit.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.DecreaseAllowance(&_ERC20WithPermit.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.IncreaseAllowance(&_ERC20WithPermit.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.IncreaseAllowance(&_ERC20WithPermit.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_ERC20WithPermit *ERC20WithPermitTransactor) Initialize(opts *bind.TransactOpts, name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _ERC20WithPermit.contract.Transact(opts, "initialize", name, symbol, decimals)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_ERC20WithPermit *ERC20WithPermitSession) Initialize(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Initialize(&_ERC20WithPermit.TransactOpts, name, symbol, decimals)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_ERC20WithPermit *ERC20WithPermitTransactorSession) Initialize(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Initialize(&_ERC20WithPermit.TransactOpts, name, symbol, decimals)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x5dca3452.
//
// Solidity: function initialize(uint256 _chainId, string _version, string _name, string _symbol, uint8 _decimals) returns()
func (_ERC20WithPermit *ERC20WithPermitTransactor) Initialize0(opts *bind.TransactOpts, _chainId *big.Int, _version string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _ERC20WithPermit.contract.Transact(opts, "initialize0", _chainId, _version, _name, _symbol, _decimals)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x5dca3452.
//
// Solidity: function initialize(uint256 _chainId, string _version, string _name, string _symbol, uint8 _decimals) returns()
func (_ERC20WithPermit *ERC20WithPermitSession) Initialize0(_chainId *big.Int, _version string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Initialize0(&_ERC20WithPermit.TransactOpts, _chainId, _version, _name, _symbol, _decimals)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x5dca3452.
//
// Solidity: function initialize(uint256 _chainId, string _version, string _name, string _symbol, uint8 _decimals) returns()
func (_ERC20WithPermit *ERC20WithPermitTransactorSession) Initialize0(_chainId *big.Int, _version string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Initialize0(&_ERC20WithPermit.TransactOpts, _chainId, _version, _name, _symbol, _decimals)
}

// Permit is a paid mutator transaction binding the contract method 0x8fcbaf0c.
//
// Solidity: function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20WithPermit *ERC20WithPermitTransactor) Permit(opts *bind.TransactOpts, holder common.Address, spender common.Address, nonce *big.Int, expiry *big.Int, allowed bool, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20WithPermit.contract.Transact(opts, "permit", holder, spender, nonce, expiry, allowed, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0x8fcbaf0c.
//
// Solidity: function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20WithPermit *ERC20WithPermitSession) Permit(holder common.Address, spender common.Address, nonce *big.Int, expiry *big.Int, allowed bool, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Permit(&_ERC20WithPermit.TransactOpts, holder, spender, nonce, expiry, allowed, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0x8fcbaf0c.
//
// Solidity: function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20WithPermit *ERC20WithPermitTransactorSession) Permit(holder common.Address, spender common.Address, nonce *big.Int, expiry *big.Int, allowed bool, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Permit(&_ERC20WithPermit.TransactOpts, holder, spender, nonce, expiry, allowed, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Transfer(&_ERC20WithPermit.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.Transfer(&_ERC20WithPermit.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.TransferFrom(&_ERC20WithPermit.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20WithPermit *ERC20WithPermitTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithPermit.Contract.TransferFrom(&_ERC20WithPermit.TransactOpts, sender, recipient, amount)
}

// ERC20WithPermitApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20WithPermit contract.
type ERC20WithPermitApprovalIterator struct {
	Event *ERC20WithPermitApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20WithPermitApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20WithPermitApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20WithPermitApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20WithPermitApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20WithPermitApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20WithPermitApproval represents a Approval event raised by the ERC20WithPermit contract.
type ERC20WithPermitApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20WithPermit *ERC20WithPermitFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20WithPermitApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20WithPermit.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20WithPermitApprovalIterator{contract: _ERC20WithPermit.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20WithPermit *ERC20WithPermitFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20WithPermitApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20WithPermit.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20WithPermitApproval)
				if err := _ERC20WithPermit.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20WithPermit *ERC20WithPermitFilterer) ParseApproval(log types.Log) (*ERC20WithPermitApproval, error) {
	event := new(ERC20WithPermitApproval)
	if err := _ERC20WithPermit.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20WithPermitTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20WithPermit contract.
type ERC20WithPermitTransferIterator struct {
	Event *ERC20WithPermitTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20WithPermitTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20WithPermitTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20WithPermitTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20WithPermitTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20WithPermitTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20WithPermitTransfer represents a Transfer event raised by the ERC20WithPermit contract.
type ERC20WithPermitTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20WithPermit *ERC20WithPermitFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20WithPermitTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20WithPermit.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20WithPermitTransferIterator{contract: _ERC20WithPermit.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20WithPermit *ERC20WithPermitFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20WithPermitTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20WithPermit.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20WithPermitTransfer)
				if err := _ERC20WithPermit.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20WithPermit *ERC20WithPermitFilterer) ParseTransfer(log types.Log) (*ERC20WithPermitTransfer, error) {
	event := new(ERC20WithPermitTransfer)
	if err := _ERC20WithPermit.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20WithRateABI is the input ABI used to generate the binding from.
const ERC20WithRateABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"LogRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_rateScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"fromUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"toUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ERC20WithRateBin is the compiled bytecode used for deploying new contracts.
var ERC20WithRateBin = "0x60806040526110d8806100136000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063a173b2f6116100ad578063cd6dc68711610071578063cd6dc6871461031a578063db068e0e14610346578063dd62ed3e14610363578063eb438fc214610391578063f2fde38b146103ae5761012c565b8063a173b2f614610277578063a457c2d714610294578063a9059cbb146102c0578063bd6d894d146102ec578063c4d66de8146102f45761012c565b80633af9e669116100f45780633af9e669146101f557806370a082311461021b578063715018a6146102415780638da5cb5b1461024b5780638f32d59b1461026f5761012c565b8063095ea7b31461013157806318160ddd1461017157806323b872dd1461018b57806325e27ed8146101c157806339509351146101c9575b600080fd5b61015d6004803603604081101561014757600080fd5b506001600160a01b0381351690602001356103d4565b604080519115158252519081900360200190f35b6101796103f2565b60408051918252519081900360200190f35b61015d600480360360608110156101a157600080fd5b506001600160a01b038135811691602081013590911690604001356103f8565b610179610485565b61015d600480360360408110156101df57600080fd5b506001600160a01b038135169060200135610491565b6101796004803603602081101561020b57600080fd5b50356001600160a01b03166104e5565b6101796004803603602081101561023157600080fd5b50356001600160a01b03166104f8565b610249610513565b005b6102536105b6565b604080516001600160a01b039092168252519081900360200190f35b61015d6105c5565b6101796004803603602081101561028d57600080fd5b50356105eb565b61015d600480360360408110156102aa57600080fd5b506001600160a01b038135169060200135610619565b61015d600480360360408110156102d657600080fd5b506001600160a01b038135169060200135610687565b61017961069b565b6102496004803603602081101561030a57600080fd5b50356001600160a01b03166106e6565b6102496004803603604081101561033057600080fd5b506001600160a01b0381351690602001356107d8565b6102496004803603602081101561035c57600080fd5b503561088e565b6101796004803603604081101561037957600080fd5b506001600160a01b03813581169160200135166108f3565b610179600480360360208110156103a757600080fd5b503561091e565b610249600480360360208110156103c457600080fd5b50356001600160a01b0316610941565b60006103e86103e16109a3565b84846109a7565b5060015b92915050565b60685490565b6000610405848484610a93565b61047b846104116109a3565b61047685604051806060016040528060288152602001610fb3602891396001600160a01b038a1660009081526067602052604081209061044f6109a3565b6001600160a01b03168152602081019190915260400160002054919063ffffffff610bf116565b6109a7565b5060019392505050565b670de0b6b3a764000081565b60006103e861049e6109a3565b8461047685606760006104af6109a3565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610c8816565b60006103ec6104f3836104f8565b61091e565b6001600160a01b031660009081526066602052604090205490565b61051b6105c5565b61056c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6033546000906001600160a01b03166105dc6109a3565b6001600160a01b031614905090565b609b546000906103ec9061060d84670de0b6b3a764000063ffffffff610ce916565b9063ffffffff610d4216565b60006103e86106266109a3565b846104768560405180606001604052806025815260200161107f60259139606760006106506109a3565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610bf116565b60006103e86106946109a3565b8484610a93565b6000609b54600014156106df5760405162461bcd60e51b815260040180806020018281038252602c815260200180610f40602c913960400191505060405180910390fd5b50609b5490565b600054610100900460ff16806106ff57506106ff610d84565b8061070d575060005460ff16155b6107485760405162461bcd60e51b815260040180806020018281038252602e815260200180610fdb602e913960400191505060405180910390fd5b600054610100900460ff16158015610773576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156107d4576000805461ff00191690555b5050565b600054610100900460ff16806107f157506107f1610d84565b806107ff575060005460ff16155b61083a5760405162461bcd60e51b815260040180806020018281038252602e815260200180610fdb602e913960400191505060405180910390fd5b600054610100900460ff16158015610865576000805460ff1961ff0019909116610100171660011790555b61086e836106e6565b61087782610d8a565b8015610889576000805461ff00191690555b505050565b6108966105c5565b6108e7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6108f081610d8a565b50565b6001600160a01b03918216600090815260676020908152604080832093909416825291909152205490565b60006103ec670de0b6b3a764000061060d609b5485610ce990919063ffffffff16565b6109496105c5565b61099a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6108f081610dce565b3390565b6001600160a01b0383166109ec5760405162461bcd60e51b815260040180806020018281038252602481526020018061102e6024913960400191505060405180910390fd5b6001600160a01b038216610a315760405162461bcd60e51b8152600401808060200182810382526022815260200180610f1e6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260676020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610ad85760405162461bcd60e51b81526004018080602001828103825260258152602001806110096025913960400191505060405180910390fd5b6001600160a01b038216610b1d5760405162461bcd60e51b8152600401808060200182810382526023815260200180610ed56023913960400191505060405180910390fd5b610b6081604051806060016040528060268152602001610f6c602691396001600160a01b038616600090815260666020526040902054919063ffffffff610bf116565b6001600160a01b038085166000908152606660205260408082209390935590841681522054610b95908263ffffffff610c8816565b6001600160a01b0380841660008181526066602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610c805760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c45578181015183820152602001610c2d565b50505050905090810190601f168015610c725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610ce2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082610cf8575060006103ec565b82820282848281610d0557fe5b0414610ce25760405162461bcd60e51b8152600401808060200182810382526021815260200180610f926021913960400191505060405180910390fd5b6000610ce283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610e6f565b303b1590565b60008111610dc95760405162461bcd60e51b815260040180806020018281038252602d815260200180611052602d913960400191505060405180910390fd5b609b55565b6001600160a01b038116610e135760405162461bcd60e51b8152600401808060200182810382526026815260200180610ef86026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60008183610ebe5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610c45578181015183820152602001610c2d565b506000838581610eca57fe5b049594505050505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f2061646472657373455243323057697468526174653a207261746520686173206e6f74206265656e20696e697469616c697a656445524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373455243323057697468526174653a2072617465206d7573742062652067726561746572207468616e207a65726f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a72315820961006814b2fd37e2175759e219636a0d3369edf910d92b464cb3f29ee90e04764736f6c63430005100032"

// DeployERC20WithRate deploys a new Ethereum contract, binding an instance of ERC20WithRate to it.
func DeployERC20WithRate(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20WithRate, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20WithRateABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC20WithRateBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20WithRate{ERC20WithRateCaller: ERC20WithRateCaller{contract: contract}, ERC20WithRateTransactor: ERC20WithRateTransactor{contract: contract}, ERC20WithRateFilterer: ERC20WithRateFilterer{contract: contract}}, nil
}

// ERC20WithRate is an auto generated Go binding around an Ethereum contract.
type ERC20WithRate struct {
	ERC20WithRateCaller     // Read-only binding to the contract
	ERC20WithRateTransactor // Write-only binding to the contract
	ERC20WithRateFilterer   // Log filterer for contract events
}

// ERC20WithRateCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20WithRateCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20WithRateTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20WithRateTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20WithRateFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20WithRateFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20WithRateSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20WithRateSession struct {
	Contract     *ERC20WithRate    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20WithRateCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20WithRateCallerSession struct {
	Contract *ERC20WithRateCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ERC20WithRateTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20WithRateTransactorSession struct {
	Contract     *ERC20WithRateTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ERC20WithRateRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20WithRateRaw struct {
	Contract *ERC20WithRate // Generic contract binding to access the raw methods on
}

// ERC20WithRateCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20WithRateCallerRaw struct {
	Contract *ERC20WithRateCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20WithRateTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20WithRateTransactorRaw struct {
	Contract *ERC20WithRateTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20WithRate creates a new instance of ERC20WithRate, bound to a specific deployed contract.
func NewERC20WithRate(address common.Address, backend bind.ContractBackend) (*ERC20WithRate, error) {
	contract, err := bindERC20WithRate(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20WithRate{ERC20WithRateCaller: ERC20WithRateCaller{contract: contract}, ERC20WithRateTransactor: ERC20WithRateTransactor{contract: contract}, ERC20WithRateFilterer: ERC20WithRateFilterer{contract: contract}}, nil
}

// NewERC20WithRateCaller creates a new read-only instance of ERC20WithRate, bound to a specific deployed contract.
func NewERC20WithRateCaller(address common.Address, caller bind.ContractCaller) (*ERC20WithRateCaller, error) {
	contract, err := bindERC20WithRate(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20WithRateCaller{contract: contract}, nil
}

// NewERC20WithRateTransactor creates a new write-only instance of ERC20WithRate, bound to a specific deployed contract.
func NewERC20WithRateTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20WithRateTransactor, error) {
	contract, err := bindERC20WithRate(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20WithRateTransactor{contract: contract}, nil
}

// NewERC20WithRateFilterer creates a new log filterer instance of ERC20WithRate, bound to a specific deployed contract.
func NewERC20WithRateFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20WithRateFilterer, error) {
	contract, err := bindERC20WithRate(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20WithRateFilterer{contract: contract}, nil
}

// bindERC20WithRate binds a generic wrapper to an already deployed contract.
func bindERC20WithRate(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20WithRateABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20WithRate *ERC20WithRateRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20WithRate.Contract.ERC20WithRateCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20WithRate *ERC20WithRateRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.ERC20WithRateTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20WithRate *ERC20WithRateRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.ERC20WithRateTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20WithRate *ERC20WithRateCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20WithRate.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20WithRate *ERC20WithRateTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20WithRate *ERC20WithRateTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.contract.Transact(opts, method, params...)
}

// RateScale is a free data retrieval call binding the contract method 0x25e27ed8.
//
// Solidity: function _rateScale() view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCaller) RateScale(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "_rateScale")
	return *ret0, err
}

// RateScale is a free data retrieval call binding the contract method 0x25e27ed8.
//
// Solidity: function _rateScale() view returns(uint256)
func (_ERC20WithRate *ERC20WithRateSession) RateScale() (*big.Int, error) {
	return _ERC20WithRate.Contract.RateScale(&_ERC20WithRate.CallOpts)
}

// RateScale is a free data retrieval call binding the contract method 0x25e27ed8.
//
// Solidity: function _rateScale() view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCallerSession) RateScale() (*big.Int, error) {
	return _ERC20WithRate.Contract.RateScale(&_ERC20WithRate.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20WithRate.Contract.Allowance(&_ERC20WithRate.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20WithRate.Contract.Allowance(&_ERC20WithRate.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20WithRate.Contract.BalanceOf(&_ERC20WithRate.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20WithRate.Contract.BalanceOf(&_ERC20WithRate.CallOpts, account)
}

// BalanceOfUnderlying is a free data retrieval call binding the contract method 0x3af9e669.
//
// Solidity: function balanceOfUnderlying(address _account) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCaller) BalanceOfUnderlying(opts *bind.CallOpts, _account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "balanceOfUnderlying", _account)
	return *ret0, err
}

// BalanceOfUnderlying is a free data retrieval call binding the contract method 0x3af9e669.
//
// Solidity: function balanceOfUnderlying(address _account) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateSession) BalanceOfUnderlying(_account common.Address) (*big.Int, error) {
	return _ERC20WithRate.Contract.BalanceOfUnderlying(&_ERC20WithRate.CallOpts, _account)
}

// BalanceOfUnderlying is a free data retrieval call binding the contract method 0x3af9e669.
//
// Solidity: function balanceOfUnderlying(address _account) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCallerSession) BalanceOfUnderlying(_account common.Address) (*big.Int, error) {
	return _ERC20WithRate.Contract.BalanceOfUnderlying(&_ERC20WithRate.CallOpts, _account)
}

// ExchangeRateCurrent is a free data retrieval call binding the contract method 0xbd6d894d.
//
// Solidity: function exchangeRateCurrent() view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCaller) ExchangeRateCurrent(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "exchangeRateCurrent")
	return *ret0, err
}

// ExchangeRateCurrent is a free data retrieval call binding the contract method 0xbd6d894d.
//
// Solidity: function exchangeRateCurrent() view returns(uint256)
func (_ERC20WithRate *ERC20WithRateSession) ExchangeRateCurrent() (*big.Int, error) {
	return _ERC20WithRate.Contract.ExchangeRateCurrent(&_ERC20WithRate.CallOpts)
}

// ExchangeRateCurrent is a free data retrieval call binding the contract method 0xbd6d894d.
//
// Solidity: function exchangeRateCurrent() view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCallerSession) ExchangeRateCurrent() (*big.Int, error) {
	return _ERC20WithRate.Contract.ExchangeRateCurrent(&_ERC20WithRate.CallOpts)
}

// FromUnderlying is a free data retrieval call binding the contract method 0xa173b2f6.
//
// Solidity: function fromUnderlying(uint256 _amountUnderlying) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCaller) FromUnderlying(opts *bind.CallOpts, _amountUnderlying *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "fromUnderlying", _amountUnderlying)
	return *ret0, err
}

// FromUnderlying is a free data retrieval call binding the contract method 0xa173b2f6.
//
// Solidity: function fromUnderlying(uint256 _amountUnderlying) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateSession) FromUnderlying(_amountUnderlying *big.Int) (*big.Int, error) {
	return _ERC20WithRate.Contract.FromUnderlying(&_ERC20WithRate.CallOpts, _amountUnderlying)
}

// FromUnderlying is a free data retrieval call binding the contract method 0xa173b2f6.
//
// Solidity: function fromUnderlying(uint256 _amountUnderlying) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCallerSession) FromUnderlying(_amountUnderlying *big.Int) (*big.Int, error) {
	return _ERC20WithRate.Contract.FromUnderlying(&_ERC20WithRate.CallOpts, _amountUnderlying)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_ERC20WithRate *ERC20WithRateCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_ERC20WithRate *ERC20WithRateSession) IsOwner() (bool, error) {
	return _ERC20WithRate.Contract.IsOwner(&_ERC20WithRate.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_ERC20WithRate *ERC20WithRateCallerSession) IsOwner() (bool, error) {
	return _ERC20WithRate.Contract.IsOwner(&_ERC20WithRate.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20WithRate *ERC20WithRateCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20WithRate *ERC20WithRateSession) Owner() (common.Address, error) {
	return _ERC20WithRate.Contract.Owner(&_ERC20WithRate.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20WithRate *ERC20WithRateCallerSession) Owner() (common.Address, error) {
	return _ERC20WithRate.Contract.Owner(&_ERC20WithRate.CallOpts)
}

// ToUnderlying is a free data retrieval call binding the contract method 0xeb438fc2.
//
// Solidity: function toUnderlying(uint256 _amount) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCaller) ToUnderlying(opts *bind.CallOpts, _amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "toUnderlying", _amount)
	return *ret0, err
}

// ToUnderlying is a free data retrieval call binding the contract method 0xeb438fc2.
//
// Solidity: function toUnderlying(uint256 _amount) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateSession) ToUnderlying(_amount *big.Int) (*big.Int, error) {
	return _ERC20WithRate.Contract.ToUnderlying(&_ERC20WithRate.CallOpts, _amount)
}

// ToUnderlying is a free data retrieval call binding the contract method 0xeb438fc2.
//
// Solidity: function toUnderlying(uint256 _amount) view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCallerSession) ToUnderlying(_amount *big.Int) (*big.Int, error) {
	return _ERC20WithRate.Contract.ToUnderlying(&_ERC20WithRate.CallOpts, _amount)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20WithRate.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20WithRate *ERC20WithRateSession) TotalSupply() (*big.Int, error) {
	return _ERC20WithRate.Contract.TotalSupply(&_ERC20WithRate.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20WithRate *ERC20WithRateCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20WithRate.Contract.TotalSupply(&_ERC20WithRate.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20WithRate *ERC20WithRateSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.Approve(&_ERC20WithRate.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.Approve(&_ERC20WithRate.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20WithRate *ERC20WithRateSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.DecreaseAllowance(&_ERC20WithRate.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.DecreaseAllowance(&_ERC20WithRate.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20WithRate *ERC20WithRateSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.IncreaseAllowance(&_ERC20WithRate.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.IncreaseAllowance(&_ERC20WithRate.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_ERC20WithRate *ERC20WithRateTransactor) Initialize(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "initialize", sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_ERC20WithRate *ERC20WithRateSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.Initialize(&_ERC20WithRate.TransactOpts, sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_ERC20WithRate *ERC20WithRateTransactorSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.Initialize(&_ERC20WithRate.TransactOpts, sender)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _nextOwner, uint256 _initialRate) returns()
func (_ERC20WithRate *ERC20WithRateTransactor) Initialize0(opts *bind.TransactOpts, _nextOwner common.Address, _initialRate *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "initialize0", _nextOwner, _initialRate)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _nextOwner, uint256 _initialRate) returns()
func (_ERC20WithRate *ERC20WithRateSession) Initialize0(_nextOwner common.Address, _initialRate *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.Initialize0(&_ERC20WithRate.TransactOpts, _nextOwner, _initialRate)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _nextOwner, uint256 _initialRate) returns()
func (_ERC20WithRate *ERC20WithRateTransactorSession) Initialize0(_nextOwner common.Address, _initialRate *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.Initialize0(&_ERC20WithRate.TransactOpts, _nextOwner, _initialRate)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20WithRate *ERC20WithRateTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20WithRate *ERC20WithRateSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20WithRate.Contract.RenounceOwnership(&_ERC20WithRate.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20WithRate *ERC20WithRateTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20WithRate.Contract.RenounceOwnership(&_ERC20WithRate.TransactOpts)
}

// SetExchangeRate is a paid mutator transaction binding the contract method 0xdb068e0e.
//
// Solidity: function setExchangeRate(uint256 _nextRate) returns()
func (_ERC20WithRate *ERC20WithRateTransactor) SetExchangeRate(opts *bind.TransactOpts, _nextRate *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "setExchangeRate", _nextRate)
}

// SetExchangeRate is a paid mutator transaction binding the contract method 0xdb068e0e.
//
// Solidity: function setExchangeRate(uint256 _nextRate) returns()
func (_ERC20WithRate *ERC20WithRateSession) SetExchangeRate(_nextRate *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.SetExchangeRate(&_ERC20WithRate.TransactOpts, _nextRate)
}

// SetExchangeRate is a paid mutator transaction binding the contract method 0xdb068e0e.
//
// Solidity: function setExchangeRate(uint256 _nextRate) returns()
func (_ERC20WithRate *ERC20WithRateTransactorSession) SetExchangeRate(_nextRate *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.SetExchangeRate(&_ERC20WithRate.TransactOpts, _nextRate)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20WithRate *ERC20WithRateSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.Transfer(&_ERC20WithRate.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.Transfer(&_ERC20WithRate.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20WithRate *ERC20WithRateSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.TransferFrom(&_ERC20WithRate.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ERC20WithRate *ERC20WithRateTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.TransferFrom(&_ERC20WithRate.TransactOpts, sender, recipient, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20WithRate *ERC20WithRateTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC20WithRate.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20WithRate *ERC20WithRateSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.TransferOwnership(&_ERC20WithRate.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20WithRate *ERC20WithRateTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20WithRate.Contract.TransferOwnership(&_ERC20WithRate.TransactOpts, newOwner)
}

// ERC20WithRateApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20WithRate contract.
type ERC20WithRateApprovalIterator struct {
	Event *ERC20WithRateApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20WithRateApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20WithRateApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20WithRateApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20WithRateApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20WithRateApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20WithRateApproval represents a Approval event raised by the ERC20WithRate contract.
type ERC20WithRateApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20WithRate *ERC20WithRateFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20WithRateApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20WithRate.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20WithRateApprovalIterator{contract: _ERC20WithRate.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20WithRate *ERC20WithRateFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20WithRateApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20WithRate.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20WithRateApproval)
				if err := _ERC20WithRate.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20WithRate *ERC20WithRateFilterer) ParseApproval(log types.Log) (*ERC20WithRateApproval, error) {
	event := new(ERC20WithRateApproval)
	if err := _ERC20WithRate.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20WithRateLogRateChangedIterator is returned from FilterLogRateChanged and is used to iterate over the raw logs and unpacked data for LogRateChanged events raised by the ERC20WithRate contract.
type ERC20WithRateLogRateChangedIterator struct {
	Event *ERC20WithRateLogRateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20WithRateLogRateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20WithRateLogRateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20WithRateLogRateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20WithRateLogRateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20WithRateLogRateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20WithRateLogRateChanged represents a LogRateChanged event raised by the ERC20WithRate contract.
type ERC20WithRateLogRateChanged struct {
	Rate *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogRateChanged is a free log retrieval operation binding the contract event 0x9d6ef0d454e23e234e8c1cf70cee49a44226ffb036017442229a7a5bd1d0957e.
//
// Solidity: event LogRateChanged(uint256 indexed _rate)
func (_ERC20WithRate *ERC20WithRateFilterer) FilterLogRateChanged(opts *bind.FilterOpts, _rate []*big.Int) (*ERC20WithRateLogRateChangedIterator, error) {

	var _rateRule []interface{}
	for _, _rateItem := range _rate {
		_rateRule = append(_rateRule, _rateItem)
	}

	logs, sub, err := _ERC20WithRate.contract.FilterLogs(opts, "LogRateChanged", _rateRule)
	if err != nil {
		return nil, err
	}
	return &ERC20WithRateLogRateChangedIterator{contract: _ERC20WithRate.contract, event: "LogRateChanged", logs: logs, sub: sub}, nil
}

// WatchLogRateChanged is a free log subscription operation binding the contract event 0x9d6ef0d454e23e234e8c1cf70cee49a44226ffb036017442229a7a5bd1d0957e.
//
// Solidity: event LogRateChanged(uint256 indexed _rate)
func (_ERC20WithRate *ERC20WithRateFilterer) WatchLogRateChanged(opts *bind.WatchOpts, sink chan<- *ERC20WithRateLogRateChanged, _rate []*big.Int) (event.Subscription, error) {

	var _rateRule []interface{}
	for _, _rateItem := range _rate {
		_rateRule = append(_rateRule, _rateItem)
	}

	logs, sub, err := _ERC20WithRate.contract.WatchLogs(opts, "LogRateChanged", _rateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20WithRateLogRateChanged)
				if err := _ERC20WithRate.contract.UnpackLog(event, "LogRateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogRateChanged is a log parse operation binding the contract event 0x9d6ef0d454e23e234e8c1cf70cee49a44226ffb036017442229a7a5bd1d0957e.
//
// Solidity: event LogRateChanged(uint256 indexed _rate)
func (_ERC20WithRate *ERC20WithRateFilterer) ParseLogRateChanged(log types.Log) (*ERC20WithRateLogRateChanged, error) {
	event := new(ERC20WithRateLogRateChanged)
	if err := _ERC20WithRate.contract.UnpackLog(event, "LogRateChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20WithRateOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC20WithRate contract.
type ERC20WithRateOwnershipTransferredIterator struct {
	Event *ERC20WithRateOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20WithRateOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20WithRateOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20WithRateOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20WithRateOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20WithRateOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20WithRateOwnershipTransferred represents a OwnershipTransferred event raised by the ERC20WithRate contract.
type ERC20WithRateOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20WithRate *ERC20WithRateFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC20WithRateOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20WithRate.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC20WithRateOwnershipTransferredIterator{contract: _ERC20WithRate.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20WithRate *ERC20WithRateFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC20WithRateOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20WithRate.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20WithRateOwnershipTransferred)
				if err := _ERC20WithRate.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20WithRate *ERC20WithRateFilterer) ParseOwnershipTransferred(log types.Log) (*ERC20WithRateOwnershipTransferred, error) {
	event := new(ERC20WithRateOwnershipTransferred)
	if err := _ERC20WithRate.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ERC20WithRateTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20WithRate contract.
type ERC20WithRateTransferIterator struct {
	Event *ERC20WithRateTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20WithRateTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20WithRateTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20WithRateTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20WithRateTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20WithRateTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20WithRateTransfer represents a Transfer event raised by the ERC20WithRate contract.
type ERC20WithRateTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20WithRate *ERC20WithRateFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20WithRateTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20WithRate.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20WithRateTransferIterator{contract: _ERC20WithRate.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20WithRate *ERC20WithRateFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20WithRateTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20WithRate.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20WithRateTransfer)
				if err := _ERC20WithRate.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20WithRate *ERC20WithRateFilterer) ParseTransfer(log types.Log) (*ERC20WithRateTransfer, error) {
	event := new(ERC20WithRateTransfer)
	if err := _ERC20WithRate.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ForceSendABI is the input ABI used to generate the binding from.
const ForceSendABI = "[{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"send\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// ForceSendBin is the compiled bytecode used for deploying new contracts.
var ForceSendBin = "0x6080604052348015600f57600080fd5b5060878061001e6000396000f3fe608060405260043610601c5760003560e01c80633e58c58c146021575b600080fd5b604460048036036020811015603557600080fd5b50356001600160a01b03166046565b005b806001600160a01b0316fffea265627a7a7231582045ec46b5667d1aa3f01123706a478d76545e4f1254dd4ec3c7cb9a081296400d64736f6c63430005100032"

// DeployForceSend deploys a new Ethereum contract, binding an instance of ForceSend to it.
func DeployForceSend(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ForceSend, error) {
	parsed, err := abi.JSON(strings.NewReader(ForceSendABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ForceSendBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ForceSend{ForceSendCaller: ForceSendCaller{contract: contract}, ForceSendTransactor: ForceSendTransactor{contract: contract}, ForceSendFilterer: ForceSendFilterer{contract: contract}}, nil
}

// ForceSend is an auto generated Go binding around an Ethereum contract.
type ForceSend struct {
	ForceSendCaller     // Read-only binding to the contract
	ForceSendTransactor // Write-only binding to the contract
	ForceSendFilterer   // Log filterer for contract events
}

// ForceSendCaller is an auto generated read-only Go binding around an Ethereum contract.
type ForceSendCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ForceSendTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ForceSendTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ForceSendFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ForceSendFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ForceSendSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ForceSendSession struct {
	Contract     *ForceSend        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ForceSendCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ForceSendCallerSession struct {
	Contract *ForceSendCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ForceSendTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ForceSendTransactorSession struct {
	Contract     *ForceSendTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ForceSendRaw is an auto generated low-level Go binding around an Ethereum contract.
type ForceSendRaw struct {
	Contract *ForceSend // Generic contract binding to access the raw methods on
}

// ForceSendCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ForceSendCallerRaw struct {
	Contract *ForceSendCaller // Generic read-only contract binding to access the raw methods on
}

// ForceSendTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ForceSendTransactorRaw struct {
	Contract *ForceSendTransactor // Generic write-only contract binding to access the raw methods on
}

// NewForceSend creates a new instance of ForceSend, bound to a specific deployed contract.
func NewForceSend(address common.Address, backend bind.ContractBackend) (*ForceSend, error) {
	contract, err := bindForceSend(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ForceSend{ForceSendCaller: ForceSendCaller{contract: contract}, ForceSendTransactor: ForceSendTransactor{contract: contract}, ForceSendFilterer: ForceSendFilterer{contract: contract}}, nil
}

// NewForceSendCaller creates a new read-only instance of ForceSend, bound to a specific deployed contract.
func NewForceSendCaller(address common.Address, caller bind.ContractCaller) (*ForceSendCaller, error) {
	contract, err := bindForceSend(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ForceSendCaller{contract: contract}, nil
}

// NewForceSendTransactor creates a new write-only instance of ForceSend, bound to a specific deployed contract.
func NewForceSendTransactor(address common.Address, transactor bind.ContractTransactor) (*ForceSendTransactor, error) {
	contract, err := bindForceSend(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ForceSendTransactor{contract: contract}, nil
}

// NewForceSendFilterer creates a new log filterer instance of ForceSend, bound to a specific deployed contract.
func NewForceSendFilterer(address common.Address, filterer bind.ContractFilterer) (*ForceSendFilterer, error) {
	contract, err := bindForceSend(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ForceSendFilterer{contract: contract}, nil
}

// bindForceSend binds a generic wrapper to an already deployed contract.
func bindForceSend(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ForceSendABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ForceSend *ForceSendRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ForceSend.Contract.ForceSendCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ForceSend *ForceSendRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ForceSend.Contract.ForceSendTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ForceSend *ForceSendRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ForceSend.Contract.ForceSendTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ForceSend *ForceSendCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ForceSend.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ForceSend *ForceSendTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ForceSend.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ForceSend *ForceSendTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ForceSend.Contract.contract.Transact(opts, method, params...)
}

// Send is a paid mutator transaction binding the contract method 0x3e58c58c.
//
// Solidity: function send(address recipient) payable returns()
func (_ForceSend *ForceSendTransactor) Send(opts *bind.TransactOpts, recipient common.Address) (*types.Transaction, error) {
	return _ForceSend.contract.Transact(opts, "send", recipient)
}

// Send is a paid mutator transaction binding the contract method 0x3e58c58c.
//
// Solidity: function send(address recipient) payable returns()
func (_ForceSend *ForceSendSession) Send(recipient common.Address) (*types.Transaction, error) {
	return _ForceSend.Contract.Send(&_ForceSend.TransactOpts, recipient)
}

// Send is a paid mutator transaction binding the contract method 0x3e58c58c.
//
// Solidity: function send(address recipient) payable returns()
func (_ForceSend *ForceSendTransactorSession) Send(recipient common.Address) (*types.Transaction, error) {
	return _ForceSend.Contract.Send(&_ForceSend.TransactOpts, recipient)
}

// GSNRecipientABI is the input ABI used to generate the binding from.
const GSNRecipientABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRelayHub\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRelayHub\",\"type\":\"address\"}],\"name\":\"RelayHubChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedFunction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxPossibleCharge\",\"type\":\"uint256\"}],\"name\":\"acceptRelayedCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHubAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"actualCharge\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"preRetVal\",\"type\":\"bytes32\"}],\"name\":\"postRelayedCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"preRelayedCall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"relayHubVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDefaultRelayHub\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// GSNRecipient is an auto generated Go binding around an Ethereum contract.
type GSNRecipient struct {
	GSNRecipientCaller     // Read-only binding to the contract
	GSNRecipientTransactor // Write-only binding to the contract
	GSNRecipientFilterer   // Log filterer for contract events
}

// GSNRecipientCaller is an auto generated read-only Go binding around an Ethereum contract.
type GSNRecipientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GSNRecipientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GSNRecipientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GSNRecipientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GSNRecipientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GSNRecipientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GSNRecipientSession struct {
	Contract     *GSNRecipient     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GSNRecipientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GSNRecipientCallerSession struct {
	Contract *GSNRecipientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// GSNRecipientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GSNRecipientTransactorSession struct {
	Contract     *GSNRecipientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// GSNRecipientRaw is an auto generated low-level Go binding around an Ethereum contract.
type GSNRecipientRaw struct {
	Contract *GSNRecipient // Generic contract binding to access the raw methods on
}

// GSNRecipientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GSNRecipientCallerRaw struct {
	Contract *GSNRecipientCaller // Generic read-only contract binding to access the raw methods on
}

// GSNRecipientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GSNRecipientTransactorRaw struct {
	Contract *GSNRecipientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGSNRecipient creates a new instance of GSNRecipient, bound to a specific deployed contract.
func NewGSNRecipient(address common.Address, backend bind.ContractBackend) (*GSNRecipient, error) {
	contract, err := bindGSNRecipient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GSNRecipient{GSNRecipientCaller: GSNRecipientCaller{contract: contract}, GSNRecipientTransactor: GSNRecipientTransactor{contract: contract}, GSNRecipientFilterer: GSNRecipientFilterer{contract: contract}}, nil
}

// NewGSNRecipientCaller creates a new read-only instance of GSNRecipient, bound to a specific deployed contract.
func NewGSNRecipientCaller(address common.Address, caller bind.ContractCaller) (*GSNRecipientCaller, error) {
	contract, err := bindGSNRecipient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GSNRecipientCaller{contract: contract}, nil
}

// NewGSNRecipientTransactor creates a new write-only instance of GSNRecipient, bound to a specific deployed contract.
func NewGSNRecipientTransactor(address common.Address, transactor bind.ContractTransactor) (*GSNRecipientTransactor, error) {
	contract, err := bindGSNRecipient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GSNRecipientTransactor{contract: contract}, nil
}

// NewGSNRecipientFilterer creates a new log filterer instance of GSNRecipient, bound to a specific deployed contract.
func NewGSNRecipientFilterer(address common.Address, filterer bind.ContractFilterer) (*GSNRecipientFilterer, error) {
	contract, err := bindGSNRecipient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GSNRecipientFilterer{contract: contract}, nil
}

// bindGSNRecipient binds a generic wrapper to an already deployed contract.
func bindGSNRecipient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GSNRecipientABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GSNRecipient *GSNRecipientRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GSNRecipient.Contract.GSNRecipientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GSNRecipient *GSNRecipientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GSNRecipient.Contract.GSNRecipientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GSNRecipient *GSNRecipientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GSNRecipient.Contract.GSNRecipientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GSNRecipient *GSNRecipientCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GSNRecipient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GSNRecipient *GSNRecipientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GSNRecipient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GSNRecipient *GSNRecipientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GSNRecipient.Contract.contract.Transact(opts, method, params...)
}

// AcceptRelayedCall is a free data retrieval call binding the contract method 0x83947ea0.
//
// Solidity: function acceptRelayedCall(address relay, address from, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes approvalData, uint256 maxPossibleCharge) view returns(uint256, bytes)
func (_GSNRecipient *GSNRecipientCaller) AcceptRelayedCall(opts *bind.CallOpts, relay common.Address, from common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, approvalData []byte, maxPossibleCharge *big.Int) (*big.Int, []byte, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new([]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _GSNRecipient.contract.Call(opts, out, "acceptRelayedCall", relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, approvalData, maxPossibleCharge)
	return *ret0, *ret1, err
}

// AcceptRelayedCall is a free data retrieval call binding the contract method 0x83947ea0.
//
// Solidity: function acceptRelayedCall(address relay, address from, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes approvalData, uint256 maxPossibleCharge) view returns(uint256, bytes)
func (_GSNRecipient *GSNRecipientSession) AcceptRelayedCall(relay common.Address, from common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, approvalData []byte, maxPossibleCharge *big.Int) (*big.Int, []byte, error) {
	return _GSNRecipient.Contract.AcceptRelayedCall(&_GSNRecipient.CallOpts, relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, approvalData, maxPossibleCharge)
}

// AcceptRelayedCall is a free data retrieval call binding the contract method 0x83947ea0.
//
// Solidity: function acceptRelayedCall(address relay, address from, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes approvalData, uint256 maxPossibleCharge) view returns(uint256, bytes)
func (_GSNRecipient *GSNRecipientCallerSession) AcceptRelayedCall(relay common.Address, from common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, approvalData []byte, maxPossibleCharge *big.Int) (*big.Int, []byte, error) {
	return _GSNRecipient.Contract.AcceptRelayedCall(&_GSNRecipient.CallOpts, relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, approvalData, maxPossibleCharge)
}

// GetHubAddr is a free data retrieval call binding the contract method 0x74e861d6.
//
// Solidity: function getHubAddr() view returns(address)
func (_GSNRecipient *GSNRecipientCaller) GetHubAddr(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GSNRecipient.contract.Call(opts, out, "getHubAddr")
	return *ret0, err
}

// GetHubAddr is a free data retrieval call binding the contract method 0x74e861d6.
//
// Solidity: function getHubAddr() view returns(address)
func (_GSNRecipient *GSNRecipientSession) GetHubAddr() (common.Address, error) {
	return _GSNRecipient.Contract.GetHubAddr(&_GSNRecipient.CallOpts)
}

// GetHubAddr is a free data retrieval call binding the contract method 0x74e861d6.
//
// Solidity: function getHubAddr() view returns(address)
func (_GSNRecipient *GSNRecipientCallerSession) GetHubAddr() (common.Address, error) {
	return _GSNRecipient.Contract.GetHubAddr(&_GSNRecipient.CallOpts)
}

// RelayHubVersion is a free data retrieval call binding the contract method 0xad61ccd5.
//
// Solidity: function relayHubVersion() view returns(string)
func (_GSNRecipient *GSNRecipientCaller) RelayHubVersion(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _GSNRecipient.contract.Call(opts, out, "relayHubVersion")
	return *ret0, err
}

// RelayHubVersion is a free data retrieval call binding the contract method 0xad61ccd5.
//
// Solidity: function relayHubVersion() view returns(string)
func (_GSNRecipient *GSNRecipientSession) RelayHubVersion() (string, error) {
	return _GSNRecipient.Contract.RelayHubVersion(&_GSNRecipient.CallOpts)
}

// RelayHubVersion is a free data retrieval call binding the contract method 0xad61ccd5.
//
// Solidity: function relayHubVersion() view returns(string)
func (_GSNRecipient *GSNRecipientCallerSession) RelayHubVersion() (string, error) {
	return _GSNRecipient.Contract.RelayHubVersion(&_GSNRecipient.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_GSNRecipient *GSNRecipientTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GSNRecipient.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_GSNRecipient *GSNRecipientSession) Initialize() (*types.Transaction, error) {
	return _GSNRecipient.Contract.Initialize(&_GSNRecipient.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_GSNRecipient *GSNRecipientTransactorSession) Initialize() (*types.Transaction, error) {
	return _GSNRecipient.Contract.Initialize(&_GSNRecipient.TransactOpts)
}

// PostRelayedCall is a paid mutator transaction binding the contract method 0xe06e0e22.
//
// Solidity: function postRelayedCall(bytes context, bool success, uint256 actualCharge, bytes32 preRetVal) returns()
func (_GSNRecipient *GSNRecipientTransactor) PostRelayedCall(opts *bind.TransactOpts, context []byte, success bool, actualCharge *big.Int, preRetVal [32]byte) (*types.Transaction, error) {
	return _GSNRecipient.contract.Transact(opts, "postRelayedCall", context, success, actualCharge, preRetVal)
}

// PostRelayedCall is a paid mutator transaction binding the contract method 0xe06e0e22.
//
// Solidity: function postRelayedCall(bytes context, bool success, uint256 actualCharge, bytes32 preRetVal) returns()
func (_GSNRecipient *GSNRecipientSession) PostRelayedCall(context []byte, success bool, actualCharge *big.Int, preRetVal [32]byte) (*types.Transaction, error) {
	return _GSNRecipient.Contract.PostRelayedCall(&_GSNRecipient.TransactOpts, context, success, actualCharge, preRetVal)
}

// PostRelayedCall is a paid mutator transaction binding the contract method 0xe06e0e22.
//
// Solidity: function postRelayedCall(bytes context, bool success, uint256 actualCharge, bytes32 preRetVal) returns()
func (_GSNRecipient *GSNRecipientTransactorSession) PostRelayedCall(context []byte, success bool, actualCharge *big.Int, preRetVal [32]byte) (*types.Transaction, error) {
	return _GSNRecipient.Contract.PostRelayedCall(&_GSNRecipient.TransactOpts, context, success, actualCharge, preRetVal)
}

// PreRelayedCall is a paid mutator transaction binding the contract method 0x80274db7.
//
// Solidity: function preRelayedCall(bytes context) returns(bytes32)
func (_GSNRecipient *GSNRecipientTransactor) PreRelayedCall(opts *bind.TransactOpts, context []byte) (*types.Transaction, error) {
	return _GSNRecipient.contract.Transact(opts, "preRelayedCall", context)
}

// PreRelayedCall is a paid mutator transaction binding the contract method 0x80274db7.
//
// Solidity: function preRelayedCall(bytes context) returns(bytes32)
func (_GSNRecipient *GSNRecipientSession) PreRelayedCall(context []byte) (*types.Transaction, error) {
	return _GSNRecipient.Contract.PreRelayedCall(&_GSNRecipient.TransactOpts, context)
}

// PreRelayedCall is a paid mutator transaction binding the contract method 0x80274db7.
//
// Solidity: function preRelayedCall(bytes context) returns(bytes32)
func (_GSNRecipient *GSNRecipientTransactorSession) PreRelayedCall(context []byte) (*types.Transaction, error) {
	return _GSNRecipient.Contract.PreRelayedCall(&_GSNRecipient.TransactOpts, context)
}

// SetDefaultRelayHub is a paid mutator transaction binding the contract method 0x1220e2ff.
//
// Solidity: function setDefaultRelayHub() returns()
func (_GSNRecipient *GSNRecipientTransactor) SetDefaultRelayHub(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GSNRecipient.contract.Transact(opts, "setDefaultRelayHub")
}

// SetDefaultRelayHub is a paid mutator transaction binding the contract method 0x1220e2ff.
//
// Solidity: function setDefaultRelayHub() returns()
func (_GSNRecipient *GSNRecipientSession) SetDefaultRelayHub() (*types.Transaction, error) {
	return _GSNRecipient.Contract.SetDefaultRelayHub(&_GSNRecipient.TransactOpts)
}

// SetDefaultRelayHub is a paid mutator transaction binding the contract method 0x1220e2ff.
//
// Solidity: function setDefaultRelayHub() returns()
func (_GSNRecipient *GSNRecipientTransactorSession) SetDefaultRelayHub() (*types.Transaction, error) {
	return _GSNRecipient.Contract.SetDefaultRelayHub(&_GSNRecipient.TransactOpts)
}

// GSNRecipientRelayHubChangedIterator is returned from FilterRelayHubChanged and is used to iterate over the raw logs and unpacked data for RelayHubChanged events raised by the GSNRecipient contract.
type GSNRecipientRelayHubChangedIterator struct {
	Event *GSNRecipientRelayHubChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GSNRecipientRelayHubChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GSNRecipientRelayHubChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GSNRecipientRelayHubChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GSNRecipientRelayHubChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GSNRecipientRelayHubChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GSNRecipientRelayHubChanged represents a RelayHubChanged event raised by the GSNRecipient contract.
type GSNRecipientRelayHubChanged struct {
	OldRelayHub common.Address
	NewRelayHub common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRelayHubChanged is a free log retrieval operation binding the contract event 0xb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e8.
//
// Solidity: event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub)
func (_GSNRecipient *GSNRecipientFilterer) FilterRelayHubChanged(opts *bind.FilterOpts, oldRelayHub []common.Address, newRelayHub []common.Address) (*GSNRecipientRelayHubChangedIterator, error) {

	var oldRelayHubRule []interface{}
	for _, oldRelayHubItem := range oldRelayHub {
		oldRelayHubRule = append(oldRelayHubRule, oldRelayHubItem)
	}
	var newRelayHubRule []interface{}
	for _, newRelayHubItem := range newRelayHub {
		newRelayHubRule = append(newRelayHubRule, newRelayHubItem)
	}

	logs, sub, err := _GSNRecipient.contract.FilterLogs(opts, "RelayHubChanged", oldRelayHubRule, newRelayHubRule)
	if err != nil {
		return nil, err
	}
	return &GSNRecipientRelayHubChangedIterator{contract: _GSNRecipient.contract, event: "RelayHubChanged", logs: logs, sub: sub}, nil
}

// WatchRelayHubChanged is a free log subscription operation binding the contract event 0xb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e8.
//
// Solidity: event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub)
func (_GSNRecipient *GSNRecipientFilterer) WatchRelayHubChanged(opts *bind.WatchOpts, sink chan<- *GSNRecipientRelayHubChanged, oldRelayHub []common.Address, newRelayHub []common.Address) (event.Subscription, error) {

	var oldRelayHubRule []interface{}
	for _, oldRelayHubItem := range oldRelayHub {
		oldRelayHubRule = append(oldRelayHubRule, oldRelayHubItem)
	}
	var newRelayHubRule []interface{}
	for _, newRelayHubItem := range newRelayHub {
		newRelayHubRule = append(newRelayHubRule, newRelayHubItem)
	}

	logs, sub, err := _GSNRecipient.contract.WatchLogs(opts, "RelayHubChanged", oldRelayHubRule, newRelayHubRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GSNRecipientRelayHubChanged)
				if err := _GSNRecipient.contract.UnpackLog(event, "RelayHubChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayHubChanged is a log parse operation binding the contract event 0xb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e8.
//
// Solidity: event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub)
func (_GSNRecipient *GSNRecipientFilterer) ParseRelayHubChanged(log types.Log) (*GSNRecipientRelayHubChanged, error) {
	event := new(GSNRecipientRelayHubChanged)
	if err := _GSNRecipient.contract.UnpackLog(event, "RelayHubChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GatewayRegistryABI is the input ABI used to generate the binding from.
const GatewayRegistryABI = "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_indexedSymbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gatewayContract\",\"type\":\"address\"}],\"name\":\"LogGatewayDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_indexedSymbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gatewayContract\",\"type\":\"address\"}],\"name\":\"LogGatewayRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currentGatewayContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newGatewayContract\",\"type\":\"address\"}],\"name\":\"LogGatewayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"blacklistRecoverableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"getGatewayBySymbol\",\"outputs\":[{\"internalType\":\"contractIGateway\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getGatewayByToken\",\"outputs\":[{\"internalType\":\"contractIGateway\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getGateways\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getRenTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"getTokenBySymbol\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"removeGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatewayContract\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"symbolIsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newGatewayContract\",\"type\":\"address\"}],\"name\":\"updateGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// GatewayRegistryBin is the compiled bytecode used for deploying new contracts.
var GatewayRegistryBin = "0x608060405260006068553480156200001657600080fd5b506200002d336200004960201b620013861760201c565b62000043336200011360201b62000de11760201c565b620002ce565b600054610100900460ff16806200006e57506200006e6001600160e01b03620001c616565b806200007d575060005460ff16155b620000ba5760405162461bcd60e51b815260040180806020018281038252602e81526020018062001fda602e913960400191505060405180910390fd5b600054610100900460ff16158015620000e6576000805460ff1961ff0019909116610100171660011790555b620000fc82620001cc60201b620019191760201c565b80156200010f576000805461ff00191690555b5050565b600054610100900460ff1680620001385750620001386001600160e01b03620001c616565b8062000147575060005460ff16155b620001845760405162461bcd60e51b815260040180806020018281038252602e81526020018062001fda602e913960400191505060405180910390fd5b600054610100900460ff16158015620001b0576000805460ff1961ff0019909116610100171660011790555b620000fc826200004960201b620013861760201c565b303b1590565b600054610100900460ff1680620001f15750620001f16001600160e01b03620001c616565b8062000200575060005460ff16155b6200023d5760405162461bcd60e51b815260040180806020018281038252602e81526020018062001fda602e913960400191505060405180910390fd5b600054610100900460ff1615801562000269576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156200010f576000805461ff00191690555050565b611cfc80620002de6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063b3d0403e116100a2578063e30c397811610071578063e30c397814610488578063efa74f1f14610490578063f2fde38b146104fe578063f4146ba214610524578063f65d901c1461055057610116565b8063b3d0403e14610339578063c4d66de8146103b8578063cf4f775c146103de578063d14230d61461045a57610116565b8063715018a6116100e9578063715018a6146101fb5780638028c92e146102035780638da5cb5b146102715780638f32d59b14610279578063920966a81461029557610116565b806316114acd1461011b5780631b95e305146101435780634e71e0c81461018557806364936b1e1461018d575b600080fd5b6101416004803603602081101561013157600080fd5b50356001600160a01b0316610576565b005b6101696004803603602081101561015957600080fd5b50356001600160a01b03166106e7565b604080516001600160a01b039092168252519081900360200190f35b610141610708565b610169600480360360208110156101a357600080fd5b810190602081018135600160201b8111156101bd57600080fd5b8201836020820111156101cf57600080fd5b803590602001918460018302840111600160201b831117156101f057600080fd5b509092509050610788565b6101416107d8565b6101416004803603602081101561021957600080fd5b810190602081018135600160201b81111561023357600080fd5b82018360208201111561024557600080fd5b803590602001918460018302840111600160201b8311171561026657600080fd5b509092509050610869565b610169610a37565b610281610a46565b604080519115158252519081900360200190f35b610281600480360360208110156102ab57600080fd5b810190602081018135600160201b8111156102c557600080fd5b8201836020820111156102d757600080fd5b803590602001918460018302840111600160201b831117156102f857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a6c945050505050565b6101416004803603606081101561034f57600080fd5b810190602081018135600160201b81111561036957600080fd5b82018360208201111561037b57600080fd5b803590602001918460018302840111600160201b8311171561039c57600080fd5b91935091506001600160a01b0381358116916020013516610b03565b610141600480360360208110156103ce57600080fd5b50356001600160a01b0316610de1565b61040a600480360360408110156103f457600080fd5b506001600160a01b038135169060200135610e8d565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561044657818101518382015260200161042e565b505050509050019250505060405180910390f35b6101416004803603604081101561047057600080fd5b506001600160a01b0381358116916020013516610eb1565b610169610fc4565b610169600480360360208110156104a657600080fd5b810190602081018135600160201b8111156104c057600080fd5b8201836020820111156104d257600080fd5b803590602001918460018302840111600160201b831117156104f357600080fd5b509092509050610fd3565b6101416004803603602081101561051457600080fd5b50356001600160a01b031661100d565b61040a6004803603604081101561053a57600080fd5b506001600160a01b0381351690602001356110fe565b6101416004803603602081101561056657600080fd5b50356001600160a01b0316611112565b61057e610a46565b6105bd576040805162461bcd60e51b81526020600482018190526024820152600080516020611bab833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526067602052604090205460ff16156106155760405162461bcd60e51b815260040180806020018281038252602a815260200180611b07602a913960400191505060405180910390fd5b6001600160a01b0381166106555760405133904780156108fc02916000818181858888f1935050505015801561064f573d6000803e3d6000fd5b506106e4565b604080516370a0823160e01b815230600482015290516106e49133916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156106a157600080fd5b505afa1580156106b5573d6000803e3d6000fd5b505050506040513d60208110156106cb57600080fd5b50516001600160a01b038416919063ffffffff61117d16565b50565b6001600160a01b038082166000908152606b6020526040902054165b919050565b6066546001600160a01b031661071c6111d4565b6001600160a01b0316146107615760405162461bcd60e51b815260040180806020018281038252602a815260200180611c24602a913960400191505060405180910390fd5b606654610776906001600160a01b03166111d8565b606680546001600160a01b0319169055565b6000606b6000606c8585604051808383808284379190910194855250506040805160209481900385019020546001600160a01b039081168652938501959095525050910160002054169392505050565b6107e0610a46565b61081f576040805162461bcd60e51b81526020600482018190526024820152600080516020611bab833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b610871610a46565b6108b0576040805162461bcd60e51b81526020600482018190526024820152600080516020611bab833981519152604482015290519081900360640190fd5b6000606c83836040518083838082843791909101948552505060405192839003602001909220546001600160a01b031692505050806109205760405162461bcd60e51b8152600401808060200182810382526026815260200180611c4e6026913960400191505060405180910390fd5b6001600160a01b038082166000908152606b60205260409081902080546001600160a01b031981169091559051911690606c9085908590808383808284379190910194855250506040519283900360200190922080546001600160a01b0319169055506109909050606982611279565b61099b606a83611279565b606880546000190190556040516001600160a01b038083169190841690869086908083838082843760408051939091018390038320602080855284018c905295507fea98e49727cf7c3a8c3926a036a6d41047c9b766d9109f22962950f37a2094aa94508b93508a92915081908101848480828437600083820152604051601f909101601f19169092018290039550909350505050a450505050565b6033546001600160a01b031690565b6033546000906001600160a01b0316610a5d6111d4565b6001600160a01b031614905090565b6000805b8251811015610afa576000838281518110610a8757fe5b016020015160f81c905060418110801590610aa65750605a8160ff1611155b80610ac4575060618160ff1610158015610ac45750607a8160ff1611155b80610ae2575060308160ff1610158015610ae2575060398160ff1611155b610af157600092505050610703565b50600101610a70565b50600192915050565b610b0b610a46565b610b4a576040805162461bcd60e51b81526020600482018190526024820152600080516020611bab833981519152604482015290519081900360640190fd5b610b8984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a6c92505050565b610bc45760405162461bcd60e51b815260040180806020018281038252602c815260200180611b56602c913960400191505060405180910390fd5b610bcf60698261134e565b15610c0b5760405162461bcd60e51b815260040180806020018281038252602b815260200180611bcb602b913960400191505060405180910390fd5b6001600160a01b038281166000908152606b60205260409020541615610c625760405162461bcd60e51b8152600401808060200182810382526029815260200180611b826029913960400191505060405180910390fd5b60006001600160a01b0316606c85856040518083838082843791909101948552505060405192839003602001909220546001600160a01b0316929092149150610cde90505760405162461bcd60e51b815260040180806020018281038252602a815260200180611c9e602a913960400191505060405180910390fd5b610ce960698261136d565b610cf4606a8361136d565b81606c85856040518083838082843791909101948552505060408051938490036020908101852080546001600160a01b039788166001600160a01b0319918216179091558887166000818152606b9093529290912080549688169690911686179055606880546001019055928892508791508083838082843760408051939091018390038320602080855284018c905295507fd433aae9ea620c1976ff88f75c629f477dbffe6bf277edad8a31c983117ab32a94508b93508a92915081908101848480828437600083820152604051601f909101601f19169092018290039550909350505050a450505050565b600054610100900460ff1680610dfa5750610dfa611380565b80610e08575060005460ff16155b610e435760405162461bcd60e51b815260040180806020018281038252602e815260200180611bf6602e913960400191505060405180910390fd5b600054610100900460ff16158015610e6e576000805460ff1961ff0019909116610100171660011790555b610e7782611386565b8015610e89576000805461ff00191690555b5050565b6060610eaa606a848415610ea15784610ea5565b6068545b61141c565b9392505050565b610eb9610a46565b610ef8576040805162461bcd60e51b81526020600482018190526024820152600080516020611bab833981519152604482015290519081900360640190fd5b6001600160a01b038083166000908152606b60205260409020541680610f4f5760405162461bcd60e51b8152600401808060200182810382526025815260200180611b316025913960400191505060405180910390fd5b610f5a606982611279565b610f6560698361136d565b6001600160a01b038381166000818152606b602052604080822080546001600160a01b03191687861690811790915590519093851692917f2dc9e208c924a5b14066ecb7121b371da427e696ad69456ed07a52cd2a710d9991a4505050565b6066546001600160a01b031681565b6000606c83836040518083838082843791909101948552505060405192839003602001909220546001600160a01b03169250505092915050565b611015610a46565b611054576040805162461bcd60e51b81526020600482018190526024820152600080516020611bab833981519152604482015290519081900360640190fd5b61105c610a37565b6001600160a01b0316816001600160a01b03161415801561108b57506066546001600160a01b03828116911614155b6110dc576040805162461bcd60e51b815260206004820152601c60248201527f436c61696d61626c653a20696e76616c6964206e6577206f776e657200000000604482015290519081900360640190fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6060610eaa6069848415610ea15784610ea5565b61111a610a46565b611159576040805162461bcd60e51b81526020600482018190526024820152600080516020611bab833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606760205260409020805460ff19166001179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526111cf908490611590565b505050565b3390565b6001600160a01b03811661121d5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ae16026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b611283828261134e565b6112ce576040805162461bcd60e51b8152602060048201526017602482015276131a5b9ad959131a5cdd0e881b9bdd081a5b881b1a5cdd604a1b604482015290519081900360640190fd5b6001600160a01b0390811660008181526020939093526040808420805460018083018054610100938490048816808a52868a209093018054919098166001600160a01b031991821681179098559688529387208054610100600160a81b031916919092021790559190935280546001600160a81b03191690558154169055565b6001600160a01b03166000908152602091909152604090205460ff1690565b610e898261137a8461174e565b83611770565b303b1590565b600054610100900460ff168061139f575061139f611380565b806113ad575060005460ff16155b6113e85760405162461bcd60e51b815260040180806020018281038252602e815260200180611bf6602e913960400191505060405180910390fd5b600054610100900460ff16158015611413576000805460ff1961ff0019909116610100171660011790555b610e7782611919565b606060008211611473576040805162461bcd60e51b815260206004820152601960248201527f4c696e6b65644c6973743a20696e76616c696420636f756e7400000000000000604482015290519081900360640190fd5b61147d848461134e565b8061148f57506001600160a01b038316155b6114da576040805162461bcd60e51b8152602060048201526017602482015276131a5b9ad959131a5cdd0e881b9bdd081a5b881b1a5cdd604a1b604482015290519081900360640190fd5b606082604051908082528060200260200182016040528015611506578160200160208202803883390190505b5090506000846001600160a01b0381166115265761152387611a0a565b90505b84821015611585576001600160a01b03811661154157611585565b8083838151811061154e57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506115788782611a29565b9050600182019150611526565b509095945050505050565b6115a2826001600160a01b0316611aa4565b6115f3576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106116315780518252601f199092019160209182019101611612565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611693576040519150601f19603f3d011682016040523d82523d6000602084013e611698565b606091505b5091509150816116ef576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156117485780806020019051602081101561170b57600080fd5b50516117485760405162461bcd60e51b815260040180806020018281038252602a815260200180611c74602a913960400191505060405180910390fd5b50505050565b60008080526020829052604090205461010090046001600160a01b0316919050565b6001600160a01b0381166117cb576040805162461bcd60e51b815260206004820152601b60248201527f4c696e6b65644c6973743a20696e76616c696420616464726573730000000000604482015290519081900360640190fd5b6117d5838261134e565b15611827576040805162461bcd60e51b815260206004820152601b60248201527f4c696e6b65644c6973743a20616c726561647920696e206c6973740000000000604482015290519081900360640190fd5b611831838361134e565b8061184357506001600160a01b038216155b61188e576040805162461bcd60e51b8152602060048201526017602482015276131a5b9ad959131a5cdd0e881b9bdd081a5b881b1a5cdd604a1b604482015290519081900360640190fd5b6001600160a01b0391821660008181526020949094526040808520600190810180549486168088528388208054610100600160a81b03199081166101009788021782558185018054989099166001600160a01b031998891681179099558354909716821790925595875291862080549094169285029290921790925591909252815460ff1916179055565b600054610100900460ff16806119325750611932611380565b80611940575060005460ff16155b61197b5760405162461bcd60e51b815260040180806020018281038252602e815260200180611bf6602e913960400191505060405180910390fd5b600054610100900460ff161580156119a6576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610e89576000805461ff00191690555050565b600080805260209190915260409020600101546001600160a01b031690565b6000611a35838361134e565b611a80576040805162461bcd60e51b8152602060048201526017602482015276131a5b9ad959131a5cdd0e881b9bdd081a5b881b1a5cdd604a1b604482015290519081900360640190fd5b506001600160a01b0390811660009081526020929092526040909120600101541690565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611ad857508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737343616e5265636c61696d546f6b656e733a20746f6b656e206973206e6f74207265636f76657261626c654761746577617952656769737472793a20746f6b656e206e6f7420726567697374657265644761746577617952656769737472793a2073796d626f6c206d75737420626520616c7068616e756d657269634761746577617952656769737472793a20746f6b656e20616c726561647920726567697374657265644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724761746577617952656769737472793a206761746577617920616c72656164792072656769737465726564436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564436c61696d61626c653a2063616c6c6572206973206e6f74207468652070656e64696e67206f776e65724761746577617952656769737472793a2073796d626f6c206e6f7420726567697374657265645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644761746577617952656769737472793a2073796d626f6c20616c72656164792072656769737465726564a265627a7a7231582025db6fdb3642f00de2176c0ced192522bc7f5f4a6f97153f70be9763d05d672c64736f6c63430005100032436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564"

// DeployGatewayRegistry deploys a new Ethereum contract, binding an instance of GatewayRegistry to it.
func DeployGatewayRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GatewayRegistry, error) {
	parsed, err := abi.JSON(strings.NewReader(GatewayRegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(GatewayRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GatewayRegistry{GatewayRegistryCaller: GatewayRegistryCaller{contract: contract}, GatewayRegistryTransactor: GatewayRegistryTransactor{contract: contract}, GatewayRegistryFilterer: GatewayRegistryFilterer{contract: contract}}, nil
}

// GatewayRegistry is an auto generated Go binding around an Ethereum contract.
type GatewayRegistry struct {
	GatewayRegistryCaller     // Read-only binding to the contract
	GatewayRegistryTransactor // Write-only binding to the contract
	GatewayRegistryFilterer   // Log filterer for contract events
}

// GatewayRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type GatewayRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GatewayRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GatewayRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GatewayRegistrySession struct {
	Contract     *GatewayRegistry  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GatewayRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GatewayRegistryCallerSession struct {
	Contract *GatewayRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// GatewayRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GatewayRegistryTransactorSession struct {
	Contract     *GatewayRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// GatewayRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type GatewayRegistryRaw struct {
	Contract *GatewayRegistry // Generic contract binding to access the raw methods on
}

// GatewayRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GatewayRegistryCallerRaw struct {
	Contract *GatewayRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// GatewayRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GatewayRegistryTransactorRaw struct {
	Contract *GatewayRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGatewayRegistry creates a new instance of GatewayRegistry, bound to a specific deployed contract.
func NewGatewayRegistry(address common.Address, backend bind.ContractBackend) (*GatewayRegistry, error) {
	contract, err := bindGatewayRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GatewayRegistry{GatewayRegistryCaller: GatewayRegistryCaller{contract: contract}, GatewayRegistryTransactor: GatewayRegistryTransactor{contract: contract}, GatewayRegistryFilterer: GatewayRegistryFilterer{contract: contract}}, nil
}

// NewGatewayRegistryCaller creates a new read-only instance of GatewayRegistry, bound to a specific deployed contract.
func NewGatewayRegistryCaller(address common.Address, caller bind.ContractCaller) (*GatewayRegistryCaller, error) {
	contract, err := bindGatewayRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayRegistryCaller{contract: contract}, nil
}

// NewGatewayRegistryTransactor creates a new write-only instance of GatewayRegistry, bound to a specific deployed contract.
func NewGatewayRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*GatewayRegistryTransactor, error) {
	contract, err := bindGatewayRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayRegistryTransactor{contract: contract}, nil
}

// NewGatewayRegistryFilterer creates a new log filterer instance of GatewayRegistry, bound to a specific deployed contract.
func NewGatewayRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*GatewayRegistryFilterer, error) {
	contract, err := bindGatewayRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GatewayRegistryFilterer{contract: contract}, nil
}

// bindGatewayRegistry binds a generic wrapper to an already deployed contract.
func bindGatewayRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GatewayRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GatewayRegistry *GatewayRegistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GatewayRegistry.Contract.GatewayRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GatewayRegistry *GatewayRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.GatewayRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GatewayRegistry *GatewayRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.GatewayRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GatewayRegistry *GatewayRegistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GatewayRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GatewayRegistry *GatewayRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GatewayRegistry *GatewayRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.contract.Transact(opts, method, params...)
}

// GetGatewayBySymbol is a free data retrieval call binding the contract method 0x64936b1e.
//
// Solidity: function getGatewayBySymbol(string _tokenSymbol) view returns(address)
func (_GatewayRegistry *GatewayRegistryCaller) GetGatewayBySymbol(opts *bind.CallOpts, _tokenSymbol string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GatewayRegistry.contract.Call(opts, out, "getGatewayBySymbol", _tokenSymbol)
	return *ret0, err
}

// GetGatewayBySymbol is a free data retrieval call binding the contract method 0x64936b1e.
//
// Solidity: function getGatewayBySymbol(string _tokenSymbol) view returns(address)
func (_GatewayRegistry *GatewayRegistrySession) GetGatewayBySymbol(_tokenSymbol string) (common.Address, error) {
	return _GatewayRegistry.Contract.GetGatewayBySymbol(&_GatewayRegistry.CallOpts, _tokenSymbol)
}

// GetGatewayBySymbol is a free data retrieval call binding the contract method 0x64936b1e.
//
// Solidity: function getGatewayBySymbol(string _tokenSymbol) view returns(address)
func (_GatewayRegistry *GatewayRegistryCallerSession) GetGatewayBySymbol(_tokenSymbol string) (common.Address, error) {
	return _GatewayRegistry.Contract.GetGatewayBySymbol(&_GatewayRegistry.CallOpts, _tokenSymbol)
}

// GetGatewayByToken is a free data retrieval call binding the contract method 0x1b95e305.
//
// Solidity: function getGatewayByToken(address _token) view returns(address)
func (_GatewayRegistry *GatewayRegistryCaller) GetGatewayByToken(opts *bind.CallOpts, _token common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GatewayRegistry.contract.Call(opts, out, "getGatewayByToken", _token)
	return *ret0, err
}

// GetGatewayByToken is a free data retrieval call binding the contract method 0x1b95e305.
//
// Solidity: function getGatewayByToken(address _token) view returns(address)
func (_GatewayRegistry *GatewayRegistrySession) GetGatewayByToken(_token common.Address) (common.Address, error) {
	return _GatewayRegistry.Contract.GetGatewayByToken(&_GatewayRegistry.CallOpts, _token)
}

// GetGatewayByToken is a free data retrieval call binding the contract method 0x1b95e305.
//
// Solidity: function getGatewayByToken(address _token) view returns(address)
func (_GatewayRegistry *GatewayRegistryCallerSession) GetGatewayByToken(_token common.Address) (common.Address, error) {
	return _GatewayRegistry.Contract.GetGatewayByToken(&_GatewayRegistry.CallOpts, _token)
}

// GetGateways is a free data retrieval call binding the contract method 0xf4146ba2.
//
// Solidity: function getGateways(address _start, uint256 _count) view returns(address[])
func (_GatewayRegistry *GatewayRegistryCaller) GetGateways(opts *bind.CallOpts, _start common.Address, _count *big.Int) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _GatewayRegistry.contract.Call(opts, out, "getGateways", _start, _count)
	return *ret0, err
}

// GetGateways is a free data retrieval call binding the contract method 0xf4146ba2.
//
// Solidity: function getGateways(address _start, uint256 _count) view returns(address[])
func (_GatewayRegistry *GatewayRegistrySession) GetGateways(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _GatewayRegistry.Contract.GetGateways(&_GatewayRegistry.CallOpts, _start, _count)
}

// GetGateways is a free data retrieval call binding the contract method 0xf4146ba2.
//
// Solidity: function getGateways(address _start, uint256 _count) view returns(address[])
func (_GatewayRegistry *GatewayRegistryCallerSession) GetGateways(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _GatewayRegistry.Contract.GetGateways(&_GatewayRegistry.CallOpts, _start, _count)
}

// GetRenTokens is a free data retrieval call binding the contract method 0xcf4f775c.
//
// Solidity: function getRenTokens(address _start, uint256 _count) view returns(address[])
func (_GatewayRegistry *GatewayRegistryCaller) GetRenTokens(opts *bind.CallOpts, _start common.Address, _count *big.Int) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _GatewayRegistry.contract.Call(opts, out, "getRenTokens", _start, _count)
	return *ret0, err
}

// GetRenTokens is a free data retrieval call binding the contract method 0xcf4f775c.
//
// Solidity: function getRenTokens(address _start, uint256 _count) view returns(address[])
func (_GatewayRegistry *GatewayRegistrySession) GetRenTokens(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _GatewayRegistry.Contract.GetRenTokens(&_GatewayRegistry.CallOpts, _start, _count)
}

// GetRenTokens is a free data retrieval call binding the contract method 0xcf4f775c.
//
// Solidity: function getRenTokens(address _start, uint256 _count) view returns(address[])
func (_GatewayRegistry *GatewayRegistryCallerSession) GetRenTokens(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _GatewayRegistry.Contract.GetRenTokens(&_GatewayRegistry.CallOpts, _start, _count)
}

// GetTokenBySymbol is a free data retrieval call binding the contract method 0xefa74f1f.
//
// Solidity: function getTokenBySymbol(string _tokenSymbol) view returns(address)
func (_GatewayRegistry *GatewayRegistryCaller) GetTokenBySymbol(opts *bind.CallOpts, _tokenSymbol string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GatewayRegistry.contract.Call(opts, out, "getTokenBySymbol", _tokenSymbol)
	return *ret0, err
}

// GetTokenBySymbol is a free data retrieval call binding the contract method 0xefa74f1f.
//
// Solidity: function getTokenBySymbol(string _tokenSymbol) view returns(address)
func (_GatewayRegistry *GatewayRegistrySession) GetTokenBySymbol(_tokenSymbol string) (common.Address, error) {
	return _GatewayRegistry.Contract.GetTokenBySymbol(&_GatewayRegistry.CallOpts, _tokenSymbol)
}

// GetTokenBySymbol is a free data retrieval call binding the contract method 0xefa74f1f.
//
// Solidity: function getTokenBySymbol(string _tokenSymbol) view returns(address)
func (_GatewayRegistry *GatewayRegistryCallerSession) GetTokenBySymbol(_tokenSymbol string) (common.Address, error) {
	return _GatewayRegistry.Contract.GetTokenBySymbol(&_GatewayRegistry.CallOpts, _tokenSymbol)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_GatewayRegistry *GatewayRegistryCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _GatewayRegistry.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_GatewayRegistry *GatewayRegistrySession) IsOwner() (bool, error) {
	return _GatewayRegistry.Contract.IsOwner(&_GatewayRegistry.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_GatewayRegistry *GatewayRegistryCallerSession) IsOwner() (bool, error) {
	return _GatewayRegistry.Contract.IsOwner(&_GatewayRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_GatewayRegistry *GatewayRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GatewayRegistry.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_GatewayRegistry *GatewayRegistrySession) Owner() (common.Address, error) {
	return _GatewayRegistry.Contract.Owner(&_GatewayRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_GatewayRegistry *GatewayRegistryCallerSession) Owner() (common.Address, error) {
	return _GatewayRegistry.Contract.Owner(&_GatewayRegistry.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_GatewayRegistry *GatewayRegistryCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GatewayRegistry.contract.Call(opts, out, "pendingOwner")
	return *ret0, err
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_GatewayRegistry *GatewayRegistrySession) PendingOwner() (common.Address, error) {
	return _GatewayRegistry.Contract.PendingOwner(&_GatewayRegistry.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_GatewayRegistry *GatewayRegistryCallerSession) PendingOwner() (common.Address, error) {
	return _GatewayRegistry.Contract.PendingOwner(&_GatewayRegistry.CallOpts)
}

// SymbolIsValid is a free data retrieval call binding the contract method 0x920966a8.
//
// Solidity: function symbolIsValid(string _tokenSymbol) pure returns(bool)
func (_GatewayRegistry *GatewayRegistryCaller) SymbolIsValid(opts *bind.CallOpts, _tokenSymbol string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _GatewayRegistry.contract.Call(opts, out, "symbolIsValid", _tokenSymbol)
	return *ret0, err
}

// SymbolIsValid is a free data retrieval call binding the contract method 0x920966a8.
//
// Solidity: function symbolIsValid(string _tokenSymbol) pure returns(bool)
func (_GatewayRegistry *GatewayRegistrySession) SymbolIsValid(_tokenSymbol string) (bool, error) {
	return _GatewayRegistry.Contract.SymbolIsValid(&_GatewayRegistry.CallOpts, _tokenSymbol)
}

// SymbolIsValid is a free data retrieval call binding the contract method 0x920966a8.
//
// Solidity: function symbolIsValid(string _tokenSymbol) pure returns(bool)
func (_GatewayRegistry *GatewayRegistryCallerSession) SymbolIsValid(_tokenSymbol string) (bool, error) {
	return _GatewayRegistry.Contract.SymbolIsValid(&_GatewayRegistry.CallOpts, _tokenSymbol)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_GatewayRegistry *GatewayRegistryTransactor) BlacklistRecoverableToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.contract.Transact(opts, "blacklistRecoverableToken", _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_GatewayRegistry *GatewayRegistrySession) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.BlacklistRecoverableToken(&_GatewayRegistry.TransactOpts, _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_GatewayRegistry *GatewayRegistryTransactorSession) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.BlacklistRecoverableToken(&_GatewayRegistry.TransactOpts, _token)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_GatewayRegistry *GatewayRegistryTransactor) ClaimOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GatewayRegistry.contract.Transact(opts, "claimOwnership")
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_GatewayRegistry *GatewayRegistrySession) ClaimOwnership() (*types.Transaction, error) {
	return _GatewayRegistry.Contract.ClaimOwnership(&_GatewayRegistry.TransactOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_GatewayRegistry *GatewayRegistryTransactorSession) ClaimOwnership() (*types.Transaction, error) {
	return _GatewayRegistry.Contract.ClaimOwnership(&_GatewayRegistry.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_GatewayRegistry *GatewayRegistryTransactor) Initialize(opts *bind.TransactOpts, _nextOwner common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.contract.Transact(opts, "initialize", _nextOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_GatewayRegistry *GatewayRegistrySession) Initialize(_nextOwner common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.Initialize(&_GatewayRegistry.TransactOpts, _nextOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_GatewayRegistry *GatewayRegistryTransactorSession) Initialize(_nextOwner common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.Initialize(&_GatewayRegistry.TransactOpts, _nextOwner)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_GatewayRegistry *GatewayRegistryTransactor) RecoverTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.contract.Transact(opts, "recoverTokens", _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_GatewayRegistry *GatewayRegistrySession) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.RecoverTokens(&_GatewayRegistry.TransactOpts, _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_GatewayRegistry *GatewayRegistryTransactorSession) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.RecoverTokens(&_GatewayRegistry.TransactOpts, _token)
}

// RemoveGateway is a paid mutator transaction binding the contract method 0x8028c92e.
//
// Solidity: function removeGateway(string _symbol) returns()
func (_GatewayRegistry *GatewayRegistryTransactor) RemoveGateway(opts *bind.TransactOpts, _symbol string) (*types.Transaction, error) {
	return _GatewayRegistry.contract.Transact(opts, "removeGateway", _symbol)
}

// RemoveGateway is a paid mutator transaction binding the contract method 0x8028c92e.
//
// Solidity: function removeGateway(string _symbol) returns()
func (_GatewayRegistry *GatewayRegistrySession) RemoveGateway(_symbol string) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.RemoveGateway(&_GatewayRegistry.TransactOpts, _symbol)
}

// RemoveGateway is a paid mutator transaction binding the contract method 0x8028c92e.
//
// Solidity: function removeGateway(string _symbol) returns()
func (_GatewayRegistry *GatewayRegistryTransactorSession) RemoveGateway(_symbol string) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.RemoveGateway(&_GatewayRegistry.TransactOpts, _symbol)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_GatewayRegistry *GatewayRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GatewayRegistry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_GatewayRegistry *GatewayRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _GatewayRegistry.Contract.RenounceOwnership(&_GatewayRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_GatewayRegistry *GatewayRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _GatewayRegistry.Contract.RenounceOwnership(&_GatewayRegistry.TransactOpts)
}

// SetGateway is a paid mutator transaction binding the contract method 0xb3d0403e.
//
// Solidity: function setGateway(string _symbol, address _token, address _gatewayContract) returns()
func (_GatewayRegistry *GatewayRegistryTransactor) SetGateway(opts *bind.TransactOpts, _symbol string, _token common.Address, _gatewayContract common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.contract.Transact(opts, "setGateway", _symbol, _token, _gatewayContract)
}

// SetGateway is a paid mutator transaction binding the contract method 0xb3d0403e.
//
// Solidity: function setGateway(string _symbol, address _token, address _gatewayContract) returns()
func (_GatewayRegistry *GatewayRegistrySession) SetGateway(_symbol string, _token common.Address, _gatewayContract common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.SetGateway(&_GatewayRegistry.TransactOpts, _symbol, _token, _gatewayContract)
}

// SetGateway is a paid mutator transaction binding the contract method 0xb3d0403e.
//
// Solidity: function setGateway(string _symbol, address _token, address _gatewayContract) returns()
func (_GatewayRegistry *GatewayRegistryTransactorSession) SetGateway(_symbol string, _token common.Address, _gatewayContract common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.SetGateway(&_GatewayRegistry.TransactOpts, _symbol, _token, _gatewayContract)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_GatewayRegistry *GatewayRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_GatewayRegistry *GatewayRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.TransferOwnership(&_GatewayRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_GatewayRegistry *GatewayRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.TransferOwnership(&_GatewayRegistry.TransactOpts, newOwner)
}

// UpdateGateway is a paid mutator transaction binding the contract method 0xd14230d6.
//
// Solidity: function updateGateway(address _token, address _newGatewayContract) returns()
func (_GatewayRegistry *GatewayRegistryTransactor) UpdateGateway(opts *bind.TransactOpts, _token common.Address, _newGatewayContract common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.contract.Transact(opts, "updateGateway", _token, _newGatewayContract)
}

// UpdateGateway is a paid mutator transaction binding the contract method 0xd14230d6.
//
// Solidity: function updateGateway(address _token, address _newGatewayContract) returns()
func (_GatewayRegistry *GatewayRegistrySession) UpdateGateway(_token common.Address, _newGatewayContract common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.UpdateGateway(&_GatewayRegistry.TransactOpts, _token, _newGatewayContract)
}

// UpdateGateway is a paid mutator transaction binding the contract method 0xd14230d6.
//
// Solidity: function updateGateway(address _token, address _newGatewayContract) returns()
func (_GatewayRegistry *GatewayRegistryTransactorSession) UpdateGateway(_token common.Address, _newGatewayContract common.Address) (*types.Transaction, error) {
	return _GatewayRegistry.Contract.UpdateGateway(&_GatewayRegistry.TransactOpts, _token, _newGatewayContract)
}

// GatewayRegistryLogGatewayDeregisteredIterator is returned from FilterLogGatewayDeregistered and is used to iterate over the raw logs and unpacked data for LogGatewayDeregistered events raised by the GatewayRegistry contract.
type GatewayRegistryLogGatewayDeregisteredIterator struct {
	Event *GatewayRegistryLogGatewayDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayRegistryLogGatewayDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayRegistryLogGatewayDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayRegistryLogGatewayDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayRegistryLogGatewayDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayRegistryLogGatewayDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayRegistryLogGatewayDeregistered represents a LogGatewayDeregistered event raised by the GatewayRegistry contract.
type GatewayRegistryLogGatewayDeregistered struct {
	Symbol          string
	IndexedSymbol   common.Hash
	Token           common.Address
	GatewayContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterLogGatewayDeregistered is a free log retrieval operation binding the contract event 0xea98e49727cf7c3a8c3926a036a6d41047c9b766d9109f22962950f37a2094aa.
//
// Solidity: event LogGatewayDeregistered(string _symbol, string indexed _indexedSymbol, address indexed _token, address indexed _gatewayContract)
func (_GatewayRegistry *GatewayRegistryFilterer) FilterLogGatewayDeregistered(opts *bind.FilterOpts, _indexedSymbol []string, _token []common.Address, _gatewayContract []common.Address) (*GatewayRegistryLogGatewayDeregisteredIterator, error) {

	var _indexedSymbolRule []interface{}
	for _, _indexedSymbolItem := range _indexedSymbol {
		_indexedSymbolRule = append(_indexedSymbolRule, _indexedSymbolItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}
	var _gatewayContractRule []interface{}
	for _, _gatewayContractItem := range _gatewayContract {
		_gatewayContractRule = append(_gatewayContractRule, _gatewayContractItem)
	}

	logs, sub, err := _GatewayRegistry.contract.FilterLogs(opts, "LogGatewayDeregistered", _indexedSymbolRule, _tokenRule, _gatewayContractRule)
	if err != nil {
		return nil, err
	}
	return &GatewayRegistryLogGatewayDeregisteredIterator{contract: _GatewayRegistry.contract, event: "LogGatewayDeregistered", logs: logs, sub: sub}, nil
}

// WatchLogGatewayDeregistered is a free log subscription operation binding the contract event 0xea98e49727cf7c3a8c3926a036a6d41047c9b766d9109f22962950f37a2094aa.
//
// Solidity: event LogGatewayDeregistered(string _symbol, string indexed _indexedSymbol, address indexed _token, address indexed _gatewayContract)
func (_GatewayRegistry *GatewayRegistryFilterer) WatchLogGatewayDeregistered(opts *bind.WatchOpts, sink chan<- *GatewayRegistryLogGatewayDeregistered, _indexedSymbol []string, _token []common.Address, _gatewayContract []common.Address) (event.Subscription, error) {

	var _indexedSymbolRule []interface{}
	for _, _indexedSymbolItem := range _indexedSymbol {
		_indexedSymbolRule = append(_indexedSymbolRule, _indexedSymbolItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}
	var _gatewayContractRule []interface{}
	for _, _gatewayContractItem := range _gatewayContract {
		_gatewayContractRule = append(_gatewayContractRule, _gatewayContractItem)
	}

	logs, sub, err := _GatewayRegistry.contract.WatchLogs(opts, "LogGatewayDeregistered", _indexedSymbolRule, _tokenRule, _gatewayContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayRegistryLogGatewayDeregistered)
				if err := _GatewayRegistry.contract.UnpackLog(event, "LogGatewayDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogGatewayDeregistered is a log parse operation binding the contract event 0xea98e49727cf7c3a8c3926a036a6d41047c9b766d9109f22962950f37a2094aa.
//
// Solidity: event LogGatewayDeregistered(string _symbol, string indexed _indexedSymbol, address indexed _token, address indexed _gatewayContract)
func (_GatewayRegistry *GatewayRegistryFilterer) ParseLogGatewayDeregistered(log types.Log) (*GatewayRegistryLogGatewayDeregistered, error) {
	event := new(GatewayRegistryLogGatewayDeregistered)
	if err := _GatewayRegistry.contract.UnpackLog(event, "LogGatewayDeregistered", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GatewayRegistryLogGatewayRegisteredIterator is returned from FilterLogGatewayRegistered and is used to iterate over the raw logs and unpacked data for LogGatewayRegistered events raised by the GatewayRegistry contract.
type GatewayRegistryLogGatewayRegisteredIterator struct {
	Event *GatewayRegistryLogGatewayRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayRegistryLogGatewayRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayRegistryLogGatewayRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayRegistryLogGatewayRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayRegistryLogGatewayRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayRegistryLogGatewayRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayRegistryLogGatewayRegistered represents a LogGatewayRegistered event raised by the GatewayRegistry contract.
type GatewayRegistryLogGatewayRegistered struct {
	Symbol          string
	IndexedSymbol   common.Hash
	Token           common.Address
	GatewayContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterLogGatewayRegistered is a free log retrieval operation binding the contract event 0xd433aae9ea620c1976ff88f75c629f477dbffe6bf277edad8a31c983117ab32a.
//
// Solidity: event LogGatewayRegistered(string _symbol, string indexed _indexedSymbol, address indexed _token, address indexed _gatewayContract)
func (_GatewayRegistry *GatewayRegistryFilterer) FilterLogGatewayRegistered(opts *bind.FilterOpts, _indexedSymbol []string, _token []common.Address, _gatewayContract []common.Address) (*GatewayRegistryLogGatewayRegisteredIterator, error) {

	var _indexedSymbolRule []interface{}
	for _, _indexedSymbolItem := range _indexedSymbol {
		_indexedSymbolRule = append(_indexedSymbolRule, _indexedSymbolItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}
	var _gatewayContractRule []interface{}
	for _, _gatewayContractItem := range _gatewayContract {
		_gatewayContractRule = append(_gatewayContractRule, _gatewayContractItem)
	}

	logs, sub, err := _GatewayRegistry.contract.FilterLogs(opts, "LogGatewayRegistered", _indexedSymbolRule, _tokenRule, _gatewayContractRule)
	if err != nil {
		return nil, err
	}
	return &GatewayRegistryLogGatewayRegisteredIterator{contract: _GatewayRegistry.contract, event: "LogGatewayRegistered", logs: logs, sub: sub}, nil
}

// WatchLogGatewayRegistered is a free log subscription operation binding the contract event 0xd433aae9ea620c1976ff88f75c629f477dbffe6bf277edad8a31c983117ab32a.
//
// Solidity: event LogGatewayRegistered(string _symbol, string indexed _indexedSymbol, address indexed _token, address indexed _gatewayContract)
func (_GatewayRegistry *GatewayRegistryFilterer) WatchLogGatewayRegistered(opts *bind.WatchOpts, sink chan<- *GatewayRegistryLogGatewayRegistered, _indexedSymbol []string, _token []common.Address, _gatewayContract []common.Address) (event.Subscription, error) {

	var _indexedSymbolRule []interface{}
	for _, _indexedSymbolItem := range _indexedSymbol {
		_indexedSymbolRule = append(_indexedSymbolRule, _indexedSymbolItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}
	var _gatewayContractRule []interface{}
	for _, _gatewayContractItem := range _gatewayContract {
		_gatewayContractRule = append(_gatewayContractRule, _gatewayContractItem)
	}

	logs, sub, err := _GatewayRegistry.contract.WatchLogs(opts, "LogGatewayRegistered", _indexedSymbolRule, _tokenRule, _gatewayContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayRegistryLogGatewayRegistered)
				if err := _GatewayRegistry.contract.UnpackLog(event, "LogGatewayRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogGatewayRegistered is a log parse operation binding the contract event 0xd433aae9ea620c1976ff88f75c629f477dbffe6bf277edad8a31c983117ab32a.
//
// Solidity: event LogGatewayRegistered(string _symbol, string indexed _indexedSymbol, address indexed _token, address indexed _gatewayContract)
func (_GatewayRegistry *GatewayRegistryFilterer) ParseLogGatewayRegistered(log types.Log) (*GatewayRegistryLogGatewayRegistered, error) {
	event := new(GatewayRegistryLogGatewayRegistered)
	if err := _GatewayRegistry.contract.UnpackLog(event, "LogGatewayRegistered", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GatewayRegistryLogGatewayUpdatedIterator is returned from FilterLogGatewayUpdated and is used to iterate over the raw logs and unpacked data for LogGatewayUpdated events raised by the GatewayRegistry contract.
type GatewayRegistryLogGatewayUpdatedIterator struct {
	Event *GatewayRegistryLogGatewayUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayRegistryLogGatewayUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayRegistryLogGatewayUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayRegistryLogGatewayUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayRegistryLogGatewayUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayRegistryLogGatewayUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayRegistryLogGatewayUpdated represents a LogGatewayUpdated event raised by the GatewayRegistry contract.
type GatewayRegistryLogGatewayUpdated struct {
	Token                  common.Address
	CurrentGatewayContract common.Address
	NewGatewayContract     common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterLogGatewayUpdated is a free log retrieval operation binding the contract event 0x2dc9e208c924a5b14066ecb7121b371da427e696ad69456ed07a52cd2a710d99.
//
// Solidity: event LogGatewayUpdated(address indexed _token, address indexed _currentGatewayContract, address indexed _newGatewayContract)
func (_GatewayRegistry *GatewayRegistryFilterer) FilterLogGatewayUpdated(opts *bind.FilterOpts, _token []common.Address, _currentGatewayContract []common.Address, _newGatewayContract []common.Address) (*GatewayRegistryLogGatewayUpdatedIterator, error) {

	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}
	var _currentGatewayContractRule []interface{}
	for _, _currentGatewayContractItem := range _currentGatewayContract {
		_currentGatewayContractRule = append(_currentGatewayContractRule, _currentGatewayContractItem)
	}
	var _newGatewayContractRule []interface{}
	for _, _newGatewayContractItem := range _newGatewayContract {
		_newGatewayContractRule = append(_newGatewayContractRule, _newGatewayContractItem)
	}

	logs, sub, err := _GatewayRegistry.contract.FilterLogs(opts, "LogGatewayUpdated", _tokenRule, _currentGatewayContractRule, _newGatewayContractRule)
	if err != nil {
		return nil, err
	}
	return &GatewayRegistryLogGatewayUpdatedIterator{contract: _GatewayRegistry.contract, event: "LogGatewayUpdated", logs: logs, sub: sub}, nil
}

// WatchLogGatewayUpdated is a free log subscription operation binding the contract event 0x2dc9e208c924a5b14066ecb7121b371da427e696ad69456ed07a52cd2a710d99.
//
// Solidity: event LogGatewayUpdated(address indexed _token, address indexed _currentGatewayContract, address indexed _newGatewayContract)
func (_GatewayRegistry *GatewayRegistryFilterer) WatchLogGatewayUpdated(opts *bind.WatchOpts, sink chan<- *GatewayRegistryLogGatewayUpdated, _token []common.Address, _currentGatewayContract []common.Address, _newGatewayContract []common.Address) (event.Subscription, error) {

	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}
	var _currentGatewayContractRule []interface{}
	for _, _currentGatewayContractItem := range _currentGatewayContract {
		_currentGatewayContractRule = append(_currentGatewayContractRule, _currentGatewayContractItem)
	}
	var _newGatewayContractRule []interface{}
	for _, _newGatewayContractItem := range _newGatewayContract {
		_newGatewayContractRule = append(_newGatewayContractRule, _newGatewayContractItem)
	}

	logs, sub, err := _GatewayRegistry.contract.WatchLogs(opts, "LogGatewayUpdated", _tokenRule, _currentGatewayContractRule, _newGatewayContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayRegistryLogGatewayUpdated)
				if err := _GatewayRegistry.contract.UnpackLog(event, "LogGatewayUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogGatewayUpdated is a log parse operation binding the contract event 0x2dc9e208c924a5b14066ecb7121b371da427e696ad69456ed07a52cd2a710d99.
//
// Solidity: event LogGatewayUpdated(address indexed _token, address indexed _currentGatewayContract, address indexed _newGatewayContract)
func (_GatewayRegistry *GatewayRegistryFilterer) ParseLogGatewayUpdated(log types.Log) (*GatewayRegistryLogGatewayUpdated, error) {
	event := new(GatewayRegistryLogGatewayUpdated)
	if err := _GatewayRegistry.contract.UnpackLog(event, "LogGatewayUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GatewayRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the GatewayRegistry contract.
type GatewayRegistryOwnershipTransferredIterator struct {
	Event *GatewayRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GatewayRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GatewayRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GatewayRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GatewayRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GatewayRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GatewayRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the GatewayRegistry contract.
type GatewayRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_GatewayRegistry *GatewayRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GatewayRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _GatewayRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GatewayRegistryOwnershipTransferredIterator{contract: _GatewayRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_GatewayRegistry *GatewayRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GatewayRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _GatewayRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GatewayRegistryOwnershipTransferred)
				if err := _GatewayRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_GatewayRegistry *GatewayRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*GatewayRegistryOwnershipTransferred, error) {
	event := new(GatewayRegistryOwnershipTransferred)
	if err := _GatewayRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GatewayStateV1ABI is the input ABI used to generate the binding from.
const GatewayStateV1ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractRenERC20LogicV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// GatewayStateV1Bin is the compiled bytecode used for deploying new contracts.
var GatewayStateV1Bin = "0x6080604052600060055534801561001557600080fd5b506101e0806100256000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806394c238ac1161005b57806394c238ac14610109578063aa4df9ad14610123578063fc0c546a1461012b578063fce589d81461013357610088565b806313966db51461008d57806346904840146100ac57806352ad0d5e146100d05780639340b21e14610101575b600080fd5b61009561013b565b6040805161ffff9092168252519081900360200190f35b6100b461014c565b604080516001600160a01b039092168252519081900360200190f35b6100ed600480360360208110156100e657600080fd5b503561015b565b604080519115158252519081900360200190f35b6100b4610170565b61011161017f565b60408051918252519081900360200190f35b610111610185565b6100b461018b565b61009561019a565b600354600160a01b900461ffff1681565b6003546001600160a01b031681565b60046020526000908152604090205460ff1681565b6002546001600160a01b031681565b60005481565b60055481565b6001546001600160a01b031681565b600354600160b01b900461ffff168156fea265627a7a723158207965ac49d520cf4596c956b875ac26f7f2e276941e2f397159fbd7bc7a5f85dc64736f6c63430005100032"

// DeployGatewayStateV1 deploys a new Ethereum contract, binding an instance of GatewayStateV1 to it.
func DeployGatewayStateV1(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GatewayStateV1, error) {
	parsed, err := abi.JSON(strings.NewReader(GatewayStateV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(GatewayStateV1Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GatewayStateV1{GatewayStateV1Caller: GatewayStateV1Caller{contract: contract}, GatewayStateV1Transactor: GatewayStateV1Transactor{contract: contract}, GatewayStateV1Filterer: GatewayStateV1Filterer{contract: contract}}, nil
}

// GatewayStateV1 is an auto generated Go binding around an Ethereum contract.
type GatewayStateV1 struct {
	GatewayStateV1Caller     // Read-only binding to the contract
	GatewayStateV1Transactor // Write-only binding to the contract
	GatewayStateV1Filterer   // Log filterer for contract events
}

// GatewayStateV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type GatewayStateV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayStateV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type GatewayStateV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayStateV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GatewayStateV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayStateV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GatewayStateV1Session struct {
	Contract     *GatewayStateV1   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GatewayStateV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GatewayStateV1CallerSession struct {
	Contract *GatewayStateV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// GatewayStateV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GatewayStateV1TransactorSession struct {
	Contract     *GatewayStateV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// GatewayStateV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type GatewayStateV1Raw struct {
	Contract *GatewayStateV1 // Generic contract binding to access the raw methods on
}

// GatewayStateV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GatewayStateV1CallerRaw struct {
	Contract *GatewayStateV1Caller // Generic read-only contract binding to access the raw methods on
}

// GatewayStateV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GatewayStateV1TransactorRaw struct {
	Contract *GatewayStateV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewGatewayStateV1 creates a new instance of GatewayStateV1, bound to a specific deployed contract.
func NewGatewayStateV1(address common.Address, backend bind.ContractBackend) (*GatewayStateV1, error) {
	contract, err := bindGatewayStateV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GatewayStateV1{GatewayStateV1Caller: GatewayStateV1Caller{contract: contract}, GatewayStateV1Transactor: GatewayStateV1Transactor{contract: contract}, GatewayStateV1Filterer: GatewayStateV1Filterer{contract: contract}}, nil
}

// NewGatewayStateV1Caller creates a new read-only instance of GatewayStateV1, bound to a specific deployed contract.
func NewGatewayStateV1Caller(address common.Address, caller bind.ContractCaller) (*GatewayStateV1Caller, error) {
	contract, err := bindGatewayStateV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayStateV1Caller{contract: contract}, nil
}

// NewGatewayStateV1Transactor creates a new write-only instance of GatewayStateV1, bound to a specific deployed contract.
func NewGatewayStateV1Transactor(address common.Address, transactor bind.ContractTransactor) (*GatewayStateV1Transactor, error) {
	contract, err := bindGatewayStateV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayStateV1Transactor{contract: contract}, nil
}

// NewGatewayStateV1Filterer creates a new log filterer instance of GatewayStateV1, bound to a specific deployed contract.
func NewGatewayStateV1Filterer(address common.Address, filterer bind.ContractFilterer) (*GatewayStateV1Filterer, error) {
	contract, err := bindGatewayStateV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GatewayStateV1Filterer{contract: contract}, nil
}

// bindGatewayStateV1 binds a generic wrapper to an already deployed contract.
func bindGatewayStateV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GatewayStateV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GatewayStateV1 *GatewayStateV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GatewayStateV1.Contract.GatewayStateV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GatewayStateV1 *GatewayStateV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GatewayStateV1.Contract.GatewayStateV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GatewayStateV1 *GatewayStateV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GatewayStateV1.Contract.GatewayStateV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GatewayStateV1 *GatewayStateV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GatewayStateV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GatewayStateV1 *GatewayStateV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GatewayStateV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GatewayStateV1 *GatewayStateV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GatewayStateV1.Contract.contract.Transact(opts, method, params...)
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint16)
func (_GatewayStateV1 *GatewayStateV1Caller) BurnFee(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _GatewayStateV1.contract.Call(opts, out, "burnFee")
	return *ret0, err
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint16)
func (_GatewayStateV1 *GatewayStateV1Session) BurnFee() (uint16, error) {
	return _GatewayStateV1.Contract.BurnFee(&_GatewayStateV1.CallOpts)
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint16)
func (_GatewayStateV1 *GatewayStateV1CallerSession) BurnFee() (uint16, error) {
	return _GatewayStateV1.Contract.BurnFee(&_GatewayStateV1.CallOpts)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_GatewayStateV1 *GatewayStateV1Caller) FeeRecipient(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GatewayStateV1.contract.Call(opts, out, "feeRecipient")
	return *ret0, err
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_GatewayStateV1 *GatewayStateV1Session) FeeRecipient() (common.Address, error) {
	return _GatewayStateV1.Contract.FeeRecipient(&_GatewayStateV1.CallOpts)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_GatewayStateV1 *GatewayStateV1CallerSession) FeeRecipient() (common.Address, error) {
	return _GatewayStateV1.Contract.FeeRecipient(&_GatewayStateV1.CallOpts)
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_GatewayStateV1 *GatewayStateV1Caller) MinimumBurnAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GatewayStateV1.contract.Call(opts, out, "minimumBurnAmount")
	return *ret0, err
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_GatewayStateV1 *GatewayStateV1Session) MinimumBurnAmount() (*big.Int, error) {
	return _GatewayStateV1.Contract.MinimumBurnAmount(&_GatewayStateV1.CallOpts)
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_GatewayStateV1 *GatewayStateV1CallerSession) MinimumBurnAmount() (*big.Int, error) {
	return _GatewayStateV1.Contract.MinimumBurnAmount(&_GatewayStateV1.CallOpts)
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_GatewayStateV1 *GatewayStateV1Caller) MintAuthority(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GatewayStateV1.contract.Call(opts, out, "mintAuthority")
	return *ret0, err
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_GatewayStateV1 *GatewayStateV1Session) MintAuthority() (common.Address, error) {
	return _GatewayStateV1.Contract.MintAuthority(&_GatewayStateV1.CallOpts)
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_GatewayStateV1 *GatewayStateV1CallerSession) MintAuthority() (common.Address, error) {
	return _GatewayStateV1.Contract.MintAuthority(&_GatewayStateV1.CallOpts)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint16)
func (_GatewayStateV1 *GatewayStateV1Caller) MintFee(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _GatewayStateV1.contract.Call(opts, out, "mintFee")
	return *ret0, err
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint16)
func (_GatewayStateV1 *GatewayStateV1Session) MintFee() (uint16, error) {
	return _GatewayStateV1.Contract.MintFee(&_GatewayStateV1.CallOpts)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint16)
func (_GatewayStateV1 *GatewayStateV1CallerSession) MintFee() (uint16, error) {
	return _GatewayStateV1.Contract.MintFee(&_GatewayStateV1.CallOpts)
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_GatewayStateV1 *GatewayStateV1Caller) NextN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GatewayStateV1.contract.Call(opts, out, "nextN")
	return *ret0, err
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_GatewayStateV1 *GatewayStateV1Session) NextN() (*big.Int, error) {
	return _GatewayStateV1.Contract.NextN(&_GatewayStateV1.CallOpts)
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_GatewayStateV1 *GatewayStateV1CallerSession) NextN() (*big.Int, error) {
	return _GatewayStateV1.Contract.NextN(&_GatewayStateV1.CallOpts)
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_GatewayStateV1 *GatewayStateV1Caller) Status(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _GatewayStateV1.contract.Call(opts, out, "status", arg0)
	return *ret0, err
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_GatewayStateV1 *GatewayStateV1Session) Status(arg0 [32]byte) (bool, error) {
	return _GatewayStateV1.Contract.Status(&_GatewayStateV1.CallOpts, arg0)
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_GatewayStateV1 *GatewayStateV1CallerSession) Status(arg0 [32]byte) (bool, error) {
	return _GatewayStateV1.Contract.Status(&_GatewayStateV1.CallOpts, arg0)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_GatewayStateV1 *GatewayStateV1Caller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GatewayStateV1.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_GatewayStateV1 *GatewayStateV1Session) Token() (common.Address, error) {
	return _GatewayStateV1.Contract.Token(&_GatewayStateV1.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_GatewayStateV1 *GatewayStateV1CallerSession) Token() (common.Address, error) {
	return _GatewayStateV1.Contract.Token(&_GatewayStateV1.CallOpts)
}

// GatewayStateV2ABI is the input ABI used to generate the binding from.
const GatewayStateV2ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"selectorHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// GatewayStateV2Bin is the compiled bytecode used for deploying new contracts.
var GatewayStateV2Bin = "0x6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632976297614602d575b600080fd5b60336045565b60408051918252519081900360200190f35b6001548156fea265627a7a72315820163c92c99282cd6f8254a2f694e6ed946480cbf53a03e420f776805a409b096964736f6c63430005100032"

// DeployGatewayStateV2 deploys a new Ethereum contract, binding an instance of GatewayStateV2 to it.
func DeployGatewayStateV2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GatewayStateV2, error) {
	parsed, err := abi.JSON(strings.NewReader(GatewayStateV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(GatewayStateV2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GatewayStateV2{GatewayStateV2Caller: GatewayStateV2Caller{contract: contract}, GatewayStateV2Transactor: GatewayStateV2Transactor{contract: contract}, GatewayStateV2Filterer: GatewayStateV2Filterer{contract: contract}}, nil
}

// GatewayStateV2 is an auto generated Go binding around an Ethereum contract.
type GatewayStateV2 struct {
	GatewayStateV2Caller     // Read-only binding to the contract
	GatewayStateV2Transactor // Write-only binding to the contract
	GatewayStateV2Filterer   // Log filterer for contract events
}

// GatewayStateV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type GatewayStateV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayStateV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type GatewayStateV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayStateV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GatewayStateV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GatewayStateV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GatewayStateV2Session struct {
	Contract     *GatewayStateV2   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GatewayStateV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GatewayStateV2CallerSession struct {
	Contract *GatewayStateV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// GatewayStateV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GatewayStateV2TransactorSession struct {
	Contract     *GatewayStateV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// GatewayStateV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type GatewayStateV2Raw struct {
	Contract *GatewayStateV2 // Generic contract binding to access the raw methods on
}

// GatewayStateV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GatewayStateV2CallerRaw struct {
	Contract *GatewayStateV2Caller // Generic read-only contract binding to access the raw methods on
}

// GatewayStateV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GatewayStateV2TransactorRaw struct {
	Contract *GatewayStateV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewGatewayStateV2 creates a new instance of GatewayStateV2, bound to a specific deployed contract.
func NewGatewayStateV2(address common.Address, backend bind.ContractBackend) (*GatewayStateV2, error) {
	contract, err := bindGatewayStateV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GatewayStateV2{GatewayStateV2Caller: GatewayStateV2Caller{contract: contract}, GatewayStateV2Transactor: GatewayStateV2Transactor{contract: contract}, GatewayStateV2Filterer: GatewayStateV2Filterer{contract: contract}}, nil
}

// NewGatewayStateV2Caller creates a new read-only instance of GatewayStateV2, bound to a specific deployed contract.
func NewGatewayStateV2Caller(address common.Address, caller bind.ContractCaller) (*GatewayStateV2Caller, error) {
	contract, err := bindGatewayStateV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayStateV2Caller{contract: contract}, nil
}

// NewGatewayStateV2Transactor creates a new write-only instance of GatewayStateV2, bound to a specific deployed contract.
func NewGatewayStateV2Transactor(address common.Address, transactor bind.ContractTransactor) (*GatewayStateV2Transactor, error) {
	contract, err := bindGatewayStateV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GatewayStateV2Transactor{contract: contract}, nil
}

// NewGatewayStateV2Filterer creates a new log filterer instance of GatewayStateV2, bound to a specific deployed contract.
func NewGatewayStateV2Filterer(address common.Address, filterer bind.ContractFilterer) (*GatewayStateV2Filterer, error) {
	contract, err := bindGatewayStateV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GatewayStateV2Filterer{contract: contract}, nil
}

// bindGatewayStateV2 binds a generic wrapper to an already deployed contract.
func bindGatewayStateV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GatewayStateV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GatewayStateV2 *GatewayStateV2Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GatewayStateV2.Contract.GatewayStateV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GatewayStateV2 *GatewayStateV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GatewayStateV2.Contract.GatewayStateV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GatewayStateV2 *GatewayStateV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GatewayStateV2.Contract.GatewayStateV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GatewayStateV2 *GatewayStateV2CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GatewayStateV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GatewayStateV2 *GatewayStateV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GatewayStateV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GatewayStateV2 *GatewayStateV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GatewayStateV2.Contract.contract.Transact(opts, method, params...)
}

// SelectorHash is a free data retrieval call binding the contract method 0x29762976.
//
// Solidity: function selectorHash() view returns(bytes32)
func (_GatewayStateV2 *GatewayStateV2Caller) SelectorHash(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _GatewayStateV2.contract.Call(opts, out, "selectorHash")
	return *ret0, err
}

// SelectorHash is a free data retrieval call binding the contract method 0x29762976.
//
// Solidity: function selectorHash() view returns(bytes32)
func (_GatewayStateV2 *GatewayStateV2Session) SelectorHash() ([32]byte, error) {
	return _GatewayStateV2.Contract.SelectorHash(&_GatewayStateV2.CallOpts)
}

// SelectorHash is a free data retrieval call binding the contract method 0x29762976.
//
// Solidity: function selectorHash() view returns(bytes32)
func (_GatewayStateV2 *GatewayStateV2CallerSession) SelectorHash() ([32]byte, error) {
	return _GatewayStateV2.Contract.SelectorHash(&_GatewayStateV2.CallOpts)
}

// IBurnGatewayABI is the input ABI used to generate the binding from.
const IBurnGatewayABI = "[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountScaled\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IBurnGateway is an auto generated Go binding around an Ethereum contract.
type IBurnGateway struct {
	IBurnGatewayCaller     // Read-only binding to the contract
	IBurnGatewayTransactor // Write-only binding to the contract
	IBurnGatewayFilterer   // Log filterer for contract events
}

// IBurnGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type IBurnGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBurnGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IBurnGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBurnGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IBurnGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBurnGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IBurnGatewaySession struct {
	Contract     *IBurnGateway     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IBurnGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IBurnGatewayCallerSession struct {
	Contract *IBurnGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IBurnGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IBurnGatewayTransactorSession struct {
	Contract     *IBurnGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IBurnGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type IBurnGatewayRaw struct {
	Contract *IBurnGateway // Generic contract binding to access the raw methods on
}

// IBurnGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IBurnGatewayCallerRaw struct {
	Contract *IBurnGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// IBurnGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IBurnGatewayTransactorRaw struct {
	Contract *IBurnGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIBurnGateway creates a new instance of IBurnGateway, bound to a specific deployed contract.
func NewIBurnGateway(address common.Address, backend bind.ContractBackend) (*IBurnGateway, error) {
	contract, err := bindIBurnGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IBurnGateway{IBurnGatewayCaller: IBurnGatewayCaller{contract: contract}, IBurnGatewayTransactor: IBurnGatewayTransactor{contract: contract}, IBurnGatewayFilterer: IBurnGatewayFilterer{contract: contract}}, nil
}

// NewIBurnGatewayCaller creates a new read-only instance of IBurnGateway, bound to a specific deployed contract.
func NewIBurnGatewayCaller(address common.Address, caller bind.ContractCaller) (*IBurnGatewayCaller, error) {
	contract, err := bindIBurnGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IBurnGatewayCaller{contract: contract}, nil
}

// NewIBurnGatewayTransactor creates a new write-only instance of IBurnGateway, bound to a specific deployed contract.
func NewIBurnGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*IBurnGatewayTransactor, error) {
	contract, err := bindIBurnGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IBurnGatewayTransactor{contract: contract}, nil
}

// NewIBurnGatewayFilterer creates a new log filterer instance of IBurnGateway, bound to a specific deployed contract.
func NewIBurnGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*IBurnGatewayFilterer, error) {
	contract, err := bindIBurnGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IBurnGatewayFilterer{contract: contract}, nil
}

// bindIBurnGateway binds a generic wrapper to an already deployed contract.
func bindIBurnGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IBurnGatewayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBurnGateway *IBurnGatewayRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IBurnGateway.Contract.IBurnGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBurnGateway *IBurnGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBurnGateway.Contract.IBurnGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBurnGateway *IBurnGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBurnGateway.Contract.IBurnGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBurnGateway *IBurnGatewayCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IBurnGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBurnGateway *IBurnGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBurnGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBurnGateway *IBurnGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBurnGateway.Contract.contract.Transact(opts, method, params...)
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint256)
func (_IBurnGateway *IBurnGatewayCaller) BurnFee(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IBurnGateway.contract.Call(opts, out, "burnFee")
	return *ret0, err
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint256)
func (_IBurnGateway *IBurnGatewaySession) BurnFee() (*big.Int, error) {
	return _IBurnGateway.Contract.BurnFee(&_IBurnGateway.CallOpts)
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint256)
func (_IBurnGateway *IBurnGatewayCallerSession) BurnFee() (*big.Int, error) {
	return _IBurnGateway.Contract.BurnFee(&_IBurnGateway.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x38463cff.
//
// Solidity: function burn(bytes _to, uint256 _amountScaled) returns(uint256)
func (_IBurnGateway *IBurnGatewayTransactor) Burn(opts *bind.TransactOpts, _to []byte, _amountScaled *big.Int) (*types.Transaction, error) {
	return _IBurnGateway.contract.Transact(opts, "burn", _to, _amountScaled)
}

// Burn is a paid mutator transaction binding the contract method 0x38463cff.
//
// Solidity: function burn(bytes _to, uint256 _amountScaled) returns(uint256)
func (_IBurnGateway *IBurnGatewaySession) Burn(_to []byte, _amountScaled *big.Int) (*types.Transaction, error) {
	return _IBurnGateway.Contract.Burn(&_IBurnGateway.TransactOpts, _to, _amountScaled)
}

// Burn is a paid mutator transaction binding the contract method 0x38463cff.
//
// Solidity: function burn(bytes _to, uint256 _amountScaled) returns(uint256)
func (_IBurnGateway *IBurnGatewayTransactorSession) Burn(_to []byte, _amountScaled *big.Int) (*types.Transaction, error) {
	return _IBurnGateway.Contract.Burn(&_IBurnGateway.TransactOpts, _to, _amountScaled)
}

// IERC20ABI is the input ABI used to generate the binding from.
const IERC20ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IERC20.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IERC20.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IERC20.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IGatewayABI is the input ABI used to generate the binding from.
const IGatewayABI = "[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountScaled\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IGateway is an auto generated Go binding around an Ethereum contract.
type IGateway struct {
	IGatewayCaller     // Read-only binding to the contract
	IGatewayTransactor // Write-only binding to the contract
	IGatewayFilterer   // Log filterer for contract events
}

// IGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type IGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IGatewaySession struct {
	Contract     *IGateway         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IGatewayCallerSession struct {
	Contract *IGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// IGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IGatewayTransactorSession struct {
	Contract     *IGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type IGatewayRaw struct {
	Contract *IGateway // Generic contract binding to access the raw methods on
}

// IGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IGatewayCallerRaw struct {
	Contract *IGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// IGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IGatewayTransactorRaw struct {
	Contract *IGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIGateway creates a new instance of IGateway, bound to a specific deployed contract.
func NewIGateway(address common.Address, backend bind.ContractBackend) (*IGateway, error) {
	contract, err := bindIGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IGateway{IGatewayCaller: IGatewayCaller{contract: contract}, IGatewayTransactor: IGatewayTransactor{contract: contract}, IGatewayFilterer: IGatewayFilterer{contract: contract}}, nil
}

// NewIGatewayCaller creates a new read-only instance of IGateway, bound to a specific deployed contract.
func NewIGatewayCaller(address common.Address, caller bind.ContractCaller) (*IGatewayCaller, error) {
	contract, err := bindIGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IGatewayCaller{contract: contract}, nil
}

// NewIGatewayTransactor creates a new write-only instance of IGateway, bound to a specific deployed contract.
func NewIGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*IGatewayTransactor, error) {
	contract, err := bindIGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IGatewayTransactor{contract: contract}, nil
}

// NewIGatewayFilterer creates a new log filterer instance of IGateway, bound to a specific deployed contract.
func NewIGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*IGatewayFilterer, error) {
	contract, err := bindIGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IGatewayFilterer{contract: contract}, nil
}

// bindIGateway binds a generic wrapper to an already deployed contract.
func bindIGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IGatewayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGateway *IGatewayRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IGateway.Contract.IGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGateway *IGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGateway.Contract.IGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGateway *IGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGateway.Contract.IGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGateway *IGatewayCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGateway *IGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGateway *IGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGateway.Contract.contract.Transact(opts, method, params...)
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint256)
func (_IGateway *IGatewayCaller) BurnFee(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IGateway.contract.Call(opts, out, "burnFee")
	return *ret0, err
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint256)
func (_IGateway *IGatewaySession) BurnFee() (*big.Int, error) {
	return _IGateway.Contract.BurnFee(&_IGateway.CallOpts)
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint256)
func (_IGateway *IGatewayCallerSession) BurnFee() (*big.Int, error) {
	return _IGateway.Contract.BurnFee(&_IGateway.CallOpts)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint256)
func (_IGateway *IGatewayCaller) MintFee(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IGateway.contract.Call(opts, out, "mintFee")
	return *ret0, err
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint256)
func (_IGateway *IGatewaySession) MintFee() (*big.Int, error) {
	return _IGateway.Contract.MintFee(&_IGateway.CallOpts)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint256)
func (_IGateway *IGatewayCallerSession) MintFee() (*big.Int, error) {
	return _IGateway.Contract.MintFee(&_IGateway.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x38463cff.
//
// Solidity: function burn(bytes _to, uint256 _amountScaled) returns(uint256)
func (_IGateway *IGatewayTransactor) Burn(opts *bind.TransactOpts, _to []byte, _amountScaled *big.Int) (*types.Transaction, error) {
	return _IGateway.contract.Transact(opts, "burn", _to, _amountScaled)
}

// Burn is a paid mutator transaction binding the contract method 0x38463cff.
//
// Solidity: function burn(bytes _to, uint256 _amountScaled) returns(uint256)
func (_IGateway *IGatewaySession) Burn(_to []byte, _amountScaled *big.Int) (*types.Transaction, error) {
	return _IGateway.Contract.Burn(&_IGateway.TransactOpts, _to, _amountScaled)
}

// Burn is a paid mutator transaction binding the contract method 0x38463cff.
//
// Solidity: function burn(bytes _to, uint256 _amountScaled) returns(uint256)
func (_IGateway *IGatewayTransactorSession) Burn(_to []byte, _amountScaled *big.Int) (*types.Transaction, error) {
	return _IGateway.Contract.Burn(&_IGateway.TransactOpts, _to, _amountScaled)
}

// Mint is a paid mutator transaction binding the contract method 0x159ab14d.
//
// Solidity: function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes _sig) returns(uint256)
func (_IGateway *IGatewayTransactor) Mint(opts *bind.TransactOpts, _pHash [32]byte, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _IGateway.contract.Transact(opts, "mint", _pHash, _amount, _nHash, _sig)
}

// Mint is a paid mutator transaction binding the contract method 0x159ab14d.
//
// Solidity: function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes _sig) returns(uint256)
func (_IGateway *IGatewaySession) Mint(_pHash [32]byte, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _IGateway.Contract.Mint(&_IGateway.TransactOpts, _pHash, _amount, _nHash, _sig)
}

// Mint is a paid mutator transaction binding the contract method 0x159ab14d.
//
// Solidity: function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes _sig) returns(uint256)
func (_IGateway *IGatewayTransactorSession) Mint(_pHash [32]byte, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _IGateway.Contract.Mint(&_IGateway.TransactOpts, _pHash, _amount, _nHash, _sig)
}

// IGatewayRegistryABI is the input ABI used to generate the binding from.
const IGatewayRegistryABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_indexedSymbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gatewayAddress\",\"type\":\"address\"}],\"name\":\"LogGatewayDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_indexedSymbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_gatewayAddress\",\"type\":\"address\"}],\"name\":\"LogGatewayRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currentGatewayAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newGatewayAddress\",\"type\":\"address\"}],\"name\":\"LogGatewayUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"getGatewayBySymbol\",\"outputs\":[{\"internalType\":\"contractIGateway\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getGatewayByToken\",\"outputs\":[{\"internalType\":\"contractIGateway\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getGateways\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getRenTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"getTokenBySymbol\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IGatewayRegistry is an auto generated Go binding around an Ethereum contract.
type IGatewayRegistry struct {
	IGatewayRegistryCaller     // Read-only binding to the contract
	IGatewayRegistryTransactor // Write-only binding to the contract
	IGatewayRegistryFilterer   // Log filterer for contract events
}

// IGatewayRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type IGatewayRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGatewayRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IGatewayRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGatewayRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IGatewayRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGatewayRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IGatewayRegistrySession struct {
	Contract     *IGatewayRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IGatewayRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IGatewayRegistryCallerSession struct {
	Contract *IGatewayRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// IGatewayRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IGatewayRegistryTransactorSession struct {
	Contract     *IGatewayRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IGatewayRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type IGatewayRegistryRaw struct {
	Contract *IGatewayRegistry // Generic contract binding to access the raw methods on
}

// IGatewayRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IGatewayRegistryCallerRaw struct {
	Contract *IGatewayRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// IGatewayRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IGatewayRegistryTransactorRaw struct {
	Contract *IGatewayRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIGatewayRegistry creates a new instance of IGatewayRegistry, bound to a specific deployed contract.
func NewIGatewayRegistry(address common.Address, backend bind.ContractBackend) (*IGatewayRegistry, error) {
	contract, err := bindIGatewayRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IGatewayRegistry{IGatewayRegistryCaller: IGatewayRegistryCaller{contract: contract}, IGatewayRegistryTransactor: IGatewayRegistryTransactor{contract: contract}, IGatewayRegistryFilterer: IGatewayRegistryFilterer{contract: contract}}, nil
}

// NewIGatewayRegistryCaller creates a new read-only instance of IGatewayRegistry, bound to a specific deployed contract.
func NewIGatewayRegistryCaller(address common.Address, caller bind.ContractCaller) (*IGatewayRegistryCaller, error) {
	contract, err := bindIGatewayRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IGatewayRegistryCaller{contract: contract}, nil
}

// NewIGatewayRegistryTransactor creates a new write-only instance of IGatewayRegistry, bound to a specific deployed contract.
func NewIGatewayRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*IGatewayRegistryTransactor, error) {
	contract, err := bindIGatewayRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IGatewayRegistryTransactor{contract: contract}, nil
}

// NewIGatewayRegistryFilterer creates a new log filterer instance of IGatewayRegistry, bound to a specific deployed contract.
func NewIGatewayRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*IGatewayRegistryFilterer, error) {
	contract, err := bindIGatewayRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IGatewayRegistryFilterer{contract: contract}, nil
}

// bindIGatewayRegistry binds a generic wrapper to an already deployed contract.
func bindIGatewayRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IGatewayRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGatewayRegistry *IGatewayRegistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IGatewayRegistry.Contract.IGatewayRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGatewayRegistry *IGatewayRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGatewayRegistry.Contract.IGatewayRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGatewayRegistry *IGatewayRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGatewayRegistry.Contract.IGatewayRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGatewayRegistry *IGatewayRegistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IGatewayRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGatewayRegistry *IGatewayRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGatewayRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGatewayRegistry *IGatewayRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGatewayRegistry.Contract.contract.Transact(opts, method, params...)
}

// GetGatewayBySymbol is a free data retrieval call binding the contract method 0x64936b1e.
//
// Solidity: function getGatewayBySymbol(string _tokenSymbol) view returns(address)
func (_IGatewayRegistry *IGatewayRegistryCaller) GetGatewayBySymbol(opts *bind.CallOpts, _tokenSymbol string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IGatewayRegistry.contract.Call(opts, out, "getGatewayBySymbol", _tokenSymbol)
	return *ret0, err
}

// GetGatewayBySymbol is a free data retrieval call binding the contract method 0x64936b1e.
//
// Solidity: function getGatewayBySymbol(string _tokenSymbol) view returns(address)
func (_IGatewayRegistry *IGatewayRegistrySession) GetGatewayBySymbol(_tokenSymbol string) (common.Address, error) {
	return _IGatewayRegistry.Contract.GetGatewayBySymbol(&_IGatewayRegistry.CallOpts, _tokenSymbol)
}

// GetGatewayBySymbol is a free data retrieval call binding the contract method 0x64936b1e.
//
// Solidity: function getGatewayBySymbol(string _tokenSymbol) view returns(address)
func (_IGatewayRegistry *IGatewayRegistryCallerSession) GetGatewayBySymbol(_tokenSymbol string) (common.Address, error) {
	return _IGatewayRegistry.Contract.GetGatewayBySymbol(&_IGatewayRegistry.CallOpts, _tokenSymbol)
}

// GetGatewayByToken is a free data retrieval call binding the contract method 0x1b95e305.
//
// Solidity: function getGatewayByToken(address _tokenAddress) view returns(address)
func (_IGatewayRegistry *IGatewayRegistryCaller) GetGatewayByToken(opts *bind.CallOpts, _tokenAddress common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IGatewayRegistry.contract.Call(opts, out, "getGatewayByToken", _tokenAddress)
	return *ret0, err
}

// GetGatewayByToken is a free data retrieval call binding the contract method 0x1b95e305.
//
// Solidity: function getGatewayByToken(address _tokenAddress) view returns(address)
func (_IGatewayRegistry *IGatewayRegistrySession) GetGatewayByToken(_tokenAddress common.Address) (common.Address, error) {
	return _IGatewayRegistry.Contract.GetGatewayByToken(&_IGatewayRegistry.CallOpts, _tokenAddress)
}

// GetGatewayByToken is a free data retrieval call binding the contract method 0x1b95e305.
//
// Solidity: function getGatewayByToken(address _tokenAddress) view returns(address)
func (_IGatewayRegistry *IGatewayRegistryCallerSession) GetGatewayByToken(_tokenAddress common.Address) (common.Address, error) {
	return _IGatewayRegistry.Contract.GetGatewayByToken(&_IGatewayRegistry.CallOpts, _tokenAddress)
}

// GetGateways is a free data retrieval call binding the contract method 0xf4146ba2.
//
// Solidity: function getGateways(address _start, uint256 _count) view returns(address[])
func (_IGatewayRegistry *IGatewayRegistryCaller) GetGateways(opts *bind.CallOpts, _start common.Address, _count *big.Int) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _IGatewayRegistry.contract.Call(opts, out, "getGateways", _start, _count)
	return *ret0, err
}

// GetGateways is a free data retrieval call binding the contract method 0xf4146ba2.
//
// Solidity: function getGateways(address _start, uint256 _count) view returns(address[])
func (_IGatewayRegistry *IGatewayRegistrySession) GetGateways(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _IGatewayRegistry.Contract.GetGateways(&_IGatewayRegistry.CallOpts, _start, _count)
}

// GetGateways is a free data retrieval call binding the contract method 0xf4146ba2.
//
// Solidity: function getGateways(address _start, uint256 _count) view returns(address[])
func (_IGatewayRegistry *IGatewayRegistryCallerSession) GetGateways(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _IGatewayRegistry.Contract.GetGateways(&_IGatewayRegistry.CallOpts, _start, _count)
}

// GetRenTokens is a free data retrieval call binding the contract method 0xcf4f775c.
//
// Solidity: function getRenTokens(address _start, uint256 _count) view returns(address[])
func (_IGatewayRegistry *IGatewayRegistryCaller) GetRenTokens(opts *bind.CallOpts, _start common.Address, _count *big.Int) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _IGatewayRegistry.contract.Call(opts, out, "getRenTokens", _start, _count)
	return *ret0, err
}

// GetRenTokens is a free data retrieval call binding the contract method 0xcf4f775c.
//
// Solidity: function getRenTokens(address _start, uint256 _count) view returns(address[])
func (_IGatewayRegistry *IGatewayRegistrySession) GetRenTokens(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _IGatewayRegistry.Contract.GetRenTokens(&_IGatewayRegistry.CallOpts, _start, _count)
}

// GetRenTokens is a free data retrieval call binding the contract method 0xcf4f775c.
//
// Solidity: function getRenTokens(address _start, uint256 _count) view returns(address[])
func (_IGatewayRegistry *IGatewayRegistryCallerSession) GetRenTokens(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _IGatewayRegistry.Contract.GetRenTokens(&_IGatewayRegistry.CallOpts, _start, _count)
}

// GetTokenBySymbol is a free data retrieval call binding the contract method 0xefa74f1f.
//
// Solidity: function getTokenBySymbol(string _tokenSymbol) view returns(address)
func (_IGatewayRegistry *IGatewayRegistryCaller) GetTokenBySymbol(opts *bind.CallOpts, _tokenSymbol string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IGatewayRegistry.contract.Call(opts, out, "getTokenBySymbol", _tokenSymbol)
	return *ret0, err
}

// GetTokenBySymbol is a free data retrieval call binding the contract method 0xefa74f1f.
//
// Solidity: function getTokenBySymbol(string _tokenSymbol) view returns(address)
func (_IGatewayRegistry *IGatewayRegistrySession) GetTokenBySymbol(_tokenSymbol string) (common.Address, error) {
	return _IGatewayRegistry.Contract.GetTokenBySymbol(&_IGatewayRegistry.CallOpts, _tokenSymbol)
}

// GetTokenBySymbol is a free data retrieval call binding the contract method 0xefa74f1f.
//
// Solidity: function getTokenBySymbol(string _tokenSymbol) view returns(address)
func (_IGatewayRegistry *IGatewayRegistryCallerSession) GetTokenBySymbol(_tokenSymbol string) (common.Address, error) {
	return _IGatewayRegistry.Contract.GetTokenBySymbol(&_IGatewayRegistry.CallOpts, _tokenSymbol)
}

// IGatewayRegistryLogGatewayDeregisteredIterator is returned from FilterLogGatewayDeregistered and is used to iterate over the raw logs and unpacked data for LogGatewayDeregistered events raised by the IGatewayRegistry contract.
type IGatewayRegistryLogGatewayDeregisteredIterator struct {
	Event *IGatewayRegistryLogGatewayDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IGatewayRegistryLogGatewayDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IGatewayRegistryLogGatewayDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IGatewayRegistryLogGatewayDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IGatewayRegistryLogGatewayDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IGatewayRegistryLogGatewayDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IGatewayRegistryLogGatewayDeregistered represents a LogGatewayDeregistered event raised by the IGatewayRegistry contract.
type IGatewayRegistryLogGatewayDeregistered struct {
	Symbol         string
	IndexedSymbol  common.Hash
	TokenAddress   common.Address
	GatewayAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterLogGatewayDeregistered is a free log retrieval operation binding the contract event 0xea98e49727cf7c3a8c3926a036a6d41047c9b766d9109f22962950f37a2094aa.
//
// Solidity: event LogGatewayDeregistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _gatewayAddress)
func (_IGatewayRegistry *IGatewayRegistryFilterer) FilterLogGatewayDeregistered(opts *bind.FilterOpts, _indexedSymbol []string, _tokenAddress []common.Address, _gatewayAddress []common.Address) (*IGatewayRegistryLogGatewayDeregisteredIterator, error) {

	var _indexedSymbolRule []interface{}
	for _, _indexedSymbolItem := range _indexedSymbol {
		_indexedSymbolRule = append(_indexedSymbolRule, _indexedSymbolItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}
	var _gatewayAddressRule []interface{}
	for _, _gatewayAddressItem := range _gatewayAddress {
		_gatewayAddressRule = append(_gatewayAddressRule, _gatewayAddressItem)
	}

	logs, sub, err := _IGatewayRegistry.contract.FilterLogs(opts, "LogGatewayDeregistered", _indexedSymbolRule, _tokenAddressRule, _gatewayAddressRule)
	if err != nil {
		return nil, err
	}
	return &IGatewayRegistryLogGatewayDeregisteredIterator{contract: _IGatewayRegistry.contract, event: "LogGatewayDeregistered", logs: logs, sub: sub}, nil
}

// WatchLogGatewayDeregistered is a free log subscription operation binding the contract event 0xea98e49727cf7c3a8c3926a036a6d41047c9b766d9109f22962950f37a2094aa.
//
// Solidity: event LogGatewayDeregistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _gatewayAddress)
func (_IGatewayRegistry *IGatewayRegistryFilterer) WatchLogGatewayDeregistered(opts *bind.WatchOpts, sink chan<- *IGatewayRegistryLogGatewayDeregistered, _indexedSymbol []string, _tokenAddress []common.Address, _gatewayAddress []common.Address) (event.Subscription, error) {

	var _indexedSymbolRule []interface{}
	for _, _indexedSymbolItem := range _indexedSymbol {
		_indexedSymbolRule = append(_indexedSymbolRule, _indexedSymbolItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}
	var _gatewayAddressRule []interface{}
	for _, _gatewayAddressItem := range _gatewayAddress {
		_gatewayAddressRule = append(_gatewayAddressRule, _gatewayAddressItem)
	}

	logs, sub, err := _IGatewayRegistry.contract.WatchLogs(opts, "LogGatewayDeregistered", _indexedSymbolRule, _tokenAddressRule, _gatewayAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IGatewayRegistryLogGatewayDeregistered)
				if err := _IGatewayRegistry.contract.UnpackLog(event, "LogGatewayDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogGatewayDeregistered is a log parse operation binding the contract event 0xea98e49727cf7c3a8c3926a036a6d41047c9b766d9109f22962950f37a2094aa.
//
// Solidity: event LogGatewayDeregistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _gatewayAddress)
func (_IGatewayRegistry *IGatewayRegistryFilterer) ParseLogGatewayDeregistered(log types.Log) (*IGatewayRegistryLogGatewayDeregistered, error) {
	event := new(IGatewayRegistryLogGatewayDeregistered)
	if err := _IGatewayRegistry.contract.UnpackLog(event, "LogGatewayDeregistered", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IGatewayRegistryLogGatewayRegisteredIterator is returned from FilterLogGatewayRegistered and is used to iterate over the raw logs and unpacked data for LogGatewayRegistered events raised by the IGatewayRegistry contract.
type IGatewayRegistryLogGatewayRegisteredIterator struct {
	Event *IGatewayRegistryLogGatewayRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IGatewayRegistryLogGatewayRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IGatewayRegistryLogGatewayRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IGatewayRegistryLogGatewayRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IGatewayRegistryLogGatewayRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IGatewayRegistryLogGatewayRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IGatewayRegistryLogGatewayRegistered represents a LogGatewayRegistered event raised by the IGatewayRegistry contract.
type IGatewayRegistryLogGatewayRegistered struct {
	Symbol         string
	IndexedSymbol  common.Hash
	TokenAddress   common.Address
	GatewayAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterLogGatewayRegistered is a free log retrieval operation binding the contract event 0xd433aae9ea620c1976ff88f75c629f477dbffe6bf277edad8a31c983117ab32a.
//
// Solidity: event LogGatewayRegistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _gatewayAddress)
func (_IGatewayRegistry *IGatewayRegistryFilterer) FilterLogGatewayRegistered(opts *bind.FilterOpts, _indexedSymbol []string, _tokenAddress []common.Address, _gatewayAddress []common.Address) (*IGatewayRegistryLogGatewayRegisteredIterator, error) {

	var _indexedSymbolRule []interface{}
	for _, _indexedSymbolItem := range _indexedSymbol {
		_indexedSymbolRule = append(_indexedSymbolRule, _indexedSymbolItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}
	var _gatewayAddressRule []interface{}
	for _, _gatewayAddressItem := range _gatewayAddress {
		_gatewayAddressRule = append(_gatewayAddressRule, _gatewayAddressItem)
	}

	logs, sub, err := _IGatewayRegistry.contract.FilterLogs(opts, "LogGatewayRegistered", _indexedSymbolRule, _tokenAddressRule, _gatewayAddressRule)
	if err != nil {
		return nil, err
	}
	return &IGatewayRegistryLogGatewayRegisteredIterator{contract: _IGatewayRegistry.contract, event: "LogGatewayRegistered", logs: logs, sub: sub}, nil
}

// WatchLogGatewayRegistered is a free log subscription operation binding the contract event 0xd433aae9ea620c1976ff88f75c629f477dbffe6bf277edad8a31c983117ab32a.
//
// Solidity: event LogGatewayRegistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _gatewayAddress)
func (_IGatewayRegistry *IGatewayRegistryFilterer) WatchLogGatewayRegistered(opts *bind.WatchOpts, sink chan<- *IGatewayRegistryLogGatewayRegistered, _indexedSymbol []string, _tokenAddress []common.Address, _gatewayAddress []common.Address) (event.Subscription, error) {

	var _indexedSymbolRule []interface{}
	for _, _indexedSymbolItem := range _indexedSymbol {
		_indexedSymbolRule = append(_indexedSymbolRule, _indexedSymbolItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}
	var _gatewayAddressRule []interface{}
	for _, _gatewayAddressItem := range _gatewayAddress {
		_gatewayAddressRule = append(_gatewayAddressRule, _gatewayAddressItem)
	}

	logs, sub, err := _IGatewayRegistry.contract.WatchLogs(opts, "LogGatewayRegistered", _indexedSymbolRule, _tokenAddressRule, _gatewayAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IGatewayRegistryLogGatewayRegistered)
				if err := _IGatewayRegistry.contract.UnpackLog(event, "LogGatewayRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogGatewayRegistered is a log parse operation binding the contract event 0xd433aae9ea620c1976ff88f75c629f477dbffe6bf277edad8a31c983117ab32a.
//
// Solidity: event LogGatewayRegistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _gatewayAddress)
func (_IGatewayRegistry *IGatewayRegistryFilterer) ParseLogGatewayRegistered(log types.Log) (*IGatewayRegistryLogGatewayRegistered, error) {
	event := new(IGatewayRegistryLogGatewayRegistered)
	if err := _IGatewayRegistry.contract.UnpackLog(event, "LogGatewayRegistered", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IGatewayRegistryLogGatewayUpdatedIterator is returned from FilterLogGatewayUpdated and is used to iterate over the raw logs and unpacked data for LogGatewayUpdated events raised by the IGatewayRegistry contract.
type IGatewayRegistryLogGatewayUpdatedIterator struct {
	Event *IGatewayRegistryLogGatewayUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IGatewayRegistryLogGatewayUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IGatewayRegistryLogGatewayUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IGatewayRegistryLogGatewayUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IGatewayRegistryLogGatewayUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IGatewayRegistryLogGatewayUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IGatewayRegistryLogGatewayUpdated represents a LogGatewayUpdated event raised by the IGatewayRegistry contract.
type IGatewayRegistryLogGatewayUpdated struct {
	TokenAddress          common.Address
	CurrentGatewayAddress common.Address
	NewGatewayAddress     common.Address
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterLogGatewayUpdated is a free log retrieval operation binding the contract event 0x2dc9e208c924a5b14066ecb7121b371da427e696ad69456ed07a52cd2a710d99.
//
// Solidity: event LogGatewayUpdated(address indexed _tokenAddress, address indexed _currentGatewayAddress, address indexed _newGatewayAddress)
func (_IGatewayRegistry *IGatewayRegistryFilterer) FilterLogGatewayUpdated(opts *bind.FilterOpts, _tokenAddress []common.Address, _currentGatewayAddress []common.Address, _newGatewayAddress []common.Address) (*IGatewayRegistryLogGatewayUpdatedIterator, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}
	var _currentGatewayAddressRule []interface{}
	for _, _currentGatewayAddressItem := range _currentGatewayAddress {
		_currentGatewayAddressRule = append(_currentGatewayAddressRule, _currentGatewayAddressItem)
	}
	var _newGatewayAddressRule []interface{}
	for _, _newGatewayAddressItem := range _newGatewayAddress {
		_newGatewayAddressRule = append(_newGatewayAddressRule, _newGatewayAddressItem)
	}

	logs, sub, err := _IGatewayRegistry.contract.FilterLogs(opts, "LogGatewayUpdated", _tokenAddressRule, _currentGatewayAddressRule, _newGatewayAddressRule)
	if err != nil {
		return nil, err
	}
	return &IGatewayRegistryLogGatewayUpdatedIterator{contract: _IGatewayRegistry.contract, event: "LogGatewayUpdated", logs: logs, sub: sub}, nil
}

// WatchLogGatewayUpdated is a free log subscription operation binding the contract event 0x2dc9e208c924a5b14066ecb7121b371da427e696ad69456ed07a52cd2a710d99.
//
// Solidity: event LogGatewayUpdated(address indexed _tokenAddress, address indexed _currentGatewayAddress, address indexed _newGatewayAddress)
func (_IGatewayRegistry *IGatewayRegistryFilterer) WatchLogGatewayUpdated(opts *bind.WatchOpts, sink chan<- *IGatewayRegistryLogGatewayUpdated, _tokenAddress []common.Address, _currentGatewayAddress []common.Address, _newGatewayAddress []common.Address) (event.Subscription, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}
	var _currentGatewayAddressRule []interface{}
	for _, _currentGatewayAddressItem := range _currentGatewayAddress {
		_currentGatewayAddressRule = append(_currentGatewayAddressRule, _currentGatewayAddressItem)
	}
	var _newGatewayAddressRule []interface{}
	for _, _newGatewayAddressItem := range _newGatewayAddress {
		_newGatewayAddressRule = append(_newGatewayAddressRule, _newGatewayAddressItem)
	}

	logs, sub, err := _IGatewayRegistry.contract.WatchLogs(opts, "LogGatewayUpdated", _tokenAddressRule, _currentGatewayAddressRule, _newGatewayAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IGatewayRegistryLogGatewayUpdated)
				if err := _IGatewayRegistry.contract.UnpackLog(event, "LogGatewayUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogGatewayUpdated is a log parse operation binding the contract event 0x2dc9e208c924a5b14066ecb7121b371da427e696ad69456ed07a52cd2a710d99.
//
// Solidity: event LogGatewayUpdated(address indexed _tokenAddress, address indexed _currentGatewayAddress, address indexed _newGatewayAddress)
func (_IGatewayRegistry *IGatewayRegistryFilterer) ParseLogGatewayUpdated(log types.Log) (*IGatewayRegistryLogGatewayUpdated, error) {
	event := new(IGatewayRegistryLogGatewayUpdated)
	if err := _IGatewayRegistry.contract.UnpackLog(event, "LogGatewayUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IMintGatewayABI is the input ABI used to generate the binding from.
const IMintGatewayABI = "[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IMintGateway is an auto generated Go binding around an Ethereum contract.
type IMintGateway struct {
	IMintGatewayCaller     // Read-only binding to the contract
	IMintGatewayTransactor // Write-only binding to the contract
	IMintGatewayFilterer   // Log filterer for contract events
}

// IMintGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type IMintGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMintGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IMintGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMintGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IMintGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMintGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IMintGatewaySession struct {
	Contract     *IMintGateway     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IMintGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IMintGatewayCallerSession struct {
	Contract *IMintGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IMintGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IMintGatewayTransactorSession struct {
	Contract     *IMintGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IMintGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type IMintGatewayRaw struct {
	Contract *IMintGateway // Generic contract binding to access the raw methods on
}

// IMintGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IMintGatewayCallerRaw struct {
	Contract *IMintGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// IMintGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IMintGatewayTransactorRaw struct {
	Contract *IMintGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIMintGateway creates a new instance of IMintGateway, bound to a specific deployed contract.
func NewIMintGateway(address common.Address, backend bind.ContractBackend) (*IMintGateway, error) {
	contract, err := bindIMintGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IMintGateway{IMintGatewayCaller: IMintGatewayCaller{contract: contract}, IMintGatewayTransactor: IMintGatewayTransactor{contract: contract}, IMintGatewayFilterer: IMintGatewayFilterer{contract: contract}}, nil
}

// NewIMintGatewayCaller creates a new read-only instance of IMintGateway, bound to a specific deployed contract.
func NewIMintGatewayCaller(address common.Address, caller bind.ContractCaller) (*IMintGatewayCaller, error) {
	contract, err := bindIMintGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IMintGatewayCaller{contract: contract}, nil
}

// NewIMintGatewayTransactor creates a new write-only instance of IMintGateway, bound to a specific deployed contract.
func NewIMintGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*IMintGatewayTransactor, error) {
	contract, err := bindIMintGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IMintGatewayTransactor{contract: contract}, nil
}

// NewIMintGatewayFilterer creates a new log filterer instance of IMintGateway, bound to a specific deployed contract.
func NewIMintGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*IMintGatewayFilterer, error) {
	contract, err := bindIMintGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IMintGatewayFilterer{contract: contract}, nil
}

// bindIMintGateway binds a generic wrapper to an already deployed contract.
func bindIMintGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IMintGatewayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMintGateway *IMintGatewayRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IMintGateway.Contract.IMintGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMintGateway *IMintGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMintGateway.Contract.IMintGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMintGateway *IMintGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMintGateway.Contract.IMintGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMintGateway *IMintGatewayCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IMintGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMintGateway *IMintGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMintGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMintGateway *IMintGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMintGateway.Contract.contract.Transact(opts, method, params...)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint256)
func (_IMintGateway *IMintGatewayCaller) MintFee(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IMintGateway.contract.Call(opts, out, "mintFee")
	return *ret0, err
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint256)
func (_IMintGateway *IMintGatewaySession) MintFee() (*big.Int, error) {
	return _IMintGateway.Contract.MintFee(&_IMintGateway.CallOpts)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint256)
func (_IMintGateway *IMintGatewayCallerSession) MintFee() (*big.Int, error) {
	return _IMintGateway.Contract.MintFee(&_IMintGateway.CallOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x159ab14d.
//
// Solidity: function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes _sig) returns(uint256)
func (_IMintGateway *IMintGatewayTransactor) Mint(opts *bind.TransactOpts, _pHash [32]byte, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _IMintGateway.contract.Transact(opts, "mint", _pHash, _amount, _nHash, _sig)
}

// Mint is a paid mutator transaction binding the contract method 0x159ab14d.
//
// Solidity: function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes _sig) returns(uint256)
func (_IMintGateway *IMintGatewaySession) Mint(_pHash [32]byte, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _IMintGateway.Contract.Mint(&_IMintGateway.TransactOpts, _pHash, _amount, _nHash, _sig)
}

// Mint is a paid mutator transaction binding the contract method 0x159ab14d.
//
// Solidity: function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes _sig) returns(uint256)
func (_IMintGateway *IMintGatewayTransactorSession) Mint(_pHash [32]byte, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _IMintGateway.Contract.Mint(&_IMintGateway.TransactOpts, _pHash, _amount, _nHash, _sig)
}

// IRelayHubABI is the input ABI used to generate the binding from.
const IRelayHubABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"CanRelayFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Penalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"RelayAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"}],\"name\":\"RelayRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"enumIRelayHub.RelayCallStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"charge\",\"type\":\"uint256\"}],\"name\":\"TransactionRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedFunction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"}],\"name\":\"canRelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"recipientContext\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"getRelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enumIRelayHub.RelayState\",\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relayedCallStipend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"}],\"name\":\"maxPossibleCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unsignedTx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"penalizeIllegalTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unsignedTx1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"unsignedTx2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature2\",\"type\":\"bytes\"}],\"name\":\"penalizeRepeatedNonce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"registerRelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedFunction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"}],\"name\":\"relayCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"removeRelayByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relayedCallStipend\",\"type\":\"uint256\"}],\"name\":\"requiredGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IRelayHub is an auto generated Go binding around an Ethereum contract.
type IRelayHub struct {
	IRelayHubCaller     // Read-only binding to the contract
	IRelayHubTransactor // Write-only binding to the contract
	IRelayHubFilterer   // Log filterer for contract events
}

// IRelayHubCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRelayHubCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRelayHubTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRelayHubTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRelayHubFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRelayHubFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRelayHubSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRelayHubSession struct {
	Contract     *IRelayHub        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRelayHubCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRelayHubCallerSession struct {
	Contract *IRelayHubCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IRelayHubTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRelayHubTransactorSession struct {
	Contract     *IRelayHubTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IRelayHubRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRelayHubRaw struct {
	Contract *IRelayHub // Generic contract binding to access the raw methods on
}

// IRelayHubCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRelayHubCallerRaw struct {
	Contract *IRelayHubCaller // Generic read-only contract binding to access the raw methods on
}

// IRelayHubTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRelayHubTransactorRaw struct {
	Contract *IRelayHubTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRelayHub creates a new instance of IRelayHub, bound to a specific deployed contract.
func NewIRelayHub(address common.Address, backend bind.ContractBackend) (*IRelayHub, error) {
	contract, err := bindIRelayHub(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRelayHub{IRelayHubCaller: IRelayHubCaller{contract: contract}, IRelayHubTransactor: IRelayHubTransactor{contract: contract}, IRelayHubFilterer: IRelayHubFilterer{contract: contract}}, nil
}

// NewIRelayHubCaller creates a new read-only instance of IRelayHub, bound to a specific deployed contract.
func NewIRelayHubCaller(address common.Address, caller bind.ContractCaller) (*IRelayHubCaller, error) {
	contract, err := bindIRelayHub(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRelayHubCaller{contract: contract}, nil
}

// NewIRelayHubTransactor creates a new write-only instance of IRelayHub, bound to a specific deployed contract.
func NewIRelayHubTransactor(address common.Address, transactor bind.ContractTransactor) (*IRelayHubTransactor, error) {
	contract, err := bindIRelayHub(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRelayHubTransactor{contract: contract}, nil
}

// NewIRelayHubFilterer creates a new log filterer instance of IRelayHub, bound to a specific deployed contract.
func NewIRelayHubFilterer(address common.Address, filterer bind.ContractFilterer) (*IRelayHubFilterer, error) {
	contract, err := bindIRelayHub(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRelayHubFilterer{contract: contract}, nil
}

// bindIRelayHub binds a generic wrapper to an already deployed contract.
func bindIRelayHub(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRelayHubABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRelayHub *IRelayHubRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IRelayHub.Contract.IRelayHubCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRelayHub *IRelayHubRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRelayHub.Contract.IRelayHubTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRelayHub *IRelayHubRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRelayHub.Contract.IRelayHubTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRelayHub *IRelayHubCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IRelayHub.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRelayHub *IRelayHubTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRelayHub.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRelayHub *IRelayHubTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRelayHub.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address target) view returns(uint256)
func (_IRelayHub *IRelayHubCaller) BalanceOf(opts *bind.CallOpts, target common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IRelayHub.contract.Call(opts, out, "balanceOf", target)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address target) view returns(uint256)
func (_IRelayHub *IRelayHubSession) BalanceOf(target common.Address) (*big.Int, error) {
	return _IRelayHub.Contract.BalanceOf(&_IRelayHub.CallOpts, target)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address target) view returns(uint256)
func (_IRelayHub *IRelayHubCallerSession) BalanceOf(target common.Address) (*big.Int, error) {
	return _IRelayHub.Contract.BalanceOf(&_IRelayHub.CallOpts, target)
}

// CanRelay is a free data retrieval call binding the contract method 0x2b601747.
//
// Solidity: function canRelay(address relay, address from, address to, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes signature, bytes approvalData) view returns(uint256 status, bytes recipientContext)
func (_IRelayHub *IRelayHubCaller) CanRelay(opts *bind.CallOpts, relay common.Address, from common.Address, to common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, signature []byte, approvalData []byte) (struct {
	Status           *big.Int
	RecipientContext []byte
}, error) {
	ret := new(struct {
		Status           *big.Int
		RecipientContext []byte
	})
	out := ret
	err := _IRelayHub.contract.Call(opts, out, "canRelay", relay, from, to, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData)
	return *ret, err
}

// CanRelay is a free data retrieval call binding the contract method 0x2b601747.
//
// Solidity: function canRelay(address relay, address from, address to, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes signature, bytes approvalData) view returns(uint256 status, bytes recipientContext)
func (_IRelayHub *IRelayHubSession) CanRelay(relay common.Address, from common.Address, to common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, signature []byte, approvalData []byte) (struct {
	Status           *big.Int
	RecipientContext []byte
}, error) {
	return _IRelayHub.Contract.CanRelay(&_IRelayHub.CallOpts, relay, from, to, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData)
}

// CanRelay is a free data retrieval call binding the contract method 0x2b601747.
//
// Solidity: function canRelay(address relay, address from, address to, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes signature, bytes approvalData) view returns(uint256 status, bytes recipientContext)
func (_IRelayHub *IRelayHubCallerSession) CanRelay(relay common.Address, from common.Address, to common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, signature []byte, approvalData []byte) (struct {
	Status           *big.Int
	RecipientContext []byte
}, error) {
	return _IRelayHub.Contract.CanRelay(&_IRelayHub.CallOpts, relay, from, to, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_IRelayHub *IRelayHubCaller) GetNonce(opts *bind.CallOpts, from common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IRelayHub.contract.Call(opts, out, "getNonce", from)
	return *ret0, err
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_IRelayHub *IRelayHubSession) GetNonce(from common.Address) (*big.Int, error) {
	return _IRelayHub.Contract.GetNonce(&_IRelayHub.CallOpts, from)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address from) view returns(uint256)
func (_IRelayHub *IRelayHubCallerSession) GetNonce(from common.Address) (*big.Int, error) {
	return _IRelayHub.Contract.GetNonce(&_IRelayHub.CallOpts, from)
}

// GetRelay is a free data retrieval call binding the contract method 0x8d851460.
//
// Solidity: function getRelay(address relay) view returns(uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address owner, uint8 state)
func (_IRelayHub *IRelayHubCaller) GetRelay(opts *bind.CallOpts, relay common.Address) (struct {
	TotalStake   *big.Int
	UnstakeDelay *big.Int
	UnstakeTime  *big.Int
	Owner        common.Address
	State        uint8
}, error) {
	ret := new(struct {
		TotalStake   *big.Int
		UnstakeDelay *big.Int
		UnstakeTime  *big.Int
		Owner        common.Address
		State        uint8
	})
	out := ret
	err := _IRelayHub.contract.Call(opts, out, "getRelay", relay)
	return *ret, err
}

// GetRelay is a free data retrieval call binding the contract method 0x8d851460.
//
// Solidity: function getRelay(address relay) view returns(uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address owner, uint8 state)
func (_IRelayHub *IRelayHubSession) GetRelay(relay common.Address) (struct {
	TotalStake   *big.Int
	UnstakeDelay *big.Int
	UnstakeTime  *big.Int
	Owner        common.Address
	State        uint8
}, error) {
	return _IRelayHub.Contract.GetRelay(&_IRelayHub.CallOpts, relay)
}

// GetRelay is a free data retrieval call binding the contract method 0x8d851460.
//
// Solidity: function getRelay(address relay) view returns(uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address owner, uint8 state)
func (_IRelayHub *IRelayHubCallerSession) GetRelay(relay common.Address) (struct {
	TotalStake   *big.Int
	UnstakeDelay *big.Int
	UnstakeTime  *big.Int
	Owner        common.Address
	State        uint8
}, error) {
	return _IRelayHub.Contract.GetRelay(&_IRelayHub.CallOpts, relay)
}

// MaxPossibleCharge is a free data retrieval call binding the contract method 0xa863f8f9.
//
// Solidity: function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) view returns(uint256)
func (_IRelayHub *IRelayHubCaller) MaxPossibleCharge(opts *bind.CallOpts, relayedCallStipend *big.Int, gasPrice *big.Int, transactionFee *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IRelayHub.contract.Call(opts, out, "maxPossibleCharge", relayedCallStipend, gasPrice, transactionFee)
	return *ret0, err
}

// MaxPossibleCharge is a free data retrieval call binding the contract method 0xa863f8f9.
//
// Solidity: function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) view returns(uint256)
func (_IRelayHub *IRelayHubSession) MaxPossibleCharge(relayedCallStipend *big.Int, gasPrice *big.Int, transactionFee *big.Int) (*big.Int, error) {
	return _IRelayHub.Contract.MaxPossibleCharge(&_IRelayHub.CallOpts, relayedCallStipend, gasPrice, transactionFee)
}

// MaxPossibleCharge is a free data retrieval call binding the contract method 0xa863f8f9.
//
// Solidity: function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) view returns(uint256)
func (_IRelayHub *IRelayHubCallerSession) MaxPossibleCharge(relayedCallStipend *big.Int, gasPrice *big.Int, transactionFee *big.Int) (*big.Int, error) {
	return _IRelayHub.Contract.MaxPossibleCharge(&_IRelayHub.CallOpts, relayedCallStipend, gasPrice, transactionFee)
}

// RequiredGas is a free data retrieval call binding the contract method 0x6a7d84a4.
//
// Solidity: function requiredGas(uint256 relayedCallStipend) view returns(uint256)
func (_IRelayHub *IRelayHubCaller) RequiredGas(opts *bind.CallOpts, relayedCallStipend *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IRelayHub.contract.Call(opts, out, "requiredGas", relayedCallStipend)
	return *ret0, err
}

// RequiredGas is a free data retrieval call binding the contract method 0x6a7d84a4.
//
// Solidity: function requiredGas(uint256 relayedCallStipend) view returns(uint256)
func (_IRelayHub *IRelayHubSession) RequiredGas(relayedCallStipend *big.Int) (*big.Int, error) {
	return _IRelayHub.Contract.RequiredGas(&_IRelayHub.CallOpts, relayedCallStipend)
}

// RequiredGas is a free data retrieval call binding the contract method 0x6a7d84a4.
//
// Solidity: function requiredGas(uint256 relayedCallStipend) view returns(uint256)
func (_IRelayHub *IRelayHubCallerSession) RequiredGas(relayedCallStipend *big.Int) (*big.Int, error) {
	return _IRelayHub.Contract.RequiredGas(&_IRelayHub.CallOpts, relayedCallStipend)
}

// DepositFor is a paid mutator transaction binding the contract method 0xaa67c919.
//
// Solidity: function depositFor(address target) payable returns()
func (_IRelayHub *IRelayHubTransactor) DepositFor(opts *bind.TransactOpts, target common.Address) (*types.Transaction, error) {
	return _IRelayHub.contract.Transact(opts, "depositFor", target)
}

// DepositFor is a paid mutator transaction binding the contract method 0xaa67c919.
//
// Solidity: function depositFor(address target) payable returns()
func (_IRelayHub *IRelayHubSession) DepositFor(target common.Address) (*types.Transaction, error) {
	return _IRelayHub.Contract.DepositFor(&_IRelayHub.TransactOpts, target)
}

// DepositFor is a paid mutator transaction binding the contract method 0xaa67c919.
//
// Solidity: function depositFor(address target) payable returns()
func (_IRelayHub *IRelayHubTransactorSession) DepositFor(target common.Address) (*types.Transaction, error) {
	return _IRelayHub.Contract.DepositFor(&_IRelayHub.TransactOpts, target)
}

// PenalizeIllegalTransaction is a paid mutator transaction binding the contract method 0x39002432.
//
// Solidity: function penalizeIllegalTransaction(bytes unsignedTx, bytes signature) returns()
func (_IRelayHub *IRelayHubTransactor) PenalizeIllegalTransaction(opts *bind.TransactOpts, unsignedTx []byte, signature []byte) (*types.Transaction, error) {
	return _IRelayHub.contract.Transact(opts, "penalizeIllegalTransaction", unsignedTx, signature)
}

// PenalizeIllegalTransaction is a paid mutator transaction binding the contract method 0x39002432.
//
// Solidity: function penalizeIllegalTransaction(bytes unsignedTx, bytes signature) returns()
func (_IRelayHub *IRelayHubSession) PenalizeIllegalTransaction(unsignedTx []byte, signature []byte) (*types.Transaction, error) {
	return _IRelayHub.Contract.PenalizeIllegalTransaction(&_IRelayHub.TransactOpts, unsignedTx, signature)
}

// PenalizeIllegalTransaction is a paid mutator transaction binding the contract method 0x39002432.
//
// Solidity: function penalizeIllegalTransaction(bytes unsignedTx, bytes signature) returns()
func (_IRelayHub *IRelayHubTransactorSession) PenalizeIllegalTransaction(unsignedTx []byte, signature []byte) (*types.Transaction, error) {
	return _IRelayHub.Contract.PenalizeIllegalTransaction(&_IRelayHub.TransactOpts, unsignedTx, signature)
}

// PenalizeRepeatedNonce is a paid mutator transaction binding the contract method 0xa8cd9572.
//
// Solidity: function penalizeRepeatedNonce(bytes unsignedTx1, bytes signature1, bytes unsignedTx2, bytes signature2) returns()
func (_IRelayHub *IRelayHubTransactor) PenalizeRepeatedNonce(opts *bind.TransactOpts, unsignedTx1 []byte, signature1 []byte, unsignedTx2 []byte, signature2 []byte) (*types.Transaction, error) {
	return _IRelayHub.contract.Transact(opts, "penalizeRepeatedNonce", unsignedTx1, signature1, unsignedTx2, signature2)
}

// PenalizeRepeatedNonce is a paid mutator transaction binding the contract method 0xa8cd9572.
//
// Solidity: function penalizeRepeatedNonce(bytes unsignedTx1, bytes signature1, bytes unsignedTx2, bytes signature2) returns()
func (_IRelayHub *IRelayHubSession) PenalizeRepeatedNonce(unsignedTx1 []byte, signature1 []byte, unsignedTx2 []byte, signature2 []byte) (*types.Transaction, error) {
	return _IRelayHub.Contract.PenalizeRepeatedNonce(&_IRelayHub.TransactOpts, unsignedTx1, signature1, unsignedTx2, signature2)
}

// PenalizeRepeatedNonce is a paid mutator transaction binding the contract method 0xa8cd9572.
//
// Solidity: function penalizeRepeatedNonce(bytes unsignedTx1, bytes signature1, bytes unsignedTx2, bytes signature2) returns()
func (_IRelayHub *IRelayHubTransactorSession) PenalizeRepeatedNonce(unsignedTx1 []byte, signature1 []byte, unsignedTx2 []byte, signature2 []byte) (*types.Transaction, error) {
	return _IRelayHub.Contract.PenalizeRepeatedNonce(&_IRelayHub.TransactOpts, unsignedTx1, signature1, unsignedTx2, signature2)
}

// RegisterRelay is a paid mutator transaction binding the contract method 0x1166073a.
//
// Solidity: function registerRelay(uint256 transactionFee, string url) returns()
func (_IRelayHub *IRelayHubTransactor) RegisterRelay(opts *bind.TransactOpts, transactionFee *big.Int, url string) (*types.Transaction, error) {
	return _IRelayHub.contract.Transact(opts, "registerRelay", transactionFee, url)
}

// RegisterRelay is a paid mutator transaction binding the contract method 0x1166073a.
//
// Solidity: function registerRelay(uint256 transactionFee, string url) returns()
func (_IRelayHub *IRelayHubSession) RegisterRelay(transactionFee *big.Int, url string) (*types.Transaction, error) {
	return _IRelayHub.Contract.RegisterRelay(&_IRelayHub.TransactOpts, transactionFee, url)
}

// RegisterRelay is a paid mutator transaction binding the contract method 0x1166073a.
//
// Solidity: function registerRelay(uint256 transactionFee, string url) returns()
func (_IRelayHub *IRelayHubTransactorSession) RegisterRelay(transactionFee *big.Int, url string) (*types.Transaction, error) {
	return _IRelayHub.Contract.RegisterRelay(&_IRelayHub.TransactOpts, transactionFee, url)
}

// RelayCall is a paid mutator transaction binding the contract method 0x405cec67.
//
// Solidity: function relayCall(address from, address to, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes signature, bytes approvalData) returns()
func (_IRelayHub *IRelayHubTransactor) RelayCall(opts *bind.TransactOpts, from common.Address, to common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, signature []byte, approvalData []byte) (*types.Transaction, error) {
	return _IRelayHub.contract.Transact(opts, "relayCall", from, to, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData)
}

// RelayCall is a paid mutator transaction binding the contract method 0x405cec67.
//
// Solidity: function relayCall(address from, address to, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes signature, bytes approvalData) returns()
func (_IRelayHub *IRelayHubSession) RelayCall(from common.Address, to common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, signature []byte, approvalData []byte) (*types.Transaction, error) {
	return _IRelayHub.Contract.RelayCall(&_IRelayHub.TransactOpts, from, to, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData)
}

// RelayCall is a paid mutator transaction binding the contract method 0x405cec67.
//
// Solidity: function relayCall(address from, address to, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes signature, bytes approvalData) returns()
func (_IRelayHub *IRelayHubTransactorSession) RelayCall(from common.Address, to common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, signature []byte, approvalData []byte) (*types.Transaction, error) {
	return _IRelayHub.Contract.RelayCall(&_IRelayHub.TransactOpts, from, to, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData)
}

// RemoveRelayByOwner is a paid mutator transaction binding the contract method 0xc3e712f2.
//
// Solidity: function removeRelayByOwner(address relay) returns()
func (_IRelayHub *IRelayHubTransactor) RemoveRelayByOwner(opts *bind.TransactOpts, relay common.Address) (*types.Transaction, error) {
	return _IRelayHub.contract.Transact(opts, "removeRelayByOwner", relay)
}

// RemoveRelayByOwner is a paid mutator transaction binding the contract method 0xc3e712f2.
//
// Solidity: function removeRelayByOwner(address relay) returns()
func (_IRelayHub *IRelayHubSession) RemoveRelayByOwner(relay common.Address) (*types.Transaction, error) {
	return _IRelayHub.Contract.RemoveRelayByOwner(&_IRelayHub.TransactOpts, relay)
}

// RemoveRelayByOwner is a paid mutator transaction binding the contract method 0xc3e712f2.
//
// Solidity: function removeRelayByOwner(address relay) returns()
func (_IRelayHub *IRelayHubTransactorSession) RemoveRelayByOwner(relay common.Address) (*types.Transaction, error) {
	return _IRelayHub.Contract.RemoveRelayByOwner(&_IRelayHub.TransactOpts, relay)
}

// Stake is a paid mutator transaction binding the contract method 0xadc9772e.
//
// Solidity: function stake(address relayaddr, uint256 unstakeDelay) payable returns()
func (_IRelayHub *IRelayHubTransactor) Stake(opts *bind.TransactOpts, relayaddr common.Address, unstakeDelay *big.Int) (*types.Transaction, error) {
	return _IRelayHub.contract.Transact(opts, "stake", relayaddr, unstakeDelay)
}

// Stake is a paid mutator transaction binding the contract method 0xadc9772e.
//
// Solidity: function stake(address relayaddr, uint256 unstakeDelay) payable returns()
func (_IRelayHub *IRelayHubSession) Stake(relayaddr common.Address, unstakeDelay *big.Int) (*types.Transaction, error) {
	return _IRelayHub.Contract.Stake(&_IRelayHub.TransactOpts, relayaddr, unstakeDelay)
}

// Stake is a paid mutator transaction binding the contract method 0xadc9772e.
//
// Solidity: function stake(address relayaddr, uint256 unstakeDelay) payable returns()
func (_IRelayHub *IRelayHubTransactorSession) Stake(relayaddr common.Address, unstakeDelay *big.Int) (*types.Transaction, error) {
	return _IRelayHub.Contract.Stake(&_IRelayHub.TransactOpts, relayaddr, unstakeDelay)
}

// Unstake is a paid mutator transaction binding the contract method 0xf2888dbb.
//
// Solidity: function unstake(address relay) returns()
func (_IRelayHub *IRelayHubTransactor) Unstake(opts *bind.TransactOpts, relay common.Address) (*types.Transaction, error) {
	return _IRelayHub.contract.Transact(opts, "unstake", relay)
}

// Unstake is a paid mutator transaction binding the contract method 0xf2888dbb.
//
// Solidity: function unstake(address relay) returns()
func (_IRelayHub *IRelayHubSession) Unstake(relay common.Address) (*types.Transaction, error) {
	return _IRelayHub.Contract.Unstake(&_IRelayHub.TransactOpts, relay)
}

// Unstake is a paid mutator transaction binding the contract method 0xf2888dbb.
//
// Solidity: function unstake(address relay) returns()
func (_IRelayHub *IRelayHubTransactorSession) Unstake(relay common.Address) (*types.Transaction, error) {
	return _IRelayHub.Contract.Unstake(&_IRelayHub.TransactOpts, relay)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 amount, address dest) returns()
func (_IRelayHub *IRelayHubTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int, dest common.Address) (*types.Transaction, error) {
	return _IRelayHub.contract.Transact(opts, "withdraw", amount, dest)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 amount, address dest) returns()
func (_IRelayHub *IRelayHubSession) Withdraw(amount *big.Int, dest common.Address) (*types.Transaction, error) {
	return _IRelayHub.Contract.Withdraw(&_IRelayHub.TransactOpts, amount, dest)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 amount, address dest) returns()
func (_IRelayHub *IRelayHubTransactorSession) Withdraw(amount *big.Int, dest common.Address) (*types.Transaction, error) {
	return _IRelayHub.Contract.Withdraw(&_IRelayHub.TransactOpts, amount, dest)
}

// IRelayHubCanRelayFailedIterator is returned from FilterCanRelayFailed and is used to iterate over the raw logs and unpacked data for CanRelayFailed events raised by the IRelayHub contract.
type IRelayHubCanRelayFailedIterator struct {
	Event *IRelayHubCanRelayFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRelayHubCanRelayFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRelayHubCanRelayFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRelayHubCanRelayFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRelayHubCanRelayFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRelayHubCanRelayFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRelayHubCanRelayFailed represents a CanRelayFailed event raised by the IRelayHub contract.
type IRelayHubCanRelayFailed struct {
	Relay    common.Address
	From     common.Address
	To       common.Address
	Selector [4]byte
	Reason   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterCanRelayFailed is a free log retrieval operation binding the contract event 0xafb5afd6d1c2e8ffbfb480e674a169f493ece0b22658d4f4484e7334f0241e22.
//
// Solidity: event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason)
func (_IRelayHub *IRelayHubFilterer) FilterCanRelayFailed(opts *bind.FilterOpts, relay []common.Address, from []common.Address, to []common.Address) (*IRelayHubCanRelayFailedIterator, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IRelayHub.contract.FilterLogs(opts, "CanRelayFailed", relayRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IRelayHubCanRelayFailedIterator{contract: _IRelayHub.contract, event: "CanRelayFailed", logs: logs, sub: sub}, nil
}

// WatchCanRelayFailed is a free log subscription operation binding the contract event 0xafb5afd6d1c2e8ffbfb480e674a169f493ece0b22658d4f4484e7334f0241e22.
//
// Solidity: event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason)
func (_IRelayHub *IRelayHubFilterer) WatchCanRelayFailed(opts *bind.WatchOpts, sink chan<- *IRelayHubCanRelayFailed, relay []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IRelayHub.contract.WatchLogs(opts, "CanRelayFailed", relayRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRelayHubCanRelayFailed)
				if err := _IRelayHub.contract.UnpackLog(event, "CanRelayFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCanRelayFailed is a log parse operation binding the contract event 0xafb5afd6d1c2e8ffbfb480e674a169f493ece0b22658d4f4484e7334f0241e22.
//
// Solidity: event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason)
func (_IRelayHub *IRelayHubFilterer) ParseCanRelayFailed(log types.Log) (*IRelayHubCanRelayFailed, error) {
	event := new(IRelayHubCanRelayFailed)
	if err := _IRelayHub.contract.UnpackLog(event, "CanRelayFailed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IRelayHubDepositedIterator is returned from FilterDeposited and is used to iterate over the raw logs and unpacked data for Deposited events raised by the IRelayHub contract.
type IRelayHubDepositedIterator struct {
	Event *IRelayHubDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRelayHubDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRelayHubDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRelayHubDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRelayHubDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRelayHubDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRelayHubDeposited represents a Deposited event raised by the IRelayHub contract.
type IRelayHubDeposited struct {
	Recipient common.Address
	From      common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDeposited is a free log retrieval operation binding the contract event 0x8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7.
//
// Solidity: event Deposited(address indexed recipient, address indexed from, uint256 amount)
func (_IRelayHub *IRelayHubFilterer) FilterDeposited(opts *bind.FilterOpts, recipient []common.Address, from []common.Address) (*IRelayHubDepositedIterator, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _IRelayHub.contract.FilterLogs(opts, "Deposited", recipientRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &IRelayHubDepositedIterator{contract: _IRelayHub.contract, event: "Deposited", logs: logs, sub: sub}, nil
}

// WatchDeposited is a free log subscription operation binding the contract event 0x8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7.
//
// Solidity: event Deposited(address indexed recipient, address indexed from, uint256 amount)
func (_IRelayHub *IRelayHubFilterer) WatchDeposited(opts *bind.WatchOpts, sink chan<- *IRelayHubDeposited, recipient []common.Address, from []common.Address) (event.Subscription, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _IRelayHub.contract.WatchLogs(opts, "Deposited", recipientRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRelayHubDeposited)
				if err := _IRelayHub.contract.UnpackLog(event, "Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposited is a log parse operation binding the contract event 0x8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7.
//
// Solidity: event Deposited(address indexed recipient, address indexed from, uint256 amount)
func (_IRelayHub *IRelayHubFilterer) ParseDeposited(log types.Log) (*IRelayHubDeposited, error) {
	event := new(IRelayHubDeposited)
	if err := _IRelayHub.contract.UnpackLog(event, "Deposited", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IRelayHubPenalizedIterator is returned from FilterPenalized and is used to iterate over the raw logs and unpacked data for Penalized events raised by the IRelayHub contract.
type IRelayHubPenalizedIterator struct {
	Event *IRelayHubPenalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRelayHubPenalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRelayHubPenalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRelayHubPenalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRelayHubPenalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRelayHubPenalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRelayHubPenalized represents a Penalized event raised by the IRelayHub contract.
type IRelayHubPenalized struct {
	Relay  common.Address
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPenalized is a free log retrieval operation binding the contract event 0xb0595266ccec357806b2691f348b128209f1060a0bda4f5c95f7090730351ff8.
//
// Solidity: event Penalized(address indexed relay, address sender, uint256 amount)
func (_IRelayHub *IRelayHubFilterer) FilterPenalized(opts *bind.FilterOpts, relay []common.Address) (*IRelayHubPenalizedIterator, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}

	logs, sub, err := _IRelayHub.contract.FilterLogs(opts, "Penalized", relayRule)
	if err != nil {
		return nil, err
	}
	return &IRelayHubPenalizedIterator{contract: _IRelayHub.contract, event: "Penalized", logs: logs, sub: sub}, nil
}

// WatchPenalized is a free log subscription operation binding the contract event 0xb0595266ccec357806b2691f348b128209f1060a0bda4f5c95f7090730351ff8.
//
// Solidity: event Penalized(address indexed relay, address sender, uint256 amount)
func (_IRelayHub *IRelayHubFilterer) WatchPenalized(opts *bind.WatchOpts, sink chan<- *IRelayHubPenalized, relay []common.Address) (event.Subscription, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}

	logs, sub, err := _IRelayHub.contract.WatchLogs(opts, "Penalized", relayRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRelayHubPenalized)
				if err := _IRelayHub.contract.UnpackLog(event, "Penalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePenalized is a log parse operation binding the contract event 0xb0595266ccec357806b2691f348b128209f1060a0bda4f5c95f7090730351ff8.
//
// Solidity: event Penalized(address indexed relay, address sender, uint256 amount)
func (_IRelayHub *IRelayHubFilterer) ParsePenalized(log types.Log) (*IRelayHubPenalized, error) {
	event := new(IRelayHubPenalized)
	if err := _IRelayHub.contract.UnpackLog(event, "Penalized", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IRelayHubRelayAddedIterator is returned from FilterRelayAdded and is used to iterate over the raw logs and unpacked data for RelayAdded events raised by the IRelayHub contract.
type IRelayHubRelayAddedIterator struct {
	Event *IRelayHubRelayAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRelayHubRelayAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRelayHubRelayAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRelayHubRelayAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRelayHubRelayAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRelayHubRelayAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRelayHubRelayAdded represents a RelayAdded event raised by the IRelayHub contract.
type IRelayHubRelayAdded struct {
	Relay          common.Address
	Owner          common.Address
	TransactionFee *big.Int
	Stake          *big.Int
	UnstakeDelay   *big.Int
	Url            string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRelayAdded is a free log retrieval operation binding the contract event 0x85b3ae3aae9d3fcb31142fbd8c3b4722d57825b8edd6e1366e69204afa5a0dfa.
//
// Solidity: event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url)
func (_IRelayHub *IRelayHubFilterer) FilterRelayAdded(opts *bind.FilterOpts, relay []common.Address, owner []common.Address) (*IRelayHubRelayAddedIterator, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _IRelayHub.contract.FilterLogs(opts, "RelayAdded", relayRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &IRelayHubRelayAddedIterator{contract: _IRelayHub.contract, event: "RelayAdded", logs: logs, sub: sub}, nil
}

// WatchRelayAdded is a free log subscription operation binding the contract event 0x85b3ae3aae9d3fcb31142fbd8c3b4722d57825b8edd6e1366e69204afa5a0dfa.
//
// Solidity: event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url)
func (_IRelayHub *IRelayHubFilterer) WatchRelayAdded(opts *bind.WatchOpts, sink chan<- *IRelayHubRelayAdded, relay []common.Address, owner []common.Address) (event.Subscription, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _IRelayHub.contract.WatchLogs(opts, "RelayAdded", relayRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRelayHubRelayAdded)
				if err := _IRelayHub.contract.UnpackLog(event, "RelayAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayAdded is a log parse operation binding the contract event 0x85b3ae3aae9d3fcb31142fbd8c3b4722d57825b8edd6e1366e69204afa5a0dfa.
//
// Solidity: event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url)
func (_IRelayHub *IRelayHubFilterer) ParseRelayAdded(log types.Log) (*IRelayHubRelayAdded, error) {
	event := new(IRelayHubRelayAdded)
	if err := _IRelayHub.contract.UnpackLog(event, "RelayAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IRelayHubRelayRemovedIterator is returned from FilterRelayRemoved and is used to iterate over the raw logs and unpacked data for RelayRemoved events raised by the IRelayHub contract.
type IRelayHubRelayRemovedIterator struct {
	Event *IRelayHubRelayRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRelayHubRelayRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRelayHubRelayRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRelayHubRelayRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRelayHubRelayRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRelayHubRelayRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRelayHubRelayRemoved represents a RelayRemoved event raised by the IRelayHub contract.
type IRelayHubRelayRemoved struct {
	Relay       common.Address
	UnstakeTime *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRelayRemoved is a free log retrieval operation binding the contract event 0x5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d11.
//
// Solidity: event RelayRemoved(address indexed relay, uint256 unstakeTime)
func (_IRelayHub *IRelayHubFilterer) FilterRelayRemoved(opts *bind.FilterOpts, relay []common.Address) (*IRelayHubRelayRemovedIterator, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}

	logs, sub, err := _IRelayHub.contract.FilterLogs(opts, "RelayRemoved", relayRule)
	if err != nil {
		return nil, err
	}
	return &IRelayHubRelayRemovedIterator{contract: _IRelayHub.contract, event: "RelayRemoved", logs: logs, sub: sub}, nil
}

// WatchRelayRemoved is a free log subscription operation binding the contract event 0x5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d11.
//
// Solidity: event RelayRemoved(address indexed relay, uint256 unstakeTime)
func (_IRelayHub *IRelayHubFilterer) WatchRelayRemoved(opts *bind.WatchOpts, sink chan<- *IRelayHubRelayRemoved, relay []common.Address) (event.Subscription, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}

	logs, sub, err := _IRelayHub.contract.WatchLogs(opts, "RelayRemoved", relayRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRelayHubRelayRemoved)
				if err := _IRelayHub.contract.UnpackLog(event, "RelayRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayRemoved is a log parse operation binding the contract event 0x5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d11.
//
// Solidity: event RelayRemoved(address indexed relay, uint256 unstakeTime)
func (_IRelayHub *IRelayHubFilterer) ParseRelayRemoved(log types.Log) (*IRelayHubRelayRemoved, error) {
	event := new(IRelayHubRelayRemoved)
	if err := _IRelayHub.contract.UnpackLog(event, "RelayRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IRelayHubStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the IRelayHub contract.
type IRelayHubStakedIterator struct {
	Event *IRelayHubStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRelayHubStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRelayHubStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRelayHubStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRelayHubStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRelayHubStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRelayHubStaked represents a Staked event raised by the IRelayHub contract.
type IRelayHubStaked struct {
	Relay        common.Address
	Stake        *big.Int
	UnstakeDelay *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay)
func (_IRelayHub *IRelayHubFilterer) FilterStaked(opts *bind.FilterOpts, relay []common.Address) (*IRelayHubStakedIterator, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}

	logs, sub, err := _IRelayHub.contract.FilterLogs(opts, "Staked", relayRule)
	if err != nil {
		return nil, err
	}
	return &IRelayHubStakedIterator{contract: _IRelayHub.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay)
func (_IRelayHub *IRelayHubFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *IRelayHubStaked, relay []common.Address) (event.Subscription, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}

	logs, sub, err := _IRelayHub.contract.WatchLogs(opts, "Staked", relayRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRelayHubStaked)
				if err := _IRelayHub.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay)
func (_IRelayHub *IRelayHubFilterer) ParseStaked(log types.Log) (*IRelayHubStaked, error) {
	event := new(IRelayHubStaked)
	if err := _IRelayHub.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IRelayHubTransactionRelayedIterator is returned from FilterTransactionRelayed and is used to iterate over the raw logs and unpacked data for TransactionRelayed events raised by the IRelayHub contract.
type IRelayHubTransactionRelayedIterator struct {
	Event *IRelayHubTransactionRelayed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRelayHubTransactionRelayedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRelayHubTransactionRelayed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRelayHubTransactionRelayed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRelayHubTransactionRelayedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRelayHubTransactionRelayedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRelayHubTransactionRelayed represents a TransactionRelayed event raised by the IRelayHub contract.
type IRelayHubTransactionRelayed struct {
	Relay    common.Address
	From     common.Address
	To       common.Address
	Selector [4]byte
	Status   uint8
	Charge   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransactionRelayed is a free log retrieval operation binding the contract event 0xab74390d395916d9e0006298d47938a5def5d367054dcca78fa6ec84381f3f22.
//
// Solidity: event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint8 status, uint256 charge)
func (_IRelayHub *IRelayHubFilterer) FilterTransactionRelayed(opts *bind.FilterOpts, relay []common.Address, from []common.Address, to []common.Address) (*IRelayHubTransactionRelayedIterator, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IRelayHub.contract.FilterLogs(opts, "TransactionRelayed", relayRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IRelayHubTransactionRelayedIterator{contract: _IRelayHub.contract, event: "TransactionRelayed", logs: logs, sub: sub}, nil
}

// WatchTransactionRelayed is a free log subscription operation binding the contract event 0xab74390d395916d9e0006298d47938a5def5d367054dcca78fa6ec84381f3f22.
//
// Solidity: event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint8 status, uint256 charge)
func (_IRelayHub *IRelayHubFilterer) WatchTransactionRelayed(opts *bind.WatchOpts, sink chan<- *IRelayHubTransactionRelayed, relay []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IRelayHub.contract.WatchLogs(opts, "TransactionRelayed", relayRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRelayHubTransactionRelayed)
				if err := _IRelayHub.contract.UnpackLog(event, "TransactionRelayed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionRelayed is a log parse operation binding the contract event 0xab74390d395916d9e0006298d47938a5def5d367054dcca78fa6ec84381f3f22.
//
// Solidity: event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint8 status, uint256 charge)
func (_IRelayHub *IRelayHubFilterer) ParseTransactionRelayed(log types.Log) (*IRelayHubTransactionRelayed, error) {
	event := new(IRelayHubTransactionRelayed)
	if err := _IRelayHub.contract.UnpackLog(event, "TransactionRelayed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IRelayHubUnstakedIterator is returned from FilterUnstaked and is used to iterate over the raw logs and unpacked data for Unstaked events raised by the IRelayHub contract.
type IRelayHubUnstakedIterator struct {
	Event *IRelayHubUnstaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRelayHubUnstakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRelayHubUnstaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRelayHubUnstaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRelayHubUnstakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRelayHubUnstakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRelayHubUnstaked represents a Unstaked event raised by the IRelayHub contract.
type IRelayHubUnstaked struct {
	Relay common.Address
	Stake *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterUnstaked is a free log retrieval operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed relay, uint256 stake)
func (_IRelayHub *IRelayHubFilterer) FilterUnstaked(opts *bind.FilterOpts, relay []common.Address) (*IRelayHubUnstakedIterator, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}

	logs, sub, err := _IRelayHub.contract.FilterLogs(opts, "Unstaked", relayRule)
	if err != nil {
		return nil, err
	}
	return &IRelayHubUnstakedIterator{contract: _IRelayHub.contract, event: "Unstaked", logs: logs, sub: sub}, nil
}

// WatchUnstaked is a free log subscription operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed relay, uint256 stake)
func (_IRelayHub *IRelayHubFilterer) WatchUnstaked(opts *bind.WatchOpts, sink chan<- *IRelayHubUnstaked, relay []common.Address) (event.Subscription, error) {

	var relayRule []interface{}
	for _, relayItem := range relay {
		relayRule = append(relayRule, relayItem)
	}

	logs, sub, err := _IRelayHub.contract.WatchLogs(opts, "Unstaked", relayRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRelayHubUnstaked)
				if err := _IRelayHub.contract.UnpackLog(event, "Unstaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstaked is a log parse operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed relay, uint256 stake)
func (_IRelayHub *IRelayHubFilterer) ParseUnstaked(log types.Log) (*IRelayHubUnstaked, error) {
	event := new(IRelayHubUnstaked)
	if err := _IRelayHub.contract.UnpackLog(event, "Unstaked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IRelayHubWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the IRelayHub contract.
type IRelayHubWithdrawnIterator struct {
	Event *IRelayHubWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IRelayHubWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IRelayHubWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IRelayHubWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IRelayHubWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IRelayHubWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IRelayHubWithdrawn represents a Withdrawn event raised by the IRelayHub contract.
type IRelayHubWithdrawn struct {
	Account common.Address
	Dest    common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb.
//
// Solidity: event Withdrawn(address indexed account, address indexed dest, uint256 amount)
func (_IRelayHub *IRelayHubFilterer) FilterWithdrawn(opts *bind.FilterOpts, account []common.Address, dest []common.Address) (*IRelayHubWithdrawnIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var destRule []interface{}
	for _, destItem := range dest {
		destRule = append(destRule, destItem)
	}

	logs, sub, err := _IRelayHub.contract.FilterLogs(opts, "Withdrawn", accountRule, destRule)
	if err != nil {
		return nil, err
	}
	return &IRelayHubWithdrawnIterator{contract: _IRelayHub.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb.
//
// Solidity: event Withdrawn(address indexed account, address indexed dest, uint256 amount)
func (_IRelayHub *IRelayHubFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *IRelayHubWithdrawn, account []common.Address, dest []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var destRule []interface{}
	for _, destItem := range dest {
		destRule = append(destRule, destItem)
	}

	logs, sub, err := _IRelayHub.contract.WatchLogs(opts, "Withdrawn", accountRule, destRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IRelayHubWithdrawn)
				if err := _IRelayHub.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb.
//
// Solidity: event Withdrawn(address indexed account, address indexed dest, uint256 amount)
func (_IRelayHub *IRelayHubFilterer) ParseWithdrawn(log types.Log) (*IRelayHubWithdrawn, error) {
	event := new(IRelayHubWithdrawn)
	if err := _IRelayHub.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IRelayRecipientABI is the input ABI used to generate the binding from.
const IRelayRecipientABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedFunction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxPossibleCharge\",\"type\":\"uint256\"}],\"name\":\"acceptRelayedCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHubAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"actualCharge\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"preRetVal\",\"type\":\"bytes32\"}],\"name\":\"postRelayedCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"preRelayedCall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IRelayRecipient is an auto generated Go binding around an Ethereum contract.
type IRelayRecipient struct {
	IRelayRecipientCaller     // Read-only binding to the contract
	IRelayRecipientTransactor // Write-only binding to the contract
	IRelayRecipientFilterer   // Log filterer for contract events
}

// IRelayRecipientCaller is an auto generated read-only Go binding around an Ethereum contract.
type IRelayRecipientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRelayRecipientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IRelayRecipientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRelayRecipientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IRelayRecipientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IRelayRecipientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IRelayRecipientSession struct {
	Contract     *IRelayRecipient  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IRelayRecipientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IRelayRecipientCallerSession struct {
	Contract *IRelayRecipientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IRelayRecipientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IRelayRecipientTransactorSession struct {
	Contract     *IRelayRecipientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IRelayRecipientRaw is an auto generated low-level Go binding around an Ethereum contract.
type IRelayRecipientRaw struct {
	Contract *IRelayRecipient // Generic contract binding to access the raw methods on
}

// IRelayRecipientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IRelayRecipientCallerRaw struct {
	Contract *IRelayRecipientCaller // Generic read-only contract binding to access the raw methods on
}

// IRelayRecipientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IRelayRecipientTransactorRaw struct {
	Contract *IRelayRecipientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIRelayRecipient creates a new instance of IRelayRecipient, bound to a specific deployed contract.
func NewIRelayRecipient(address common.Address, backend bind.ContractBackend) (*IRelayRecipient, error) {
	contract, err := bindIRelayRecipient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IRelayRecipient{IRelayRecipientCaller: IRelayRecipientCaller{contract: contract}, IRelayRecipientTransactor: IRelayRecipientTransactor{contract: contract}, IRelayRecipientFilterer: IRelayRecipientFilterer{contract: contract}}, nil
}

// NewIRelayRecipientCaller creates a new read-only instance of IRelayRecipient, bound to a specific deployed contract.
func NewIRelayRecipientCaller(address common.Address, caller bind.ContractCaller) (*IRelayRecipientCaller, error) {
	contract, err := bindIRelayRecipient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IRelayRecipientCaller{contract: contract}, nil
}

// NewIRelayRecipientTransactor creates a new write-only instance of IRelayRecipient, bound to a specific deployed contract.
func NewIRelayRecipientTransactor(address common.Address, transactor bind.ContractTransactor) (*IRelayRecipientTransactor, error) {
	contract, err := bindIRelayRecipient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IRelayRecipientTransactor{contract: contract}, nil
}

// NewIRelayRecipientFilterer creates a new log filterer instance of IRelayRecipient, bound to a specific deployed contract.
func NewIRelayRecipientFilterer(address common.Address, filterer bind.ContractFilterer) (*IRelayRecipientFilterer, error) {
	contract, err := bindIRelayRecipient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IRelayRecipientFilterer{contract: contract}, nil
}

// bindIRelayRecipient binds a generic wrapper to an already deployed contract.
func bindIRelayRecipient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IRelayRecipientABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRelayRecipient *IRelayRecipientRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IRelayRecipient.Contract.IRelayRecipientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRelayRecipient *IRelayRecipientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRelayRecipient.Contract.IRelayRecipientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRelayRecipient *IRelayRecipientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRelayRecipient.Contract.IRelayRecipientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IRelayRecipient *IRelayRecipientCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IRelayRecipient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IRelayRecipient *IRelayRecipientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IRelayRecipient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IRelayRecipient *IRelayRecipientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IRelayRecipient.Contract.contract.Transact(opts, method, params...)
}

// AcceptRelayedCall is a free data retrieval call binding the contract method 0x83947ea0.
//
// Solidity: function acceptRelayedCall(address relay, address from, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes approvalData, uint256 maxPossibleCharge) view returns(uint256, bytes)
func (_IRelayRecipient *IRelayRecipientCaller) AcceptRelayedCall(opts *bind.CallOpts, relay common.Address, from common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, approvalData []byte, maxPossibleCharge *big.Int) (*big.Int, []byte, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new([]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _IRelayRecipient.contract.Call(opts, out, "acceptRelayedCall", relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, approvalData, maxPossibleCharge)
	return *ret0, *ret1, err
}

// AcceptRelayedCall is a free data retrieval call binding the contract method 0x83947ea0.
//
// Solidity: function acceptRelayedCall(address relay, address from, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes approvalData, uint256 maxPossibleCharge) view returns(uint256, bytes)
func (_IRelayRecipient *IRelayRecipientSession) AcceptRelayedCall(relay common.Address, from common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, approvalData []byte, maxPossibleCharge *big.Int) (*big.Int, []byte, error) {
	return _IRelayRecipient.Contract.AcceptRelayedCall(&_IRelayRecipient.CallOpts, relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, approvalData, maxPossibleCharge)
}

// AcceptRelayedCall is a free data retrieval call binding the contract method 0x83947ea0.
//
// Solidity: function acceptRelayedCall(address relay, address from, bytes encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes approvalData, uint256 maxPossibleCharge) view returns(uint256, bytes)
func (_IRelayRecipient *IRelayRecipientCallerSession) AcceptRelayedCall(relay common.Address, from common.Address, encodedFunction []byte, transactionFee *big.Int, gasPrice *big.Int, gasLimit *big.Int, nonce *big.Int, approvalData []byte, maxPossibleCharge *big.Int) (*big.Int, []byte, error) {
	return _IRelayRecipient.Contract.AcceptRelayedCall(&_IRelayRecipient.CallOpts, relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, approvalData, maxPossibleCharge)
}

// GetHubAddr is a free data retrieval call binding the contract method 0x74e861d6.
//
// Solidity: function getHubAddr() view returns(address)
func (_IRelayRecipient *IRelayRecipientCaller) GetHubAddr(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IRelayRecipient.contract.Call(opts, out, "getHubAddr")
	return *ret0, err
}

// GetHubAddr is a free data retrieval call binding the contract method 0x74e861d6.
//
// Solidity: function getHubAddr() view returns(address)
func (_IRelayRecipient *IRelayRecipientSession) GetHubAddr() (common.Address, error) {
	return _IRelayRecipient.Contract.GetHubAddr(&_IRelayRecipient.CallOpts)
}

// GetHubAddr is a free data retrieval call binding the contract method 0x74e861d6.
//
// Solidity: function getHubAddr() view returns(address)
func (_IRelayRecipient *IRelayRecipientCallerSession) GetHubAddr() (common.Address, error) {
	return _IRelayRecipient.Contract.GetHubAddr(&_IRelayRecipient.CallOpts)
}

// PostRelayedCall is a paid mutator transaction binding the contract method 0xe06e0e22.
//
// Solidity: function postRelayedCall(bytes context, bool success, uint256 actualCharge, bytes32 preRetVal) returns()
func (_IRelayRecipient *IRelayRecipientTransactor) PostRelayedCall(opts *bind.TransactOpts, context []byte, success bool, actualCharge *big.Int, preRetVal [32]byte) (*types.Transaction, error) {
	return _IRelayRecipient.contract.Transact(opts, "postRelayedCall", context, success, actualCharge, preRetVal)
}

// PostRelayedCall is a paid mutator transaction binding the contract method 0xe06e0e22.
//
// Solidity: function postRelayedCall(bytes context, bool success, uint256 actualCharge, bytes32 preRetVal) returns()
func (_IRelayRecipient *IRelayRecipientSession) PostRelayedCall(context []byte, success bool, actualCharge *big.Int, preRetVal [32]byte) (*types.Transaction, error) {
	return _IRelayRecipient.Contract.PostRelayedCall(&_IRelayRecipient.TransactOpts, context, success, actualCharge, preRetVal)
}

// PostRelayedCall is a paid mutator transaction binding the contract method 0xe06e0e22.
//
// Solidity: function postRelayedCall(bytes context, bool success, uint256 actualCharge, bytes32 preRetVal) returns()
func (_IRelayRecipient *IRelayRecipientTransactorSession) PostRelayedCall(context []byte, success bool, actualCharge *big.Int, preRetVal [32]byte) (*types.Transaction, error) {
	return _IRelayRecipient.Contract.PostRelayedCall(&_IRelayRecipient.TransactOpts, context, success, actualCharge, preRetVal)
}

// PreRelayedCall is a paid mutator transaction binding the contract method 0x80274db7.
//
// Solidity: function preRelayedCall(bytes context) returns(bytes32)
func (_IRelayRecipient *IRelayRecipientTransactor) PreRelayedCall(opts *bind.TransactOpts, context []byte) (*types.Transaction, error) {
	return _IRelayRecipient.contract.Transact(opts, "preRelayedCall", context)
}

// PreRelayedCall is a paid mutator transaction binding the contract method 0x80274db7.
//
// Solidity: function preRelayedCall(bytes context) returns(bytes32)
func (_IRelayRecipient *IRelayRecipientSession) PreRelayedCall(context []byte) (*types.Transaction, error) {
	return _IRelayRecipient.Contract.PreRelayedCall(&_IRelayRecipient.TransactOpts, context)
}

// PreRelayedCall is a paid mutator transaction binding the contract method 0x80274db7.
//
// Solidity: function preRelayedCall(bytes context) returns(bytes32)
func (_IRelayRecipient *IRelayRecipientTransactorSession) PreRelayedCall(context []byte) (*types.Transaction, error) {
	return _IRelayRecipient.Contract.PreRelayedCall(&_IRelayRecipient.TransactOpts, context)
}

// InitializableABI is the input ABI used to generate the binding from.
const InitializableABI = "[]"

// InitializableBin is the compiled bytecode used for deploying new contracts.
var InitializableBin = "0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a723158209a07c4b483d5457063bbeb47c1035892fbf6500df0ba769baf215477c026bd9064736f6c63430005100032"

// DeployInitializable deploys a new Ethereum contract, binding an instance of Initializable to it.
func DeployInitializable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Initializable, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InitializableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Initializable{InitializableCaller: InitializableCaller{contract: contract}, InitializableTransactor: InitializableTransactor{contract: contract}, InitializableFilterer: InitializableFilterer{contract: contract}}, nil
}

// Initializable is an auto generated Go binding around an Ethereum contract.
type Initializable struct {
	InitializableCaller     // Read-only binding to the contract
	InitializableTransactor // Write-only binding to the contract
	InitializableFilterer   // Log filterer for contract events
}

// InitializableCaller is an auto generated read-only Go binding around an Ethereum contract.
type InitializableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InitializableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InitializableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InitializableSession struct {
	Contract     *Initializable    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InitializableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InitializableCallerSession struct {
	Contract *InitializableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// InitializableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InitializableTransactorSession struct {
	Contract     *InitializableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// InitializableRaw is an auto generated low-level Go binding around an Ethereum contract.
type InitializableRaw struct {
	Contract *Initializable // Generic contract binding to access the raw methods on
}

// InitializableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InitializableCallerRaw struct {
	Contract *InitializableCaller // Generic read-only contract binding to access the raw methods on
}

// InitializableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InitializableTransactorRaw struct {
	Contract *InitializableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitializable creates a new instance of Initializable, bound to a specific deployed contract.
func NewInitializable(address common.Address, backend bind.ContractBackend) (*Initializable, error) {
	contract, err := bindInitializable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Initializable{InitializableCaller: InitializableCaller{contract: contract}, InitializableTransactor: InitializableTransactor{contract: contract}, InitializableFilterer: InitializableFilterer{contract: contract}}, nil
}

// NewInitializableCaller creates a new read-only instance of Initializable, bound to a specific deployed contract.
func NewInitializableCaller(address common.Address, caller bind.ContractCaller) (*InitializableCaller, error) {
	contract, err := bindInitializable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableCaller{contract: contract}, nil
}

// NewInitializableTransactor creates a new write-only instance of Initializable, bound to a specific deployed contract.
func NewInitializableTransactor(address common.Address, transactor bind.ContractTransactor) (*InitializableTransactor, error) {
	contract, err := bindInitializable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableTransactor{contract: contract}, nil
}

// NewInitializableFilterer creates a new log filterer instance of Initializable, bound to a specific deployed contract.
func NewInitializableFilterer(address common.Address, filterer bind.ContractFilterer) (*InitializableFilterer, error) {
	contract, err := bindInitializable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitializableFilterer{contract: contract}, nil
}

// bindInitializable binds a generic wrapper to an already deployed contract.
func bindInitializable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Initializable *InitializableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Initializable.Contract.InitializableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Initializable *InitializableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Initializable.Contract.InitializableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Initializable *InitializableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Initializable.Contract.InitializableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Initializable *InitializableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Initializable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Initializable *InitializableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Initializable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Initializable *InitializableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Initializable.Contract.contract.Transact(opts, method, params...)
}

// InitializableAdminUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const InitializableAdminUpgradeabilityProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// InitializableAdminUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var InitializableAdminUpgradeabilityProxyBin = "0x608060405234801561001057600080fd5b5061097c806100206000396000f3fe6080604052600436106100705760003560e01c80638f2839701161004e5780638f2839701461015e578063cf7a1d7714610191578063d1f5789414610250578063f851a4401461030657610070565b80633659cfe61461007a5780634f1ef286146100ad5780635c60da1b1461012d575b61007861031b565b005b34801561008657600080fd5b506100786004803603602081101561009d57600080fd5b50356001600160a01b0316610335565b610078600480360360408110156100c357600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100ee57600080fd5b82018360208201111561010057600080fd5b8035906020019184600183028401116401000000008311171561012257600080fd5b50909250905061036f565b34801561013957600080fd5b5061014261041c565b604080516001600160a01b039092168252519081900360200190f35b34801561016a57600080fd5b506100786004803603602081101561018157600080fd5b50356001600160a01b0316610459565b610078600480360360608110156101a757600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156101db57600080fd5b8201836020820111156101ed57600080fd5b8035906020019184600183028401116401000000008311171561020f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610513945050505050565b6100786004803603604081101561026657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561029157600080fd5b8201836020820111156102a357600080fd5b803590602001918460018302840111640100000000831117156102c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610599945050505050565b34801561031257600080fd5b506101426106d9565b610323610704565b61033361032e610764565b610789565b565b61033d6107ad565b6001600160a01b0316336001600160a01b031614156103645761035f816107d2565b61036c565b61036c61031b565b50565b6103776107ad565b6001600160a01b0316336001600160a01b0316141561040f57610399836107d2565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d80600081146103f6576040519150601f19603f3d011682016040523d82523d6000602084013e6103fb565b606091505b505090508061040957600080fd5b50610417565b61041761031b565b505050565b60006104266107ad565b6001600160a01b0316336001600160a01b0316141561044e57610447610764565b9050610456565b61045661031b565b90565b6104616107ad565b6001600160a01b0316336001600160a01b03161415610364576001600160a01b0381166104bf5760405162461bcd60e51b81526004018080602001828103825260368152602001806108d76036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104e86107ad565b604080516001600160a01b03928316815291841660208301528051918290030190a161035f81610812565b600061051d610764565b6001600160a01b03161461053057600080fd5b61053a8382610599565b604080517232b4b8189c9b1b97383937bc3c9730b236b4b760691b815290519081900360130190207fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036000199091011461059057fe5b61041782610812565b60006105a3610764565b6001600160a01b0316146105b657600080fd5b604080517f656970313936372e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c0190207f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6000199091011461061657fe5b61061f82610836565b8051156106d5576000826001600160a01b0316826040518082805190602001908083835b602083106106625780518252601f199092019160209182019101610643565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146106c2576040519150601f19603f3d011682016040523d82523d6000602084013e6106c7565b606091505b505090508061041757600080fd5b5050565b60006106e36107ad565b6001600160a01b0316336001600160a01b0316141561044e576104476107ad565b61070c6107ad565b6001600160a01b0316336001600160a01b0316141561075c5760405162461bcd60e51b81526004018080602001828103825260328152602001806108a56032913960400191505060405180910390fd5b610333610333565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156107a8573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6107db81610836565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b61083f8161089e565b61087a5760405162461bcd60e51b815260040180806020018281038252603b81526020018061090d603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b15159056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a265627a7a723158202f193de342c778709ea6459b12351782bcd1c417ae90197028242f67d533750864736f6c63430005100032"

// DeployInitializableAdminUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of InitializableAdminUpgradeabilityProxy to it.
func DeployInitializableAdminUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *InitializableAdminUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableAdminUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InitializableAdminUpgradeabilityProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InitializableAdminUpgradeabilityProxy{InitializableAdminUpgradeabilityProxyCaller: InitializableAdminUpgradeabilityProxyCaller{contract: contract}, InitializableAdminUpgradeabilityProxyTransactor: InitializableAdminUpgradeabilityProxyTransactor{contract: contract}, InitializableAdminUpgradeabilityProxyFilterer: InitializableAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// InitializableAdminUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxy struct {
	InitializableAdminUpgradeabilityProxyCaller     // Read-only binding to the contract
	InitializableAdminUpgradeabilityProxyTransactor // Write-only binding to the contract
	InitializableAdminUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// InitializableAdminUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableAdminUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableAdminUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InitializableAdminUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableAdminUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InitializableAdminUpgradeabilityProxySession struct {
	Contract     *InitializableAdminUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                          // Call options to use throughout this session
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// InitializableAdminUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InitializableAdminUpgradeabilityProxyCallerSession struct {
	Contract *InitializableAdminUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                // Call options to use throughout this session
}

// InitializableAdminUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InitializableAdminUpgradeabilityProxyTransactorSession struct {
	Contract     *InitializableAdminUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                // Transaction auth options to use throughout this session
}

// InitializableAdminUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyRaw struct {
	Contract *InitializableAdminUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// InitializableAdminUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyCallerRaw struct {
	Contract *InitializableAdminUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// InitializableAdminUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InitializableAdminUpgradeabilityProxyTransactorRaw struct {
	Contract *InitializableAdminUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitializableAdminUpgradeabilityProxy creates a new instance of InitializableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableAdminUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*InitializableAdminUpgradeabilityProxy, error) {
	contract, err := bindInitializableAdminUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxy{InitializableAdminUpgradeabilityProxyCaller: InitializableAdminUpgradeabilityProxyCaller{contract: contract}, InitializableAdminUpgradeabilityProxyTransactor: InitializableAdminUpgradeabilityProxyTransactor{contract: contract}, InitializableAdminUpgradeabilityProxyFilterer: InitializableAdminUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewInitializableAdminUpgradeabilityProxyCaller creates a new read-only instance of InitializableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableAdminUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*InitializableAdminUpgradeabilityProxyCaller, error) {
	contract, err := bindInitializableAdminUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewInitializableAdminUpgradeabilityProxyTransactor creates a new write-only instance of InitializableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableAdminUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*InitializableAdminUpgradeabilityProxyTransactor, error) {
	contract, err := bindInitializableAdminUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewInitializableAdminUpgradeabilityProxyFilterer creates a new log filterer instance of InitializableAdminUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableAdminUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*InitializableAdminUpgradeabilityProxyFilterer, error) {
	contract, err := bindInitializableAdminUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindInitializableAdminUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindInitializableAdminUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableAdminUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _InitializableAdminUpgradeabilityProxy.Contract.InitializableAdminUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.InitializableAdminUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.InitializableAdminUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _InitializableAdminUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Admin() (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Admin(&_InitializableAdminUpgradeabilityProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Admin(&_InitializableAdminUpgradeabilityProxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.ChangeAdmin(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.ChangeAdmin(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Implementation() (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Implementation(&_InitializableAdminUpgradeabilityProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Implementation(&_InitializableAdminUpgradeabilityProxy.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Initialize(opts *bind.TransactOpts, _logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "initialize", _logic, _admin, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Initialize(_logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Initialize(&_InitializableAdminUpgradeabilityProxy.TransactOpts, _logic, _admin, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Initialize(_logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Initialize(&_InitializableAdminUpgradeabilityProxy.TransactOpts, _logic, _admin, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Initialize0(opts *bind.TransactOpts, _logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "initialize0", _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Initialize0(&_InitializableAdminUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Initialize0(&_InitializableAdminUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.UpgradeTo(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.UpgradeTo(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.UpgradeToAndCall(&_InitializableAdminUpgradeabilityProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Fallback(&_InitializableAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableAdminUpgradeabilityProxy.Contract.Fallback(&_InitializableAdminUpgradeabilityProxy.TransactOpts, calldata)
}

// InitializableAdminUpgradeabilityProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the InitializableAdminUpgradeabilityProxy contract.
type InitializableAdminUpgradeabilityProxyAdminChangedIterator struct {
	Event *InitializableAdminUpgradeabilityProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitializableAdminUpgradeabilityProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitializableAdminUpgradeabilityProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitializableAdminUpgradeabilityProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitializableAdminUpgradeabilityProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitializableAdminUpgradeabilityProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitializableAdminUpgradeabilityProxyAdminChanged represents a AdminChanged event raised by the InitializableAdminUpgradeabilityProxy contract.
type InitializableAdminUpgradeabilityProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*InitializableAdminUpgradeabilityProxyAdminChangedIterator, error) {

	logs, sub, err := _InitializableAdminUpgradeabilityProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyAdminChangedIterator{contract: _InitializableAdminUpgradeabilityProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *InitializableAdminUpgradeabilityProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _InitializableAdminUpgradeabilityProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitializableAdminUpgradeabilityProxyAdminChanged)
				if err := _InitializableAdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) ParseAdminChanged(log types.Log) (*InitializableAdminUpgradeabilityProxyAdminChanged, error) {
	event := new(InitializableAdminUpgradeabilityProxyAdminChanged)
	if err := _InitializableAdminUpgradeabilityProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// InitializableAdminUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the InitializableAdminUpgradeabilityProxy contract.
type InitializableAdminUpgradeabilityProxyUpgradedIterator struct {
	Event *InitializableAdminUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitializableAdminUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitializableAdminUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitializableAdminUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitializableAdminUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitializableAdminUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitializableAdminUpgradeabilityProxyUpgraded represents a Upgraded event raised by the InitializableAdminUpgradeabilityProxy contract.
type InitializableAdminUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*InitializableAdminUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableAdminUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &InitializableAdminUpgradeabilityProxyUpgradedIterator{contract: _InitializableAdminUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *InitializableAdminUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableAdminUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitializableAdminUpgradeabilityProxyUpgraded)
				if err := _InitializableAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableAdminUpgradeabilityProxy *InitializableAdminUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*InitializableAdminUpgradeabilityProxyUpgraded, error) {
	event := new(InitializableAdminUpgradeabilityProxyUpgraded)
	if err := _InitializableAdminUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// InitializableUpgradeabilityProxyABI is the input ABI used to generate the binding from.
const InitializableUpgradeabilityProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// InitializableUpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var InitializableUpgradeabilityProxyBin = "0x608060405234801561001057600080fd5b50610361806100206000396000f3fe60806040526004361061001e5760003560e01c8063d1f5789414610028575b6100266100de565b005b6100266004803603604081101561003e57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561006957600080fd5b82018360208201111561007b57600080fd5b8035906020019184600183028401116401000000008311171561009d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100f8945050505050565b6100e66100f6565b6100f66100f161023a565b61025f565b565b600061010261023a565b6001600160a01b03161461011557600080fd5b604080517f656970313936372e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c0190207f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6000199091011461017557fe5b61017e82610283565b805115610236576000826001600160a01b0316826040518082805190602001908083835b602083106101c15780518252601f1990920191602091820191016101a2565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610221576040519150601f19603f3d011682016040523d82523d6000602084013e610226565b606091505b505090508061023457600080fd5b505b5050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e80801561027e573d6000f35b3d6000fd5b61028c816102eb565b6102c75760405162461bcd60e51b815260040180806020018281038252603b8152602001806102f2603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b15159056fe43616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a265627a7a723158202072348c53a7f672b5c4c6671c59050031423d7842ae898800783886910c8aa864736f6c63430005100032"

// DeployInitializableUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of InitializableUpgradeabilityProxy to it.
func DeployInitializableUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *InitializableUpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableUpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InitializableUpgradeabilityProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InitializableUpgradeabilityProxy{InitializableUpgradeabilityProxyCaller: InitializableUpgradeabilityProxyCaller{contract: contract}, InitializableUpgradeabilityProxyTransactor: InitializableUpgradeabilityProxyTransactor{contract: contract}, InitializableUpgradeabilityProxyFilterer: InitializableUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// InitializableUpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxy struct {
	InitializableUpgradeabilityProxyCaller     // Read-only binding to the contract
	InitializableUpgradeabilityProxyTransactor // Write-only binding to the contract
	InitializableUpgradeabilityProxyFilterer   // Log filterer for contract events
}

// InitializableUpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableUpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableUpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InitializableUpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableUpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InitializableUpgradeabilityProxySession struct {
	Contract     *InitializableUpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                     // Call options to use throughout this session
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// InitializableUpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InitializableUpgradeabilityProxyCallerSession struct {
	Contract *InitializableUpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                           // Call options to use throughout this session
}

// InitializableUpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InitializableUpgradeabilityProxyTransactorSession struct {
	Contract     *InitializableUpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                           // Transaction auth options to use throughout this session
}

// InitializableUpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyRaw struct {
	Contract *InitializableUpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// InitializableUpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyCallerRaw struct {
	Contract *InitializableUpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// InitializableUpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InitializableUpgradeabilityProxyTransactorRaw struct {
	Contract *InitializableUpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitializableUpgradeabilityProxy creates a new instance of InitializableUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*InitializableUpgradeabilityProxy, error) {
	contract, err := bindInitializableUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxy{InitializableUpgradeabilityProxyCaller: InitializableUpgradeabilityProxyCaller{contract: contract}, InitializableUpgradeabilityProxyTransactor: InitializableUpgradeabilityProxyTransactor{contract: contract}, InitializableUpgradeabilityProxyFilterer: InitializableUpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewInitializableUpgradeabilityProxyCaller creates a new read-only instance of InitializableUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*InitializableUpgradeabilityProxyCaller, error) {
	contract, err := bindInitializableUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxyCaller{contract: contract}, nil
}

// NewInitializableUpgradeabilityProxyTransactor creates a new write-only instance of InitializableUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*InitializableUpgradeabilityProxyTransactor, error) {
	contract, err := bindInitializableUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewInitializableUpgradeabilityProxyFilterer creates a new log filterer instance of InitializableUpgradeabilityProxy, bound to a specific deployed contract.
func NewInitializableUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*InitializableUpgradeabilityProxyFilterer, error) {
	contract, err := bindInitializableUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindInitializableUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindInitializableUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableUpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _InitializableUpgradeabilityProxy.Contract.InitializableUpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.InitializableUpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.InitializableUpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _InitializableUpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Initialize is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactor) Initialize(opts *bind.TransactOpts, _logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.contract.Transact(opts, "initialize", _logic, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxySession) Initialize(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.Initialize(&_InitializableUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactorSession) Initialize(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.Initialize(&_InitializableUpgradeabilityProxy.TransactOpts, _logic, _data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.Fallback(&_InitializableUpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _InitializableUpgradeabilityProxy.Contract.Fallback(&_InitializableUpgradeabilityProxy.TransactOpts, calldata)
}

// InitializableUpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the InitializableUpgradeabilityProxy contract.
type InitializableUpgradeabilityProxyUpgradedIterator struct {
	Event *InitializableUpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InitializableUpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InitializableUpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InitializableUpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InitializableUpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InitializableUpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InitializableUpgradeabilityProxyUpgraded represents a Upgraded event raised by the InitializableUpgradeabilityProxy contract.
type InitializableUpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*InitializableUpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableUpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &InitializableUpgradeabilityProxyUpgradedIterator{contract: _InitializableUpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *InitializableUpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InitializableUpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InitializableUpgradeabilityProxyUpgraded)
				if err := _InitializableUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InitializableUpgradeabilityProxy *InitializableUpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*InitializableUpgradeabilityProxyUpgraded, error) {
	event := new(InitializableUpgradeabilityProxyUpgraded)
	if err := _InitializableUpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LinkedListABI is the input ABI used to generate the binding from.
const LinkedListABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"NULL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// LinkedListBin is the compiled bytecode used for deploying new contracts.
var LinkedListBin = "0x6094610024600b82828239805160001a607314601757fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f26be3fc146038575b600080fd5b603e605a565b604080516001600160a01b039092168252519081900360200190f35b60008156fea265627a7a72315820b642e4dff6c06019e8d5c9339b8ecc46b969b2fd4286e6cb4cab4cef61b3b55464736f6c63430005100032"

// DeployLinkedList deploys a new Ethereum contract, binding an instance of LinkedList to it.
func DeployLinkedList(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LinkedList, error) {
	parsed, err := abi.JSON(strings.NewReader(LinkedListABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LinkedListBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LinkedList{LinkedListCaller: LinkedListCaller{contract: contract}, LinkedListTransactor: LinkedListTransactor{contract: contract}, LinkedListFilterer: LinkedListFilterer{contract: contract}}, nil
}

// LinkedList is an auto generated Go binding around an Ethereum contract.
type LinkedList struct {
	LinkedListCaller     // Read-only binding to the contract
	LinkedListTransactor // Write-only binding to the contract
	LinkedListFilterer   // Log filterer for contract events
}

// LinkedListCaller is an auto generated read-only Go binding around an Ethereum contract.
type LinkedListCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LinkedListTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LinkedListTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LinkedListFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LinkedListFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LinkedListSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LinkedListSession struct {
	Contract     *LinkedList       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LinkedListCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LinkedListCallerSession struct {
	Contract *LinkedListCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// LinkedListTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LinkedListTransactorSession struct {
	Contract     *LinkedListTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// LinkedListRaw is an auto generated low-level Go binding around an Ethereum contract.
type LinkedListRaw struct {
	Contract *LinkedList // Generic contract binding to access the raw methods on
}

// LinkedListCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LinkedListCallerRaw struct {
	Contract *LinkedListCaller // Generic read-only contract binding to access the raw methods on
}

// LinkedListTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LinkedListTransactorRaw struct {
	Contract *LinkedListTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLinkedList creates a new instance of LinkedList, bound to a specific deployed contract.
func NewLinkedList(address common.Address, backend bind.ContractBackend) (*LinkedList, error) {
	contract, err := bindLinkedList(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LinkedList{LinkedListCaller: LinkedListCaller{contract: contract}, LinkedListTransactor: LinkedListTransactor{contract: contract}, LinkedListFilterer: LinkedListFilterer{contract: contract}}, nil
}

// NewLinkedListCaller creates a new read-only instance of LinkedList, bound to a specific deployed contract.
func NewLinkedListCaller(address common.Address, caller bind.ContractCaller) (*LinkedListCaller, error) {
	contract, err := bindLinkedList(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LinkedListCaller{contract: contract}, nil
}

// NewLinkedListTransactor creates a new write-only instance of LinkedList, bound to a specific deployed contract.
func NewLinkedListTransactor(address common.Address, transactor bind.ContractTransactor) (*LinkedListTransactor, error) {
	contract, err := bindLinkedList(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LinkedListTransactor{contract: contract}, nil
}

// NewLinkedListFilterer creates a new log filterer instance of LinkedList, bound to a specific deployed contract.
func NewLinkedListFilterer(address common.Address, filterer bind.ContractFilterer) (*LinkedListFilterer, error) {
	contract, err := bindLinkedList(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LinkedListFilterer{contract: contract}, nil
}

// bindLinkedList binds a generic wrapper to an already deployed contract.
func bindLinkedList(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LinkedListABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LinkedList *LinkedListRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LinkedList.Contract.LinkedListCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LinkedList *LinkedListRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LinkedList.Contract.LinkedListTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LinkedList *LinkedListRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LinkedList.Contract.LinkedListTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LinkedList *LinkedListCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LinkedList.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LinkedList *LinkedListTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LinkedList.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LinkedList *LinkedListTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LinkedList.Contract.contract.Transact(opts, method, params...)
}

// NULL is a free data retrieval call binding the contract method 0xf26be3fc.
//
// Solidity: function NULL() view returns(address)
func (_LinkedList *LinkedListCaller) NULL(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LinkedList.contract.Call(opts, out, "NULL")
	return *ret0, err
}

// NULL is a free data retrieval call binding the contract method 0xf26be3fc.
//
// Solidity: function NULL() view returns(address)
func (_LinkedList *LinkedListSession) NULL() (common.Address, error) {
	return _LinkedList.Contract.NULL(&_LinkedList.CallOpts)
}

// NULL is a free data retrieval call binding the contract method 0xf26be3fc.
//
// Solidity: function NULL() view returns(address)
func (_LinkedList *LinkedListCallerSession) NULL() (common.Address, error) {
	return _LinkedList.Contract.NULL(&_LinkedList.CallOpts)
}

// LinkedListTestABI is the input ABI used to generate the binding from.
const LinkedListTestABI = "[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNode\",\"type\":\"address\"}],\"name\":\"append\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"begin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"elements\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newNode\",\"type\":\"address\"}],\"name\":\"insertAfter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newNode\",\"type\":\"address\"}],\"name\":\"insertBefore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isInList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"next\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newNode\",\"type\":\"address\"}],\"name\":\"prepend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"previous\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"node2\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LinkedListTestBin is the compiled bytecode used for deploying new contracts.
var LinkedListTestBin = "0x608060405234801561001057600080fd5b50610b44806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806380cea48a1161007157806380cea48a14610203578063ab73e31614610231578063ac04f5a714610257578063e6c1beb41461027d578063efbe1c1c146102a3578063fa33bcf3146102ab576100b4565b806301a18289146100b95780631bce6ff31461013557806329092d0e1461015957806330d28aca14610181578063622d77fb146101a75780636b76484e146101d5575b600080fd5b6100e5600480360360408110156100cf57600080fd5b506001600160a01b0381351690602001356102e5565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610121578181015183820152602001610109565b505050509050019250505060405180910390f35b61013d610300565b604080516001600160a01b039092168252519081900360200190f35b61017f6004803603602081101561016f57600080fd5b50356001600160a01b0316610311565b005b61013d6004803603602081101561019757600080fd5b50356001600160a01b0316610325565b61017f600480360360408110156101bd57600080fd5b506001600160a01b038135811691602001351661033d565b61017f600480360360408110156101eb57600080fd5b506001600160a01b0381358116916020013516610353565b61017f6004803603604081101561021957600080fd5b506001600160a01b0381358116916020013516610365565b61013d6004803603602081101561024757600080fd5b50356001600160a01b0316610377565b61017f6004803603602081101561026d57600080fd5b50356001600160a01b0316610389565b61017f6004803603602081101561029357600080fd5b50356001600160a01b031661039a565b61013d6103ab565b6102d1600480360360208110156102c157600080fd5b50356001600160a01b03166103b7565b604080519115158252519081900360200190f35b60606102f96000848463ffffffff6103c916565b9392505050565b600061030c6000610531565b905090565b61032260008263ffffffff61055016565b50565b6000610337818363ffffffff61061916565b92915050565b61034f6000838363ffffffff61068a16565b5050565b61034f6000838363ffffffff61082c16565b61034f6000838363ffffffff61087c16565b6000610337818363ffffffff610a1916565b61032260008263ffffffff610a8816565b61032260008263ffffffff610a9b16565b600061030c6000610aae565b6000610337818363ffffffff610ad016565b606060008211610420576040805162461bcd60e51b815260206004820152601960248201527f4c696e6b65644c6973743a20696e76616c696420636f756e7400000000000000604482015290519081900360640190fd5b61042a8484610ad0565b8061043c57506001600160a01b038316155b61047b576040805162461bcd60e51b81526020600482015260176024820152600080516020610af0833981519152604482015290519081900360640190fd5b6060826040519080825280602002602001820160405280156104a7578160200160208202803883390190505b5090506000846001600160a01b0381166104c7576104c487610531565b90505b84821015610526576001600160a01b0381166104e257610526565b808383815181106104ef57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506105198782610a19565b90506001820191506104c7565b509095945050505050565b600080805260209190915260409020600101546001600160a01b031690565b61055a8282610ad0565b610599576040805162461bcd60e51b81526020600482015260176024820152600080516020610af0833981519152604482015290519081900360640190fd5b6001600160a01b0390811660008181526020939093526040808420805460018083018054610100938490048816808a52868a209093018054919098166001600160a01b031991821681179098559688529387208054610100600160a81b031916919092021790559190935280546001600160a81b03191690558154169055565b60006106258383610ad0565b610664576040805162461bcd60e51b81526020600482015260176024820152600080516020610af0833981519152604482015290519081900360640190fd5b506001600160a01b03908116600090815260209290925260409091205461010090041690565b6001600160a01b0381166106e5576040805162461bcd60e51b815260206004820152601b60248201527f4c696e6b65644c6973743a20696e76616c696420616464726573730000000000604482015290519081900360640190fd5b6106ef8382610ad0565b15610741576040805162461bcd60e51b815260206004820152601b60248201527f4c696e6b65644c6973743a20616c726561647920696e206c6973740000000000604482015290519081900360640190fd5b61074b8383610ad0565b8061075d57506001600160a01b038216155b61079c576040805162461bcd60e51b81526020600482015260176024820152600080516020610af0833981519152604482015290519081900360640190fd5b6001600160a01b03918216600081815260209490945260408085208054938516808752828720600181810180546001600160a01b03199081169097179055815461010097889004909816808802610100600160a81b0319998a161783558454978402979098169690961790925594865290852083018054909216841790915591909252805460ff19169091179055565b6001600160a01b038082166000908152602085905260409020546101009004166108568483610550565b61086184848461087c565b61086b8484610550565b61087684828561087c565b50505050565b6001600160a01b0381166108d7576040805162461bcd60e51b815260206004820152601b60248201527f4c696e6b65644c6973743a20696e76616c696420616464726573730000000000604482015290519081900360640190fd5b6108e18382610ad0565b15610933576040805162461bcd60e51b815260206004820152601b60248201527f4c696e6b65644c6973743a20616c726561647920696e206c6973740000000000604482015290519081900360640190fd5b61093d8383610ad0565b8061094f57506001600160a01b038216155b61098e576040805162461bcd60e51b81526020600482015260176024820152600080516020610af0833981519152604482015290519081900360640190fd5b6001600160a01b0391821660008181526020949094526040808520600190810180549486168088528388208054610100600160a81b03199081166101009788021782558185018054989099166001600160a01b031998891681179099558354909716821790925595875291862080549094169285029290921790925591909252815460ff1916179055565b6000610a258383610ad0565b610a64576040805162461bcd60e51b81526020600482015260176024820152600080516020610af0833981519152604482015290519081900360640190fd5b506001600160a01b0390811660009081526020929092526040909120600101541690565b61034f82610a9584610aae565b8361087c565b61034f82610aa884610531565b8361068a565b60008080526020829052604090205461010090046001600160a01b0316919050565b6001600160a01b03166000908152602091909152604090205460ff169056fe4c696e6b65644c6973743a206e6f7420696e206c697374000000000000000000a265627a7a72315820919c86fc12337d7f555584ee9a6617453e758c4433ea51aff8c3a0da5fad963164736f6c63430005100032"

// DeployLinkedListTest deploys a new Ethereum contract, binding an instance of LinkedListTest to it.
func DeployLinkedListTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LinkedListTest, error) {
	parsed, err := abi.JSON(strings.NewReader(LinkedListTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LinkedListTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LinkedListTest{LinkedListTestCaller: LinkedListTestCaller{contract: contract}, LinkedListTestTransactor: LinkedListTestTransactor{contract: contract}, LinkedListTestFilterer: LinkedListTestFilterer{contract: contract}}, nil
}

// LinkedListTest is an auto generated Go binding around an Ethereum contract.
type LinkedListTest struct {
	LinkedListTestCaller     // Read-only binding to the contract
	LinkedListTestTransactor // Write-only binding to the contract
	LinkedListTestFilterer   // Log filterer for contract events
}

// LinkedListTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type LinkedListTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LinkedListTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LinkedListTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LinkedListTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LinkedListTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LinkedListTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LinkedListTestSession struct {
	Contract     *LinkedListTest   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LinkedListTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LinkedListTestCallerSession struct {
	Contract *LinkedListTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// LinkedListTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LinkedListTestTransactorSession struct {
	Contract     *LinkedListTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// LinkedListTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type LinkedListTestRaw struct {
	Contract *LinkedListTest // Generic contract binding to access the raw methods on
}

// LinkedListTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LinkedListTestCallerRaw struct {
	Contract *LinkedListTestCaller // Generic read-only contract binding to access the raw methods on
}

// LinkedListTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LinkedListTestTransactorRaw struct {
	Contract *LinkedListTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLinkedListTest creates a new instance of LinkedListTest, bound to a specific deployed contract.
func NewLinkedListTest(address common.Address, backend bind.ContractBackend) (*LinkedListTest, error) {
	contract, err := bindLinkedListTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LinkedListTest{LinkedListTestCaller: LinkedListTestCaller{contract: contract}, LinkedListTestTransactor: LinkedListTestTransactor{contract: contract}, LinkedListTestFilterer: LinkedListTestFilterer{contract: contract}}, nil
}

// NewLinkedListTestCaller creates a new read-only instance of LinkedListTest, bound to a specific deployed contract.
func NewLinkedListTestCaller(address common.Address, caller bind.ContractCaller) (*LinkedListTestCaller, error) {
	contract, err := bindLinkedListTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LinkedListTestCaller{contract: contract}, nil
}

// NewLinkedListTestTransactor creates a new write-only instance of LinkedListTest, bound to a specific deployed contract.
func NewLinkedListTestTransactor(address common.Address, transactor bind.ContractTransactor) (*LinkedListTestTransactor, error) {
	contract, err := bindLinkedListTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LinkedListTestTransactor{contract: contract}, nil
}

// NewLinkedListTestFilterer creates a new log filterer instance of LinkedListTest, bound to a specific deployed contract.
func NewLinkedListTestFilterer(address common.Address, filterer bind.ContractFilterer) (*LinkedListTestFilterer, error) {
	contract, err := bindLinkedListTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LinkedListTestFilterer{contract: contract}, nil
}

// bindLinkedListTest binds a generic wrapper to an already deployed contract.
func bindLinkedListTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LinkedListTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LinkedListTest *LinkedListTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LinkedListTest.Contract.LinkedListTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LinkedListTest *LinkedListTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LinkedListTest.Contract.LinkedListTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LinkedListTest *LinkedListTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LinkedListTest.Contract.LinkedListTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LinkedListTest *LinkedListTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LinkedListTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LinkedListTest *LinkedListTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LinkedListTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LinkedListTest *LinkedListTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LinkedListTest.Contract.contract.Transact(opts, method, params...)
}

// Begin is a free data retrieval call binding the contract method 0x1bce6ff3.
//
// Solidity: function begin() view returns(address)
func (_LinkedListTest *LinkedListTestCaller) Begin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LinkedListTest.contract.Call(opts, out, "begin")
	return *ret0, err
}

// Begin is a free data retrieval call binding the contract method 0x1bce6ff3.
//
// Solidity: function begin() view returns(address)
func (_LinkedListTest *LinkedListTestSession) Begin() (common.Address, error) {
	return _LinkedListTest.Contract.Begin(&_LinkedListTest.CallOpts)
}

// Begin is a free data retrieval call binding the contract method 0x1bce6ff3.
//
// Solidity: function begin() view returns(address)
func (_LinkedListTest *LinkedListTestCallerSession) Begin() (common.Address, error) {
	return _LinkedListTest.Contract.Begin(&_LinkedListTest.CallOpts)
}

// Elements is a free data retrieval call binding the contract method 0x01a18289.
//
// Solidity: function elements(address _start, uint256 _count) view returns(address[])
func (_LinkedListTest *LinkedListTestCaller) Elements(opts *bind.CallOpts, _start common.Address, _count *big.Int) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _LinkedListTest.contract.Call(opts, out, "elements", _start, _count)
	return *ret0, err
}

// Elements is a free data retrieval call binding the contract method 0x01a18289.
//
// Solidity: function elements(address _start, uint256 _count) view returns(address[])
func (_LinkedListTest *LinkedListTestSession) Elements(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _LinkedListTest.Contract.Elements(&_LinkedListTest.CallOpts, _start, _count)
}

// Elements is a free data retrieval call binding the contract method 0x01a18289.
//
// Solidity: function elements(address _start, uint256 _count) view returns(address[])
func (_LinkedListTest *LinkedListTestCallerSession) Elements(_start common.Address, _count *big.Int) ([]common.Address, error) {
	return _LinkedListTest.Contract.Elements(&_LinkedListTest.CallOpts, _start, _count)
}

// End is a free data retrieval call binding the contract method 0xefbe1c1c.
//
// Solidity: function end() view returns(address)
func (_LinkedListTest *LinkedListTestCaller) End(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LinkedListTest.contract.Call(opts, out, "end")
	return *ret0, err
}

// End is a free data retrieval call binding the contract method 0xefbe1c1c.
//
// Solidity: function end() view returns(address)
func (_LinkedListTest *LinkedListTestSession) End() (common.Address, error) {
	return _LinkedListTest.Contract.End(&_LinkedListTest.CallOpts)
}

// End is a free data retrieval call binding the contract method 0xefbe1c1c.
//
// Solidity: function end() view returns(address)
func (_LinkedListTest *LinkedListTestCallerSession) End() (common.Address, error) {
	return _LinkedListTest.Contract.End(&_LinkedListTest.CallOpts)
}

// IsInList is a free data retrieval call binding the contract method 0xfa33bcf3.
//
// Solidity: function isInList(address node) view returns(bool)
func (_LinkedListTest *LinkedListTestCaller) IsInList(opts *bind.CallOpts, node common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LinkedListTest.contract.Call(opts, out, "isInList", node)
	return *ret0, err
}

// IsInList is a free data retrieval call binding the contract method 0xfa33bcf3.
//
// Solidity: function isInList(address node) view returns(bool)
func (_LinkedListTest *LinkedListTestSession) IsInList(node common.Address) (bool, error) {
	return _LinkedListTest.Contract.IsInList(&_LinkedListTest.CallOpts, node)
}

// IsInList is a free data retrieval call binding the contract method 0xfa33bcf3.
//
// Solidity: function isInList(address node) view returns(bool)
func (_LinkedListTest *LinkedListTestCallerSession) IsInList(node common.Address) (bool, error) {
	return _LinkedListTest.Contract.IsInList(&_LinkedListTest.CallOpts, node)
}

// Next is a free data retrieval call binding the contract method 0xab73e316.
//
// Solidity: function next(address node) view returns(address)
func (_LinkedListTest *LinkedListTestCaller) Next(opts *bind.CallOpts, node common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LinkedListTest.contract.Call(opts, out, "next", node)
	return *ret0, err
}

// Next is a free data retrieval call binding the contract method 0xab73e316.
//
// Solidity: function next(address node) view returns(address)
func (_LinkedListTest *LinkedListTestSession) Next(node common.Address) (common.Address, error) {
	return _LinkedListTest.Contract.Next(&_LinkedListTest.CallOpts, node)
}

// Next is a free data retrieval call binding the contract method 0xab73e316.
//
// Solidity: function next(address node) view returns(address)
func (_LinkedListTest *LinkedListTestCallerSession) Next(node common.Address) (common.Address, error) {
	return _LinkedListTest.Contract.Next(&_LinkedListTest.CallOpts, node)
}

// Previous is a free data retrieval call binding the contract method 0x30d28aca.
//
// Solidity: function previous(address node) view returns(address)
func (_LinkedListTest *LinkedListTestCaller) Previous(opts *bind.CallOpts, node common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LinkedListTest.contract.Call(opts, out, "previous", node)
	return *ret0, err
}

// Previous is a free data retrieval call binding the contract method 0x30d28aca.
//
// Solidity: function previous(address node) view returns(address)
func (_LinkedListTest *LinkedListTestSession) Previous(node common.Address) (common.Address, error) {
	return _LinkedListTest.Contract.Previous(&_LinkedListTest.CallOpts, node)
}

// Previous is a free data retrieval call binding the contract method 0x30d28aca.
//
// Solidity: function previous(address node) view returns(address)
func (_LinkedListTest *LinkedListTestCallerSession) Previous(node common.Address) (common.Address, error) {
	return _LinkedListTest.Contract.Previous(&_LinkedListTest.CallOpts, node)
}

// Append is a paid mutator transaction binding the contract method 0xac04f5a7.
//
// Solidity: function append(address newNode) returns()
func (_LinkedListTest *LinkedListTestTransactor) Append(opts *bind.TransactOpts, newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.contract.Transact(opts, "append", newNode)
}

// Append is a paid mutator transaction binding the contract method 0xac04f5a7.
//
// Solidity: function append(address newNode) returns()
func (_LinkedListTest *LinkedListTestSession) Append(newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.Append(&_LinkedListTest.TransactOpts, newNode)
}

// Append is a paid mutator transaction binding the contract method 0xac04f5a7.
//
// Solidity: function append(address newNode) returns()
func (_LinkedListTest *LinkedListTestTransactorSession) Append(newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.Append(&_LinkedListTest.TransactOpts, newNode)
}

// InsertAfter is a paid mutator transaction binding the contract method 0x80cea48a.
//
// Solidity: function insertAfter(address target, address newNode) returns()
func (_LinkedListTest *LinkedListTestTransactor) InsertAfter(opts *bind.TransactOpts, target common.Address, newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.contract.Transact(opts, "insertAfter", target, newNode)
}

// InsertAfter is a paid mutator transaction binding the contract method 0x80cea48a.
//
// Solidity: function insertAfter(address target, address newNode) returns()
func (_LinkedListTest *LinkedListTestSession) InsertAfter(target common.Address, newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.InsertAfter(&_LinkedListTest.TransactOpts, target, newNode)
}

// InsertAfter is a paid mutator transaction binding the contract method 0x80cea48a.
//
// Solidity: function insertAfter(address target, address newNode) returns()
func (_LinkedListTest *LinkedListTestTransactorSession) InsertAfter(target common.Address, newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.InsertAfter(&_LinkedListTest.TransactOpts, target, newNode)
}

// InsertBefore is a paid mutator transaction binding the contract method 0x622d77fb.
//
// Solidity: function insertBefore(address target, address newNode) returns()
func (_LinkedListTest *LinkedListTestTransactor) InsertBefore(opts *bind.TransactOpts, target common.Address, newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.contract.Transact(opts, "insertBefore", target, newNode)
}

// InsertBefore is a paid mutator transaction binding the contract method 0x622d77fb.
//
// Solidity: function insertBefore(address target, address newNode) returns()
func (_LinkedListTest *LinkedListTestSession) InsertBefore(target common.Address, newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.InsertBefore(&_LinkedListTest.TransactOpts, target, newNode)
}

// InsertBefore is a paid mutator transaction binding the contract method 0x622d77fb.
//
// Solidity: function insertBefore(address target, address newNode) returns()
func (_LinkedListTest *LinkedListTestTransactorSession) InsertBefore(target common.Address, newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.InsertBefore(&_LinkedListTest.TransactOpts, target, newNode)
}

// Prepend is a paid mutator transaction binding the contract method 0xe6c1beb4.
//
// Solidity: function prepend(address newNode) returns()
func (_LinkedListTest *LinkedListTestTransactor) Prepend(opts *bind.TransactOpts, newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.contract.Transact(opts, "prepend", newNode)
}

// Prepend is a paid mutator transaction binding the contract method 0xe6c1beb4.
//
// Solidity: function prepend(address newNode) returns()
func (_LinkedListTest *LinkedListTestSession) Prepend(newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.Prepend(&_LinkedListTest.TransactOpts, newNode)
}

// Prepend is a paid mutator transaction binding the contract method 0xe6c1beb4.
//
// Solidity: function prepend(address newNode) returns()
func (_LinkedListTest *LinkedListTestTransactorSession) Prepend(newNode common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.Prepend(&_LinkedListTest.TransactOpts, newNode)
}

// Remove is a paid mutator transaction binding the contract method 0x29092d0e.
//
// Solidity: function remove(address node) returns()
func (_LinkedListTest *LinkedListTestTransactor) Remove(opts *bind.TransactOpts, node common.Address) (*types.Transaction, error) {
	return _LinkedListTest.contract.Transact(opts, "remove", node)
}

// Remove is a paid mutator transaction binding the contract method 0x29092d0e.
//
// Solidity: function remove(address node) returns()
func (_LinkedListTest *LinkedListTestSession) Remove(node common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.Remove(&_LinkedListTest.TransactOpts, node)
}

// Remove is a paid mutator transaction binding the contract method 0x29092d0e.
//
// Solidity: function remove(address node) returns()
func (_LinkedListTest *LinkedListTestTransactorSession) Remove(node common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.Remove(&_LinkedListTest.TransactOpts, node)
}

// Swap is a paid mutator transaction binding the contract method 0x6b76484e.
//
// Solidity: function swap(address node1, address node2) returns()
func (_LinkedListTest *LinkedListTestTransactor) Swap(opts *bind.TransactOpts, node1 common.Address, node2 common.Address) (*types.Transaction, error) {
	return _LinkedListTest.contract.Transact(opts, "swap", node1, node2)
}

// Swap is a paid mutator transaction binding the contract method 0x6b76484e.
//
// Solidity: function swap(address node1, address node2) returns()
func (_LinkedListTest *LinkedListTestSession) Swap(node1 common.Address, node2 common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.Swap(&_LinkedListTest.TransactOpts, node1, node2)
}

// Swap is a paid mutator transaction binding the contract method 0x6b76484e.
//
// Solidity: function swap(address node1, address node2) returns()
func (_LinkedListTest *LinkedListTestTransactorSession) Swap(node1 common.Address, node2 common.Address) (*types.Transaction, error) {
	return _LinkedListTest.Contract.Swap(&_LinkedListTest.TransactOpts, node1, node2)
}

// LockGatewayLogicV1ABI is the input ABI used to generate the binding from.
const LockGatewayLogicV1ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_p\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_indexedTo\",\"type\":\"bytes\"}],\"name\":\"LogLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newMintAuthority\",\"type\":\"address\"}],\"name\":\"LogMintAuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_signedMessageHash\",\"type\":\"bytes32\"}],\"name\":\"LogRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"blacklistRecoverableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"}],\"name\":\"hashForSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractRenERC20LogicV1\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintAuthority\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_lockFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_releaseFee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBurnAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"release\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractRenERC20LogicV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_nextLockFee\",\"type\":\"uint16\"}],\"name\":\"updateLockFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextMintAuthority\",\"type\":\"address\"}],\"name\":\"updateMintAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_nextReleaseFee\",\"type\":\"uint16\"}],\"name\":\"updateReleaseFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_signedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// LockGatewayLogicV1Bin is the compiled bytecode used for deploying new contracts.
var LockGatewayLogicV1Bin = ""

// DeployLockGatewayLogicV1 deploys a new Ethereum contract, binding an instance of LockGatewayLogicV1 to it.
func DeployLockGatewayLogicV1(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LockGatewayLogicV1, error) {
	parsed, err := abi.JSON(strings.NewReader(LockGatewayLogicV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LockGatewayLogicV1Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LockGatewayLogicV1{LockGatewayLogicV1Caller: LockGatewayLogicV1Caller{contract: contract}, LockGatewayLogicV1Transactor: LockGatewayLogicV1Transactor{contract: contract}, LockGatewayLogicV1Filterer: LockGatewayLogicV1Filterer{contract: contract}}, nil
}

// LockGatewayLogicV1 is an auto generated Go binding around an Ethereum contract.
type LockGatewayLogicV1 struct {
	LockGatewayLogicV1Caller     // Read-only binding to the contract
	LockGatewayLogicV1Transactor // Write-only binding to the contract
	LockGatewayLogicV1Filterer   // Log filterer for contract events
}

// LockGatewayLogicV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type LockGatewayLogicV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockGatewayLogicV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type LockGatewayLogicV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockGatewayLogicV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LockGatewayLogicV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockGatewayLogicV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LockGatewayLogicV1Session struct {
	Contract     *LockGatewayLogicV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// LockGatewayLogicV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LockGatewayLogicV1CallerSession struct {
	Contract *LockGatewayLogicV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// LockGatewayLogicV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LockGatewayLogicV1TransactorSession struct {
	Contract     *LockGatewayLogicV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// LockGatewayLogicV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type LockGatewayLogicV1Raw struct {
	Contract *LockGatewayLogicV1 // Generic contract binding to access the raw methods on
}

// LockGatewayLogicV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LockGatewayLogicV1CallerRaw struct {
	Contract *LockGatewayLogicV1Caller // Generic read-only contract binding to access the raw methods on
}

// LockGatewayLogicV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LockGatewayLogicV1TransactorRaw struct {
	Contract *LockGatewayLogicV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewLockGatewayLogicV1 creates a new instance of LockGatewayLogicV1, bound to a specific deployed contract.
func NewLockGatewayLogicV1(address common.Address, backend bind.ContractBackend) (*LockGatewayLogicV1, error) {
	contract, err := bindLockGatewayLogicV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LockGatewayLogicV1{LockGatewayLogicV1Caller: LockGatewayLogicV1Caller{contract: contract}, LockGatewayLogicV1Transactor: LockGatewayLogicV1Transactor{contract: contract}, LockGatewayLogicV1Filterer: LockGatewayLogicV1Filterer{contract: contract}}, nil
}

// NewLockGatewayLogicV1Caller creates a new read-only instance of LockGatewayLogicV1, bound to a specific deployed contract.
func NewLockGatewayLogicV1Caller(address common.Address, caller bind.ContractCaller) (*LockGatewayLogicV1Caller, error) {
	contract, err := bindLockGatewayLogicV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LockGatewayLogicV1Caller{contract: contract}, nil
}

// NewLockGatewayLogicV1Transactor creates a new write-only instance of LockGatewayLogicV1, bound to a specific deployed contract.
func NewLockGatewayLogicV1Transactor(address common.Address, transactor bind.ContractTransactor) (*LockGatewayLogicV1Transactor, error) {
	contract, err := bindLockGatewayLogicV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LockGatewayLogicV1Transactor{contract: contract}, nil
}

// NewLockGatewayLogicV1Filterer creates a new log filterer instance of LockGatewayLogicV1, bound to a specific deployed contract.
func NewLockGatewayLogicV1Filterer(address common.Address, filterer bind.ContractFilterer) (*LockGatewayLogicV1Filterer, error) {
	contract, err := bindLockGatewayLogicV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LockGatewayLogicV1Filterer{contract: contract}, nil
}

// bindLockGatewayLogicV1 binds a generic wrapper to an already deployed contract.
func bindLockGatewayLogicV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LockGatewayLogicV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LockGatewayLogicV1 *LockGatewayLogicV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LockGatewayLogicV1.Contract.LockGatewayLogicV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LockGatewayLogicV1 *LockGatewayLogicV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.LockGatewayLogicV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LockGatewayLogicV1 *LockGatewayLogicV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.LockGatewayLogicV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LockGatewayLogicV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.contract.Transact(opts, method, params...)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) FeeRecipient(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "feeRecipient")
	return *ret0, err
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) FeeRecipient() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.FeeRecipient(&_LockGatewayLogicV1.CallOpts)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) FeeRecipient() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.FeeRecipient(&_LockGatewayLogicV1.CallOpts)
}

// HashForSignature is a free data retrieval call binding the contract method 0x5219a566.
//
// Solidity: function hashForSignature(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) view returns(bytes32)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) HashForSignature(opts *bind.CallOpts, _pHash [32]byte, _amount *big.Int, _to common.Address, _nHash [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "hashForSignature", _pHash, _amount, _to, _nHash)
	return *ret0, err
}

// HashForSignature is a free data retrieval call binding the contract method 0x5219a566.
//
// Solidity: function hashForSignature(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) view returns(bytes32)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) HashForSignature(_pHash [32]byte, _amount *big.Int, _to common.Address, _nHash [32]byte) ([32]byte, error) {
	return _LockGatewayLogicV1.Contract.HashForSignature(&_LockGatewayLogicV1.CallOpts, _pHash, _amount, _to, _nHash)
}

// HashForSignature is a free data retrieval call binding the contract method 0x5219a566.
//
// Solidity: function hashForSignature(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) view returns(bytes32)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) HashForSignature(_pHash [32]byte, _amount *big.Int, _to common.Address, _nHash [32]byte) ([32]byte, error) {
	return _LockGatewayLogicV1.Contract.HashForSignature(&_LockGatewayLogicV1.CallOpts, _pHash, _amount, _to, _nHash)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) IsOwner() (bool, error) {
	return _LockGatewayLogicV1.Contract.IsOwner(&_LockGatewayLogicV1.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) IsOwner() (bool, error) {
	return _LockGatewayLogicV1.Contract.IsOwner(&_LockGatewayLogicV1.CallOpts)
}

// LockFee is a free data retrieval call binding the contract method 0x56a06235.
//
// Solidity: function lockFee() view returns(uint16)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) LockFee(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "lockFee")
	return *ret0, err
}

// LockFee is a free data retrieval call binding the contract method 0x56a06235.
//
// Solidity: function lockFee() view returns(uint16)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) LockFee() (uint16, error) {
	return _LockGatewayLogicV1.Contract.LockFee(&_LockGatewayLogicV1.CallOpts)
}

// LockFee is a free data retrieval call binding the contract method 0x56a06235.
//
// Solidity: function lockFee() view returns(uint16)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) LockFee() (uint16, error) {
	return _LockGatewayLogicV1.Contract.LockFee(&_LockGatewayLogicV1.CallOpts)
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) MinimumBurnAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "minimumBurnAmount")
	return *ret0, err
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) MinimumBurnAmount() (*big.Int, error) {
	return _LockGatewayLogicV1.Contract.MinimumBurnAmount(&_LockGatewayLogicV1.CallOpts)
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) MinimumBurnAmount() (*big.Int, error) {
	return _LockGatewayLogicV1.Contract.MinimumBurnAmount(&_LockGatewayLogicV1.CallOpts)
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) MintAuthority(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "mintAuthority")
	return *ret0, err
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) MintAuthority() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.MintAuthority(&_LockGatewayLogicV1.CallOpts)
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) MintAuthority() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.MintAuthority(&_LockGatewayLogicV1.CallOpts)
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) NextN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "nextN")
	return *ret0, err
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) NextN() (*big.Int, error) {
	return _LockGatewayLogicV1.Contract.NextN(&_LockGatewayLogicV1.CallOpts)
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) NextN() (*big.Int, error) {
	return _LockGatewayLogicV1.Contract.NextN(&_LockGatewayLogicV1.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) Owner() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.Owner(&_LockGatewayLogicV1.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) Owner() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.Owner(&_LockGatewayLogicV1.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "pendingOwner")
	return *ret0, err
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) PendingOwner() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.PendingOwner(&_LockGatewayLogicV1.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) PendingOwner() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.PendingOwner(&_LockGatewayLogicV1.CallOpts)
}

// ReleaseFee is a free data retrieval call binding the contract method 0x2490a901.
//
// Solidity: function releaseFee() view returns(uint16)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) ReleaseFee(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "releaseFee")
	return *ret0, err
}

// ReleaseFee is a free data retrieval call binding the contract method 0x2490a901.
//
// Solidity: function releaseFee() view returns(uint16)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) ReleaseFee() (uint16, error) {
	return _LockGatewayLogicV1.Contract.ReleaseFee(&_LockGatewayLogicV1.CallOpts)
}

// ReleaseFee is a free data retrieval call binding the contract method 0x2490a901.
//
// Solidity: function releaseFee() view returns(uint16)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) ReleaseFee() (uint16, error) {
	return _LockGatewayLogicV1.Contract.ReleaseFee(&_LockGatewayLogicV1.CallOpts)
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) Status(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "status", arg0)
	return *ret0, err
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) Status(arg0 [32]byte) (bool, error) {
	return _LockGatewayLogicV1.Contract.Status(&_LockGatewayLogicV1.CallOpts, arg0)
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) Status(arg0 [32]byte) (bool, error) {
	return _LockGatewayLogicV1.Contract.Status(&_LockGatewayLogicV1.CallOpts, arg0)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) Token() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.Token(&_LockGatewayLogicV1.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) Token() (common.Address, error) {
	return _LockGatewayLogicV1.Contract.Token(&_LockGatewayLogicV1.CallOpts)
}

// VerifySignature is a free data retrieval call binding the contract method 0xdaca6f78.
//
// Solidity: function verifySignature(bytes32 _signedMessageHash, bytes _sig) view returns(bool)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Caller) VerifySignature(opts *bind.CallOpts, _signedMessageHash [32]byte, _sig []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LockGatewayLogicV1.contract.Call(opts, out, "verifySignature", _signedMessageHash, _sig)
	return *ret0, err
}

// VerifySignature is a free data retrieval call binding the contract method 0xdaca6f78.
//
// Solidity: function verifySignature(bytes32 _signedMessageHash, bytes _sig) view returns(bool)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) VerifySignature(_signedMessageHash [32]byte, _sig []byte) (bool, error) {
	return _LockGatewayLogicV1.Contract.VerifySignature(&_LockGatewayLogicV1.CallOpts, _signedMessageHash, _sig)
}

// VerifySignature is a free data retrieval call binding the contract method 0xdaca6f78.
//
// Solidity: function verifySignature(bytes32 _signedMessageHash, bytes _sig) view returns(bool)
func (_LockGatewayLogicV1 *LockGatewayLogicV1CallerSession) VerifySignature(_signedMessageHash [32]byte, _sig []byte) (bool, error) {
	return _LockGatewayLogicV1.Contract.VerifySignature(&_LockGatewayLogicV1.CallOpts, _signedMessageHash, _sig)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) BlacklistRecoverableToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "blacklistRecoverableToken", _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.BlacklistRecoverableToken(&_LockGatewayLogicV1.TransactOpts, _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.BlacklistRecoverableToken(&_LockGatewayLogicV1.TransactOpts, _token)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) ClaimOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "claimOwnership")
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) ClaimOwnership() (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.ClaimOwnership(&_LockGatewayLogicV1.TransactOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) ClaimOwnership() (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.ClaimOwnership(&_LockGatewayLogicV1.TransactOpts)
}

// ClaimTokenOwnership is a paid mutator transaction binding the contract method 0x10731a65.
//
// Solidity: function claimTokenOwnership() returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) ClaimTokenOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "claimTokenOwnership")
}

// ClaimTokenOwnership is a paid mutator transaction binding the contract method 0x10731a65.
//
// Solidity: function claimTokenOwnership() returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) ClaimTokenOwnership() (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.ClaimTokenOwnership(&_LockGatewayLogicV1.TransactOpts)
}

// ClaimTokenOwnership is a paid mutator transaction binding the contract method 0x10731a65.
//
// Solidity: function claimTokenOwnership() returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) ClaimTokenOwnership() (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.ClaimTokenOwnership(&_LockGatewayLogicV1.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xa2999beb.
//
// Solidity: function initialize(address _token, address _feeRecipient, address _mintAuthority, uint16 _lockFee, uint16 _releaseFee, uint256 _minimumBurnAmount) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) Initialize(opts *bind.TransactOpts, _token common.Address, _feeRecipient common.Address, _mintAuthority common.Address, _lockFee uint16, _releaseFee uint16, _minimumBurnAmount *big.Int) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "initialize", _token, _feeRecipient, _mintAuthority, _lockFee, _releaseFee, _minimumBurnAmount)
}

// Initialize is a paid mutator transaction binding the contract method 0xa2999beb.
//
// Solidity: function initialize(address _token, address _feeRecipient, address _mintAuthority, uint16 _lockFee, uint16 _releaseFee, uint256 _minimumBurnAmount) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) Initialize(_token common.Address, _feeRecipient common.Address, _mintAuthority common.Address, _lockFee uint16, _releaseFee uint16, _minimumBurnAmount *big.Int) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.Initialize(&_LockGatewayLogicV1.TransactOpts, _token, _feeRecipient, _mintAuthority, _lockFee, _releaseFee, _minimumBurnAmount)
}

// Initialize is a paid mutator transaction binding the contract method 0xa2999beb.
//
// Solidity: function initialize(address _token, address _feeRecipient, address _mintAuthority, uint16 _lockFee, uint16 _releaseFee, uint256 _minimumBurnAmount) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) Initialize(_token common.Address, _feeRecipient common.Address, _mintAuthority common.Address, _lockFee uint16, _releaseFee uint16, _minimumBurnAmount *big.Int) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.Initialize(&_LockGatewayLogicV1.TransactOpts, _token, _feeRecipient, _mintAuthority, _lockFee, _releaseFee, _minimumBurnAmount)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) Initialize0(opts *bind.TransactOpts, _nextOwner common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "initialize0", _nextOwner)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) Initialize0(_nextOwner common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.Initialize0(&_LockGatewayLogicV1.TransactOpts, _nextOwner)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) Initialize0(_nextOwner common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.Initialize0(&_LockGatewayLogicV1.TransactOpts, _nextOwner)
}

// Lock is a paid mutator transaction binding the contract method 0x777e0b28.
//
// Solidity: function lock(string _chain, bytes _to, bytes _payload, uint256 _amount) returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) Lock(opts *bind.TransactOpts, _chain string, _to []byte, _payload []byte, _amount *big.Int) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "lock", _chain, _to, _payload, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x777e0b28.
//
// Solidity: function lock(string _chain, bytes _to, bytes _payload, uint256 _amount) returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) Lock(_chain string, _to []byte, _payload []byte, _amount *big.Int) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.Lock(&_LockGatewayLogicV1.TransactOpts, _chain, _to, _payload, _amount)
}

// Lock is a paid mutator transaction binding the contract method 0x777e0b28.
//
// Solidity: function lock(string _chain, bytes _to, bytes _payload, uint256 _amount) returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) Lock(_chain string, _to []byte, _payload []byte, _amount *big.Int) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.Lock(&_LockGatewayLogicV1.TransactOpts, _chain, _to, _payload, _amount)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) RecoverTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "recoverTokens", _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.RecoverTokens(&_LockGatewayLogicV1.TransactOpts, _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.RecoverTokens(&_LockGatewayLogicV1.TransactOpts, _token)
}

// Release is a paid mutator transaction binding the contract method 0x9cffc715.
//
// Solidity: function release(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes _sig) returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) Release(opts *bind.TransactOpts, _pHash [32]byte, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "release", _pHash, _amount, _nHash, _sig)
}

// Release is a paid mutator transaction binding the contract method 0x9cffc715.
//
// Solidity: function release(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes _sig) returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) Release(_pHash [32]byte, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.Release(&_LockGatewayLogicV1.TransactOpts, _pHash, _amount, _nHash, _sig)
}

// Release is a paid mutator transaction binding the contract method 0x9cffc715.
//
// Solidity: function release(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes _sig) returns(uint256)
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) Release(_pHash [32]byte, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.Release(&_LockGatewayLogicV1.TransactOpts, _pHash, _amount, _nHash, _sig)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) RenounceOwnership() (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.RenounceOwnership(&_LockGatewayLogicV1.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.RenounceOwnership(&_LockGatewayLogicV1.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.TransferOwnership(&_LockGatewayLogicV1.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.TransferOwnership(&_LockGatewayLogicV1.TransactOpts, newOwner)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0xf160d369.
//
// Solidity: function updateFeeRecipient(address _nextFeeRecipient) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) UpdateFeeRecipient(opts *bind.TransactOpts, _nextFeeRecipient common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "updateFeeRecipient", _nextFeeRecipient)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0xf160d369.
//
// Solidity: function updateFeeRecipient(address _nextFeeRecipient) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) UpdateFeeRecipient(_nextFeeRecipient common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.UpdateFeeRecipient(&_LockGatewayLogicV1.TransactOpts, _nextFeeRecipient)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0xf160d369.
//
// Solidity: function updateFeeRecipient(address _nextFeeRecipient) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) UpdateFeeRecipient(_nextFeeRecipient common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.UpdateFeeRecipient(&_LockGatewayLogicV1.TransactOpts, _nextFeeRecipient)
}

// UpdateLockFee is a paid mutator transaction binding the contract method 0xd1706219.
//
// Solidity: function updateLockFee(uint16 _nextLockFee) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) UpdateLockFee(opts *bind.TransactOpts, _nextLockFee uint16) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "updateLockFee", _nextLockFee)
}

// UpdateLockFee is a paid mutator transaction binding the contract method 0xd1706219.
//
// Solidity: function updateLockFee(uint16 _nextLockFee) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) UpdateLockFee(_nextLockFee uint16) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.UpdateLockFee(&_LockGatewayLogicV1.TransactOpts, _nextLockFee)
}

// UpdateLockFee is a paid mutator transaction binding the contract method 0xd1706219.
//
// Solidity: function updateLockFee(uint16 _nextLockFee) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) UpdateLockFee(_nextLockFee uint16) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.UpdateLockFee(&_LockGatewayLogicV1.TransactOpts, _nextLockFee)
}

// UpdateMintAuthority is a paid mutator transaction binding the contract method 0x0130a33b.
//
// Solidity: function updateMintAuthority(address _nextMintAuthority) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) UpdateMintAuthority(opts *bind.TransactOpts, _nextMintAuthority common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "updateMintAuthority", _nextMintAuthority)
}

// UpdateMintAuthority is a paid mutator transaction binding the contract method 0x0130a33b.
//
// Solidity: function updateMintAuthority(address _nextMintAuthority) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) UpdateMintAuthority(_nextMintAuthority common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.UpdateMintAuthority(&_LockGatewayLogicV1.TransactOpts, _nextMintAuthority)
}

// UpdateMintAuthority is a paid mutator transaction binding the contract method 0x0130a33b.
//
// Solidity: function updateMintAuthority(address _nextMintAuthority) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) UpdateMintAuthority(_nextMintAuthority common.Address) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.UpdateMintAuthority(&_LockGatewayLogicV1.TransactOpts, _nextMintAuthority)
}

// UpdateReleaseFee is a paid mutator transaction binding the contract method 0xe34a03e0.
//
// Solidity: function updateReleaseFee(uint16 _nextReleaseFee) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Transactor) UpdateReleaseFee(opts *bind.TransactOpts, _nextReleaseFee uint16) (*types.Transaction, error) {
	return _LockGatewayLogicV1.contract.Transact(opts, "updateReleaseFee", _nextReleaseFee)
}

// UpdateReleaseFee is a paid mutator transaction binding the contract method 0xe34a03e0.
//
// Solidity: function updateReleaseFee(uint16 _nextReleaseFee) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1Session) UpdateReleaseFee(_nextReleaseFee uint16) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.UpdateReleaseFee(&_LockGatewayLogicV1.TransactOpts, _nextReleaseFee)
}

// UpdateReleaseFee is a paid mutator transaction binding the contract method 0xe34a03e0.
//
// Solidity: function updateReleaseFee(uint16 _nextReleaseFee) returns()
func (_LockGatewayLogicV1 *LockGatewayLogicV1TransactorSession) UpdateReleaseFee(_nextReleaseFee uint16) (*types.Transaction, error) {
	return _LockGatewayLogicV1.Contract.UpdateReleaseFee(&_LockGatewayLogicV1.TransactOpts, _nextReleaseFee)
}

// LockGatewayLogicV1LogLockIterator is returned from FilterLogLock and is used to iterate over the raw logs and unpacked data for LogLock events raised by the LockGatewayLogicV1 contract.
type LockGatewayLogicV1LogLockIterator struct {
	Event *LockGatewayLogicV1LogLock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockGatewayLogicV1LogLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockGatewayLogicV1LogLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockGatewayLogicV1LogLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockGatewayLogicV1LogLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockGatewayLogicV1LogLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockGatewayLogicV1LogLock represents a LogLock event raised by the LockGatewayLogicV1 contract.
type LockGatewayLogicV1LogLock struct {
	To        []byte
	P         []byte
	Amount    *big.Int
	N         *big.Int
	IndexedTo common.Hash
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogLock is a free log retrieval operation binding the contract event 0x29d445aa7425cbcc7ad82286c98c167eacc1493138451b0e5206d19a9de098ba.
//
// Solidity: event LogLock(bytes _to, bytes _p, uint256 _amount, uint256 indexed _n, bytes indexed _indexedTo)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) FilterLogLock(opts *bind.FilterOpts, _n []*big.Int, _indexedTo [][]byte) (*LockGatewayLogicV1LogLockIterator, error) {

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _indexedToRule []interface{}
	for _, _indexedToItem := range _indexedTo {
		_indexedToRule = append(_indexedToRule, _indexedToItem)
	}

	logs, sub, err := _LockGatewayLogicV1.contract.FilterLogs(opts, "LogLock", _nRule, _indexedToRule)
	if err != nil {
		return nil, err
	}
	return &LockGatewayLogicV1LogLockIterator{contract: _LockGatewayLogicV1.contract, event: "LogLock", logs: logs, sub: sub}, nil
}

// WatchLogLock is a free log subscription operation binding the contract event 0x29d445aa7425cbcc7ad82286c98c167eacc1493138451b0e5206d19a9de098ba.
//
// Solidity: event LogLock(bytes _to, bytes _p, uint256 _amount, uint256 indexed _n, bytes indexed _indexedTo)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) WatchLogLock(opts *bind.WatchOpts, sink chan<- *LockGatewayLogicV1LogLock, _n []*big.Int, _indexedTo [][]byte) (event.Subscription, error) {

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _indexedToRule []interface{}
	for _, _indexedToItem := range _indexedTo {
		_indexedToRule = append(_indexedToRule, _indexedToItem)
	}

	logs, sub, err := _LockGatewayLogicV1.contract.WatchLogs(opts, "LogLock", _nRule, _indexedToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockGatewayLogicV1LogLock)
				if err := _LockGatewayLogicV1.contract.UnpackLog(event, "LogLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogLock is a log parse operation binding the contract event 0x29d445aa7425cbcc7ad82286c98c167eacc1493138451b0e5206d19a9de098ba.
//
// Solidity: event LogLock(bytes _to, bytes _p, uint256 _amount, uint256 indexed _n, bytes indexed _indexedTo)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) ParseLogLock(log types.Log) (*LockGatewayLogicV1LogLock, error) {
	event := new(LockGatewayLogicV1LogLock)
	if err := _LockGatewayLogicV1.contract.UnpackLog(event, "LogLock", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LockGatewayLogicV1LogMintAuthorityUpdatedIterator is returned from FilterLogMintAuthorityUpdated and is used to iterate over the raw logs and unpacked data for LogMintAuthorityUpdated events raised by the LockGatewayLogicV1 contract.
type LockGatewayLogicV1LogMintAuthorityUpdatedIterator struct {
	Event *LockGatewayLogicV1LogMintAuthorityUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockGatewayLogicV1LogMintAuthorityUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockGatewayLogicV1LogMintAuthorityUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockGatewayLogicV1LogMintAuthorityUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockGatewayLogicV1LogMintAuthorityUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockGatewayLogicV1LogMintAuthorityUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockGatewayLogicV1LogMintAuthorityUpdated represents a LogMintAuthorityUpdated event raised by the LockGatewayLogicV1 contract.
type LockGatewayLogicV1LogMintAuthorityUpdated struct {
	NewMintAuthority common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLogMintAuthorityUpdated is a free log retrieval operation binding the contract event 0xf0f08e606c1dd3a2c220ada53422fd9fe0aa75614b27db0549f649de3ad2072a.
//
// Solidity: event LogMintAuthorityUpdated(address indexed _newMintAuthority)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) FilterLogMintAuthorityUpdated(opts *bind.FilterOpts, _newMintAuthority []common.Address) (*LockGatewayLogicV1LogMintAuthorityUpdatedIterator, error) {

	var _newMintAuthorityRule []interface{}
	for _, _newMintAuthorityItem := range _newMintAuthority {
		_newMintAuthorityRule = append(_newMintAuthorityRule, _newMintAuthorityItem)
	}

	logs, sub, err := _LockGatewayLogicV1.contract.FilterLogs(opts, "LogMintAuthorityUpdated", _newMintAuthorityRule)
	if err != nil {
		return nil, err
	}
	return &LockGatewayLogicV1LogMintAuthorityUpdatedIterator{contract: _LockGatewayLogicV1.contract, event: "LogMintAuthorityUpdated", logs: logs, sub: sub}, nil
}

// WatchLogMintAuthorityUpdated is a free log subscription operation binding the contract event 0xf0f08e606c1dd3a2c220ada53422fd9fe0aa75614b27db0549f649de3ad2072a.
//
// Solidity: event LogMintAuthorityUpdated(address indexed _newMintAuthority)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) WatchLogMintAuthorityUpdated(opts *bind.WatchOpts, sink chan<- *LockGatewayLogicV1LogMintAuthorityUpdated, _newMintAuthority []common.Address) (event.Subscription, error) {

	var _newMintAuthorityRule []interface{}
	for _, _newMintAuthorityItem := range _newMintAuthority {
		_newMintAuthorityRule = append(_newMintAuthorityRule, _newMintAuthorityItem)
	}

	logs, sub, err := _LockGatewayLogicV1.contract.WatchLogs(opts, "LogMintAuthorityUpdated", _newMintAuthorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockGatewayLogicV1LogMintAuthorityUpdated)
				if err := _LockGatewayLogicV1.contract.UnpackLog(event, "LogMintAuthorityUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogMintAuthorityUpdated is a log parse operation binding the contract event 0xf0f08e606c1dd3a2c220ada53422fd9fe0aa75614b27db0549f649de3ad2072a.
//
// Solidity: event LogMintAuthorityUpdated(address indexed _newMintAuthority)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) ParseLogMintAuthorityUpdated(log types.Log) (*LockGatewayLogicV1LogMintAuthorityUpdated, error) {
	event := new(LockGatewayLogicV1LogMintAuthorityUpdated)
	if err := _LockGatewayLogicV1.contract.UnpackLog(event, "LogMintAuthorityUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LockGatewayLogicV1LogReleaseIterator is returned from FilterLogRelease and is used to iterate over the raw logs and unpacked data for LogRelease events raised by the LockGatewayLogicV1 contract.
type LockGatewayLogicV1LogReleaseIterator struct {
	Event *LockGatewayLogicV1LogRelease // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockGatewayLogicV1LogReleaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockGatewayLogicV1LogRelease)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockGatewayLogicV1LogRelease)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockGatewayLogicV1LogReleaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockGatewayLogicV1LogReleaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockGatewayLogicV1LogRelease represents a LogRelease event raised by the LockGatewayLogicV1 contract.
type LockGatewayLogicV1LogRelease struct {
	To                common.Address
	Amount            *big.Int
	N                 *big.Int
	SignedMessageHash [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterLogRelease is a free log retrieval operation binding the contract event 0x734eaf792d25ddbb90912f7762d09abb15bc034fc7d9a65bbcbfb04428b9f15f.
//
// Solidity: event LogRelease(address indexed _to, uint256 _amount, uint256 indexed _n, bytes32 indexed _signedMessageHash)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) FilterLogRelease(opts *bind.FilterOpts, _to []common.Address, _n []*big.Int, _signedMessageHash [][32]byte) (*LockGatewayLogicV1LogReleaseIterator, error) {

	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _signedMessageHashRule []interface{}
	for _, _signedMessageHashItem := range _signedMessageHash {
		_signedMessageHashRule = append(_signedMessageHashRule, _signedMessageHashItem)
	}

	logs, sub, err := _LockGatewayLogicV1.contract.FilterLogs(opts, "LogRelease", _toRule, _nRule, _signedMessageHashRule)
	if err != nil {
		return nil, err
	}
	return &LockGatewayLogicV1LogReleaseIterator{contract: _LockGatewayLogicV1.contract, event: "LogRelease", logs: logs, sub: sub}, nil
}

// WatchLogRelease is a free log subscription operation binding the contract event 0x734eaf792d25ddbb90912f7762d09abb15bc034fc7d9a65bbcbfb04428b9f15f.
//
// Solidity: event LogRelease(address indexed _to, uint256 _amount, uint256 indexed _n, bytes32 indexed _signedMessageHash)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) WatchLogRelease(opts *bind.WatchOpts, sink chan<- *LockGatewayLogicV1LogRelease, _to []common.Address, _n []*big.Int, _signedMessageHash [][32]byte) (event.Subscription, error) {

	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _signedMessageHashRule []interface{}
	for _, _signedMessageHashItem := range _signedMessageHash {
		_signedMessageHashRule = append(_signedMessageHashRule, _signedMessageHashItem)
	}

	logs, sub, err := _LockGatewayLogicV1.contract.WatchLogs(opts, "LogRelease", _toRule, _nRule, _signedMessageHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockGatewayLogicV1LogRelease)
				if err := _LockGatewayLogicV1.contract.UnpackLog(event, "LogRelease", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogRelease is a log parse operation binding the contract event 0x734eaf792d25ddbb90912f7762d09abb15bc034fc7d9a65bbcbfb04428b9f15f.
//
// Solidity: event LogRelease(address indexed _to, uint256 _amount, uint256 indexed _n, bytes32 indexed _signedMessageHash)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) ParseLogRelease(log types.Log) (*LockGatewayLogicV1LogRelease, error) {
	event := new(LockGatewayLogicV1LogRelease)
	if err := _LockGatewayLogicV1.contract.UnpackLog(event, "LogRelease", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LockGatewayLogicV1OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LockGatewayLogicV1 contract.
type LockGatewayLogicV1OwnershipTransferredIterator struct {
	Event *LockGatewayLogicV1OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockGatewayLogicV1OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockGatewayLogicV1OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockGatewayLogicV1OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockGatewayLogicV1OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockGatewayLogicV1OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockGatewayLogicV1OwnershipTransferred represents a OwnershipTransferred event raised by the LockGatewayLogicV1 contract.
type LockGatewayLogicV1OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LockGatewayLogicV1OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LockGatewayLogicV1.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LockGatewayLogicV1OwnershipTransferredIterator{contract: _LockGatewayLogicV1.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LockGatewayLogicV1OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LockGatewayLogicV1.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockGatewayLogicV1OwnershipTransferred)
				if err := _LockGatewayLogicV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LockGatewayLogicV1 *LockGatewayLogicV1Filterer) ParseOwnershipTransferred(log types.Log) (*LockGatewayLogicV1OwnershipTransferred, error) {
	event := new(LockGatewayLogicV1OwnershipTransferred)
	if err := _LockGatewayLogicV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LockGatewayProxyABI is the input ABI used to generate the binding from.
const LockGatewayProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// LockGatewayProxyBin is the compiled bytecode used for deploying new contracts.
var LockGatewayProxyBin = "0x608060405234801561001057600080fd5b5061097c806100206000396000f3fe6080604052600436106100705760003560e01c80638f2839701161004e5780638f2839701461015e578063cf7a1d7714610191578063d1f5789414610250578063f851a4401461030657610070565b80633659cfe61461007a5780634f1ef286146100ad5780635c60da1b1461012d575b61007861031b565b005b34801561008657600080fd5b506100786004803603602081101561009d57600080fd5b50356001600160a01b0316610335565b610078600480360360408110156100c357600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100ee57600080fd5b82018360208201111561010057600080fd5b8035906020019184600183028401116401000000008311171561012257600080fd5b50909250905061036f565b34801561013957600080fd5b5061014261041c565b604080516001600160a01b039092168252519081900360200190f35b34801561016a57600080fd5b506100786004803603602081101561018157600080fd5b50356001600160a01b0316610459565b610078600480360360608110156101a757600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156101db57600080fd5b8201836020820111156101ed57600080fd5b8035906020019184600183028401116401000000008311171561020f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610513945050505050565b6100786004803603604081101561026657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561029157600080fd5b8201836020820111156102a357600080fd5b803590602001918460018302840111640100000000831117156102c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610599945050505050565b34801561031257600080fd5b506101426106d9565b610323610704565b61033361032e610764565b610789565b565b61033d6107ad565b6001600160a01b0316336001600160a01b031614156103645761035f816107d2565b61036c565b61036c61031b565b50565b6103776107ad565b6001600160a01b0316336001600160a01b0316141561040f57610399836107d2565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d80600081146103f6576040519150601f19603f3d011682016040523d82523d6000602084013e6103fb565b606091505b505090508061040957600080fd5b50610417565b61041761031b565b505050565b60006104266107ad565b6001600160a01b0316336001600160a01b0316141561044e57610447610764565b9050610456565b61045661031b565b90565b6104616107ad565b6001600160a01b0316336001600160a01b03161415610364576001600160a01b0381166104bf5760405162461bcd60e51b81526004018080602001828103825260368152602001806108d76036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104e86107ad565b604080516001600160a01b03928316815291841660208301528051918290030190a161035f81610812565b600061051d610764565b6001600160a01b03161461053057600080fd5b61053a8382610599565b604080517232b4b8189c9b1b97383937bc3c9730b236b4b760691b815290519081900360130190207fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036000199091011461059057fe5b61041782610812565b60006105a3610764565b6001600160a01b0316146105b657600080fd5b604080517f656970313936372e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c0190207f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6000199091011461061657fe5b61061f82610836565b8051156106d5576000826001600160a01b0316826040518082805190602001908083835b602083106106625780518252601f199092019160209182019101610643565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146106c2576040519150601f19603f3d011682016040523d82523d6000602084013e6106c7565b606091505b505090508061041757600080fd5b5050565b60006106e36107ad565b6001600160a01b0316336001600160a01b0316141561044e576104476107ad565b61070c6107ad565b6001600160a01b0316336001600160a01b0316141561075c5760405162461bcd60e51b81526004018080602001828103825260328152602001806108a56032913960400191505060405180910390fd5b610333610333565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156107a8573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6107db81610836565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b61083f8161089e565b61087a5760405162461bcd60e51b815260040180806020018281038252603b81526020018061090d603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b15159056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a265627a7a72315820cc3a043d1979ebbf27a5e96f9522a065f6ceffe379857ba1b856b2feef95ffda64736f6c63430005100032"

// DeployLockGatewayProxy deploys a new Ethereum contract, binding an instance of LockGatewayProxy to it.
func DeployLockGatewayProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LockGatewayProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(LockGatewayProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LockGatewayProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LockGatewayProxy{LockGatewayProxyCaller: LockGatewayProxyCaller{contract: contract}, LockGatewayProxyTransactor: LockGatewayProxyTransactor{contract: contract}, LockGatewayProxyFilterer: LockGatewayProxyFilterer{contract: contract}}, nil
}

// LockGatewayProxy is an auto generated Go binding around an Ethereum contract.
type LockGatewayProxy struct {
	LockGatewayProxyCaller     // Read-only binding to the contract
	LockGatewayProxyTransactor // Write-only binding to the contract
	LockGatewayProxyFilterer   // Log filterer for contract events
}

// LockGatewayProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type LockGatewayProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockGatewayProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LockGatewayProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockGatewayProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LockGatewayProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockGatewayProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LockGatewayProxySession struct {
	Contract     *LockGatewayProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LockGatewayProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LockGatewayProxyCallerSession struct {
	Contract *LockGatewayProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// LockGatewayProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LockGatewayProxyTransactorSession struct {
	Contract     *LockGatewayProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// LockGatewayProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type LockGatewayProxyRaw struct {
	Contract *LockGatewayProxy // Generic contract binding to access the raw methods on
}

// LockGatewayProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LockGatewayProxyCallerRaw struct {
	Contract *LockGatewayProxyCaller // Generic read-only contract binding to access the raw methods on
}

// LockGatewayProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LockGatewayProxyTransactorRaw struct {
	Contract *LockGatewayProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLockGatewayProxy creates a new instance of LockGatewayProxy, bound to a specific deployed contract.
func NewLockGatewayProxy(address common.Address, backend bind.ContractBackend) (*LockGatewayProxy, error) {
	contract, err := bindLockGatewayProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LockGatewayProxy{LockGatewayProxyCaller: LockGatewayProxyCaller{contract: contract}, LockGatewayProxyTransactor: LockGatewayProxyTransactor{contract: contract}, LockGatewayProxyFilterer: LockGatewayProxyFilterer{contract: contract}}, nil
}

// NewLockGatewayProxyCaller creates a new read-only instance of LockGatewayProxy, bound to a specific deployed contract.
func NewLockGatewayProxyCaller(address common.Address, caller bind.ContractCaller) (*LockGatewayProxyCaller, error) {
	contract, err := bindLockGatewayProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LockGatewayProxyCaller{contract: contract}, nil
}

// NewLockGatewayProxyTransactor creates a new write-only instance of LockGatewayProxy, bound to a specific deployed contract.
func NewLockGatewayProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*LockGatewayProxyTransactor, error) {
	contract, err := bindLockGatewayProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LockGatewayProxyTransactor{contract: contract}, nil
}

// NewLockGatewayProxyFilterer creates a new log filterer instance of LockGatewayProxy, bound to a specific deployed contract.
func NewLockGatewayProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*LockGatewayProxyFilterer, error) {
	contract, err := bindLockGatewayProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LockGatewayProxyFilterer{contract: contract}, nil
}

// bindLockGatewayProxy binds a generic wrapper to an already deployed contract.
func bindLockGatewayProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LockGatewayProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LockGatewayProxy *LockGatewayProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LockGatewayProxy.Contract.LockGatewayProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LockGatewayProxy *LockGatewayProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.LockGatewayProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LockGatewayProxy *LockGatewayProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.LockGatewayProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LockGatewayProxy *LockGatewayProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LockGatewayProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LockGatewayProxy *LockGatewayProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LockGatewayProxy *LockGatewayProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_LockGatewayProxy *LockGatewayProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_LockGatewayProxy *LockGatewayProxySession) Admin() (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Admin(&_LockGatewayProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_LockGatewayProxy *LockGatewayProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Admin(&_LockGatewayProxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_LockGatewayProxy *LockGatewayProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _LockGatewayProxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_LockGatewayProxy *LockGatewayProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.ChangeAdmin(&_LockGatewayProxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_LockGatewayProxy *LockGatewayProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.ChangeAdmin(&_LockGatewayProxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_LockGatewayProxy *LockGatewayProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_LockGatewayProxy *LockGatewayProxySession) Implementation() (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Implementation(&_LockGatewayProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_LockGatewayProxy *LockGatewayProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Implementation(&_LockGatewayProxy.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_LockGatewayProxy *LockGatewayProxyTransactor) Initialize(opts *bind.TransactOpts, _logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.contract.Transact(opts, "initialize", _logic, _admin, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_LockGatewayProxy *LockGatewayProxySession) Initialize(_logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Initialize(&_LockGatewayProxy.TransactOpts, _logic, _admin, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_LockGatewayProxy *LockGatewayProxyTransactorSession) Initialize(_logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Initialize(&_LockGatewayProxy.TransactOpts, _logic, _admin, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_LockGatewayProxy *LockGatewayProxyTransactor) Initialize0(opts *bind.TransactOpts, _logic common.Address, _data []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.contract.Transact(opts, "initialize0", _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_LockGatewayProxy *LockGatewayProxySession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Initialize0(&_LockGatewayProxy.TransactOpts, _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_LockGatewayProxy *LockGatewayProxyTransactorSession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Initialize0(&_LockGatewayProxy.TransactOpts, _logic, _data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_LockGatewayProxy *LockGatewayProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _LockGatewayProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_LockGatewayProxy *LockGatewayProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.UpgradeTo(&_LockGatewayProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_LockGatewayProxy *LockGatewayProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.UpgradeTo(&_LockGatewayProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LockGatewayProxy *LockGatewayProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LockGatewayProxy *LockGatewayProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.UpgradeToAndCall(&_LockGatewayProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LockGatewayProxy *LockGatewayProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.UpgradeToAndCall(&_LockGatewayProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LockGatewayProxy *LockGatewayProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LockGatewayProxy *LockGatewayProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Fallback(&_LockGatewayProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LockGatewayProxy *LockGatewayProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _LockGatewayProxy.Contract.Fallback(&_LockGatewayProxy.TransactOpts, calldata)
}

// LockGatewayProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the LockGatewayProxy contract.
type LockGatewayProxyAdminChangedIterator struct {
	Event *LockGatewayProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockGatewayProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockGatewayProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockGatewayProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockGatewayProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockGatewayProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockGatewayProxyAdminChanged represents a AdminChanged event raised by the LockGatewayProxy contract.
type LockGatewayProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_LockGatewayProxy *LockGatewayProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*LockGatewayProxyAdminChangedIterator, error) {

	logs, sub, err := _LockGatewayProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &LockGatewayProxyAdminChangedIterator{contract: _LockGatewayProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_LockGatewayProxy *LockGatewayProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *LockGatewayProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _LockGatewayProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockGatewayProxyAdminChanged)
				if err := _LockGatewayProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_LockGatewayProxy *LockGatewayProxyFilterer) ParseAdminChanged(log types.Log) (*LockGatewayProxyAdminChanged, error) {
	event := new(LockGatewayProxyAdminChanged)
	if err := _LockGatewayProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LockGatewayProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the LockGatewayProxy contract.
type LockGatewayProxyUpgradedIterator struct {
	Event *LockGatewayProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LockGatewayProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LockGatewayProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LockGatewayProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LockGatewayProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LockGatewayProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LockGatewayProxyUpgraded represents a Upgraded event raised by the LockGatewayProxy contract.
type LockGatewayProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LockGatewayProxy *LockGatewayProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*LockGatewayProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LockGatewayProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &LockGatewayProxyUpgradedIterator{contract: _LockGatewayProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LockGatewayProxy *LockGatewayProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *LockGatewayProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LockGatewayProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LockGatewayProxyUpgraded)
				if err := _LockGatewayProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LockGatewayProxy *LockGatewayProxyFilterer) ParseUpgraded(log types.Log) (*LockGatewayProxyUpgraded, error) {
	event := new(LockGatewayProxyUpgraded)
	if err := _LockGatewayProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LockGatewayStateV1ABI is the input ABI used to generate the binding from.
const LockGatewayStateV1ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractRenERC20LogicV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// LockGatewayStateV1Bin is the compiled bytecode used for deploying new contracts.
var LockGatewayStateV1Bin = "0x6080604052600060055534801561001557600080fd5b506101e0806100256000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639340b21e1161005b5780639340b21e1461010957806394c238ac14610111578063aa4df9ad1461012b578063fc0c546a1461013357610088565b80632490a9011461008d57806346904840146100ac57806352ad0d5e146100d057806356a0623514610101575b600080fd5b61009561013b565b6040805161ffff9092168252519081900360200190f35b6100b461014c565b604080516001600160a01b039092168252519081900360200190f35b6100ed600480360360208110156100e657600080fd5b503561015b565b604080519115158252519081900360200190f35b610095610170565b6100b4610181565b610119610190565b60408051918252519081900360200190f35b610119610196565b6100b461019c565b600354600160b01b900461ffff1681565b6003546001600160a01b031681565b60046020526000908152604090205460ff1681565b600354600160a01b900461ffff1681565b6002546001600160a01b031681565b60005481565b60055481565b6001546001600160a01b03168156fea265627a7a72315820ad7f8720df5a79577d2c513395c66482e192aee32dd5a6431db384dfb087efbb64736f6c63430005100032"

// DeployLockGatewayStateV1 deploys a new Ethereum contract, binding an instance of LockGatewayStateV1 to it.
func DeployLockGatewayStateV1(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LockGatewayStateV1, error) {
	parsed, err := abi.JSON(strings.NewReader(LockGatewayStateV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LockGatewayStateV1Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LockGatewayStateV1{LockGatewayStateV1Caller: LockGatewayStateV1Caller{contract: contract}, LockGatewayStateV1Transactor: LockGatewayStateV1Transactor{contract: contract}, LockGatewayStateV1Filterer: LockGatewayStateV1Filterer{contract: contract}}, nil
}

// LockGatewayStateV1 is an auto generated Go binding around an Ethereum contract.
type LockGatewayStateV1 struct {
	LockGatewayStateV1Caller     // Read-only binding to the contract
	LockGatewayStateV1Transactor // Write-only binding to the contract
	LockGatewayStateV1Filterer   // Log filterer for contract events
}

// LockGatewayStateV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type LockGatewayStateV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockGatewayStateV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type LockGatewayStateV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockGatewayStateV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LockGatewayStateV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LockGatewayStateV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LockGatewayStateV1Session struct {
	Contract     *LockGatewayStateV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// LockGatewayStateV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LockGatewayStateV1CallerSession struct {
	Contract *LockGatewayStateV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// LockGatewayStateV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LockGatewayStateV1TransactorSession struct {
	Contract     *LockGatewayStateV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// LockGatewayStateV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type LockGatewayStateV1Raw struct {
	Contract *LockGatewayStateV1 // Generic contract binding to access the raw methods on
}

// LockGatewayStateV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LockGatewayStateV1CallerRaw struct {
	Contract *LockGatewayStateV1Caller // Generic read-only contract binding to access the raw methods on
}

// LockGatewayStateV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LockGatewayStateV1TransactorRaw struct {
	Contract *LockGatewayStateV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewLockGatewayStateV1 creates a new instance of LockGatewayStateV1, bound to a specific deployed contract.
func NewLockGatewayStateV1(address common.Address, backend bind.ContractBackend) (*LockGatewayStateV1, error) {
	contract, err := bindLockGatewayStateV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LockGatewayStateV1{LockGatewayStateV1Caller: LockGatewayStateV1Caller{contract: contract}, LockGatewayStateV1Transactor: LockGatewayStateV1Transactor{contract: contract}, LockGatewayStateV1Filterer: LockGatewayStateV1Filterer{contract: contract}}, nil
}

// NewLockGatewayStateV1Caller creates a new read-only instance of LockGatewayStateV1, bound to a specific deployed contract.
func NewLockGatewayStateV1Caller(address common.Address, caller bind.ContractCaller) (*LockGatewayStateV1Caller, error) {
	contract, err := bindLockGatewayStateV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LockGatewayStateV1Caller{contract: contract}, nil
}

// NewLockGatewayStateV1Transactor creates a new write-only instance of LockGatewayStateV1, bound to a specific deployed contract.
func NewLockGatewayStateV1Transactor(address common.Address, transactor bind.ContractTransactor) (*LockGatewayStateV1Transactor, error) {
	contract, err := bindLockGatewayStateV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LockGatewayStateV1Transactor{contract: contract}, nil
}

// NewLockGatewayStateV1Filterer creates a new log filterer instance of LockGatewayStateV1, bound to a specific deployed contract.
func NewLockGatewayStateV1Filterer(address common.Address, filterer bind.ContractFilterer) (*LockGatewayStateV1Filterer, error) {
	contract, err := bindLockGatewayStateV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LockGatewayStateV1Filterer{contract: contract}, nil
}

// bindLockGatewayStateV1 binds a generic wrapper to an already deployed contract.
func bindLockGatewayStateV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LockGatewayStateV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LockGatewayStateV1 *LockGatewayStateV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LockGatewayStateV1.Contract.LockGatewayStateV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LockGatewayStateV1 *LockGatewayStateV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayStateV1.Contract.LockGatewayStateV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LockGatewayStateV1 *LockGatewayStateV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LockGatewayStateV1.Contract.LockGatewayStateV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LockGatewayStateV1 *LockGatewayStateV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LockGatewayStateV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LockGatewayStateV1 *LockGatewayStateV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LockGatewayStateV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LockGatewayStateV1 *LockGatewayStateV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LockGatewayStateV1.Contract.contract.Transact(opts, method, params...)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_LockGatewayStateV1 *LockGatewayStateV1Caller) FeeRecipient(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LockGatewayStateV1.contract.Call(opts, out, "feeRecipient")
	return *ret0, err
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_LockGatewayStateV1 *LockGatewayStateV1Session) FeeRecipient() (common.Address, error) {
	return _LockGatewayStateV1.Contract.FeeRecipient(&_LockGatewayStateV1.CallOpts)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_LockGatewayStateV1 *LockGatewayStateV1CallerSession) FeeRecipient() (common.Address, error) {
	return _LockGatewayStateV1.Contract.FeeRecipient(&_LockGatewayStateV1.CallOpts)
}

// LockFee is a free data retrieval call binding the contract method 0x56a06235.
//
// Solidity: function lockFee() view returns(uint16)
func (_LockGatewayStateV1 *LockGatewayStateV1Caller) LockFee(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _LockGatewayStateV1.contract.Call(opts, out, "lockFee")
	return *ret0, err
}

// LockFee is a free data retrieval call binding the contract method 0x56a06235.
//
// Solidity: function lockFee() view returns(uint16)
func (_LockGatewayStateV1 *LockGatewayStateV1Session) LockFee() (uint16, error) {
	return _LockGatewayStateV1.Contract.LockFee(&_LockGatewayStateV1.CallOpts)
}

// LockFee is a free data retrieval call binding the contract method 0x56a06235.
//
// Solidity: function lockFee() view returns(uint16)
func (_LockGatewayStateV1 *LockGatewayStateV1CallerSession) LockFee() (uint16, error) {
	return _LockGatewayStateV1.Contract.LockFee(&_LockGatewayStateV1.CallOpts)
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_LockGatewayStateV1 *LockGatewayStateV1Caller) MinimumBurnAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LockGatewayStateV1.contract.Call(opts, out, "minimumBurnAmount")
	return *ret0, err
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_LockGatewayStateV1 *LockGatewayStateV1Session) MinimumBurnAmount() (*big.Int, error) {
	return _LockGatewayStateV1.Contract.MinimumBurnAmount(&_LockGatewayStateV1.CallOpts)
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_LockGatewayStateV1 *LockGatewayStateV1CallerSession) MinimumBurnAmount() (*big.Int, error) {
	return _LockGatewayStateV1.Contract.MinimumBurnAmount(&_LockGatewayStateV1.CallOpts)
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_LockGatewayStateV1 *LockGatewayStateV1Caller) MintAuthority(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LockGatewayStateV1.contract.Call(opts, out, "mintAuthority")
	return *ret0, err
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_LockGatewayStateV1 *LockGatewayStateV1Session) MintAuthority() (common.Address, error) {
	return _LockGatewayStateV1.Contract.MintAuthority(&_LockGatewayStateV1.CallOpts)
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_LockGatewayStateV1 *LockGatewayStateV1CallerSession) MintAuthority() (common.Address, error) {
	return _LockGatewayStateV1.Contract.MintAuthority(&_LockGatewayStateV1.CallOpts)
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_LockGatewayStateV1 *LockGatewayStateV1Caller) NextN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LockGatewayStateV1.contract.Call(opts, out, "nextN")
	return *ret0, err
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_LockGatewayStateV1 *LockGatewayStateV1Session) NextN() (*big.Int, error) {
	return _LockGatewayStateV1.Contract.NextN(&_LockGatewayStateV1.CallOpts)
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_LockGatewayStateV1 *LockGatewayStateV1CallerSession) NextN() (*big.Int, error) {
	return _LockGatewayStateV1.Contract.NextN(&_LockGatewayStateV1.CallOpts)
}

// ReleaseFee is a free data retrieval call binding the contract method 0x2490a901.
//
// Solidity: function releaseFee() view returns(uint16)
func (_LockGatewayStateV1 *LockGatewayStateV1Caller) ReleaseFee(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _LockGatewayStateV1.contract.Call(opts, out, "releaseFee")
	return *ret0, err
}

// ReleaseFee is a free data retrieval call binding the contract method 0x2490a901.
//
// Solidity: function releaseFee() view returns(uint16)
func (_LockGatewayStateV1 *LockGatewayStateV1Session) ReleaseFee() (uint16, error) {
	return _LockGatewayStateV1.Contract.ReleaseFee(&_LockGatewayStateV1.CallOpts)
}

// ReleaseFee is a free data retrieval call binding the contract method 0x2490a901.
//
// Solidity: function releaseFee() view returns(uint16)
func (_LockGatewayStateV1 *LockGatewayStateV1CallerSession) ReleaseFee() (uint16, error) {
	return _LockGatewayStateV1.Contract.ReleaseFee(&_LockGatewayStateV1.CallOpts)
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_LockGatewayStateV1 *LockGatewayStateV1Caller) Status(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _LockGatewayStateV1.contract.Call(opts, out, "status", arg0)
	return *ret0, err
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_LockGatewayStateV1 *LockGatewayStateV1Session) Status(arg0 [32]byte) (bool, error) {
	return _LockGatewayStateV1.Contract.Status(&_LockGatewayStateV1.CallOpts, arg0)
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_LockGatewayStateV1 *LockGatewayStateV1CallerSession) Status(arg0 [32]byte) (bool, error) {
	return _LockGatewayStateV1.Contract.Status(&_LockGatewayStateV1.CallOpts, arg0)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_LockGatewayStateV1 *LockGatewayStateV1Caller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LockGatewayStateV1.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_LockGatewayStateV1 *LockGatewayStateV1Session) Token() (common.Address, error) {
	return _LockGatewayStateV1.Contract.Token(&_LockGatewayStateV1.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_LockGatewayStateV1 *LockGatewayStateV1CallerSession) Token() (common.Address, error) {
	return _LockGatewayStateV1.Contract.Token(&_LockGatewayStateV1.CallOpts)
}

// MathABI is the input ABI used to generate the binding from.
const MathABI = "[]"

// MathBin is the compiled bytecode used for deploying new contracts.
var MathBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582085312a36a260c0f5633a88a159d692c1c92d28818ae6912ac3ad545383dd47c164736f6c63430005100032"

// DeployMath deploys a new Ethereum contract, binding an instance of Math to it.
func DeployMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Math, error) {
	parsed, err := abi.JSON(strings.NewReader(MathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Math{MathCaller: MathCaller{contract: contract}, MathTransactor: MathTransactor{contract: contract}, MathFilterer: MathFilterer{contract: contract}}, nil
}

// Math is an auto generated Go binding around an Ethereum contract.
type Math struct {
	MathCaller     // Read-only binding to the contract
	MathTransactor // Write-only binding to the contract
	MathFilterer   // Log filterer for contract events
}

// MathCaller is an auto generated read-only Go binding around an Ethereum contract.
type MathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MathSession struct {
	Contract     *Math             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MathCallerSession struct {
	Contract *MathCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MathTransactorSession struct {
	Contract     *MathTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MathRaw is an auto generated low-level Go binding around an Ethereum contract.
type MathRaw struct {
	Contract *Math // Generic contract binding to access the raw methods on
}

// MathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MathCallerRaw struct {
	Contract *MathCaller // Generic read-only contract binding to access the raw methods on
}

// MathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MathTransactorRaw struct {
	Contract *MathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMath creates a new instance of Math, bound to a specific deployed contract.
func NewMath(address common.Address, backend bind.ContractBackend) (*Math, error) {
	contract, err := bindMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Math{MathCaller: MathCaller{contract: contract}, MathTransactor: MathTransactor{contract: contract}, MathFilterer: MathFilterer{contract: contract}}, nil
}

// NewMathCaller creates a new read-only instance of Math, bound to a specific deployed contract.
func NewMathCaller(address common.Address, caller bind.ContractCaller) (*MathCaller, error) {
	contract, err := bindMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MathCaller{contract: contract}, nil
}

// NewMathTransactor creates a new write-only instance of Math, bound to a specific deployed contract.
func NewMathTransactor(address common.Address, transactor bind.ContractTransactor) (*MathTransactor, error) {
	contract, err := bindMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MathTransactor{contract: contract}, nil
}

// NewMathFilterer creates a new log filterer instance of Math, bound to a specific deployed contract.
func NewMathFilterer(address common.Address, filterer bind.ContractFilterer) (*MathFilterer, error) {
	contract, err := bindMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MathFilterer{contract: contract}, nil
}

// bindMath binds a generic wrapper to an already deployed contract.
func bindMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Math *MathRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Math.Contract.MathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Math *MathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Math.Contract.MathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Math *MathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Math.Contract.MathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Math *MathCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Math.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Math *MathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Math.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Math *MathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Math.Contract.contract.Transact(opts, method, params...)
}

// MigrationsABI is the input ABI used to generate the binding from.
const MigrationsABI = "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_completed_migration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"completed\",\"type\":\"uint256\"}],\"name\":\"setCompleted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_address\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MigrationsBin is the compiled bytecode used for deploying new contracts.
var MigrationsBin = "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556101b3806100326000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630900f01014610051578063445df0ac146100795780638da5cb5b14610093578063fdacd576146100b7575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100d4565b005b610081610151565b60408051918252519081900360200190f35b61009b610157565b604080516001600160a01b039092168252519081900360200190f35b610077600480360360208110156100cd57600080fd5b5035610166565b6000546001600160a01b031633141561014e576000819050806001600160a01b031663fdacd5766001546040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561013457600080fd5b505af1158015610148573d6000803e3d6000fd5b50505050505b50565b60015481565b6000546001600160a01b031681565b6000546001600160a01b031633141561014e5760015556fea265627a7a72315820398819cae99e089a9cdb477ba19933ed4541eb69912c83da5bf8508dafe6cdb964736f6c63430005100032"

// DeployMigrations deploys a new Ethereum contract, binding an instance of Migrations to it.
func DeployMigrations(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Migrations, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrationsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MigrationsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Migrations{MigrationsCaller: MigrationsCaller{contract: contract}, MigrationsTransactor: MigrationsTransactor{contract: contract}, MigrationsFilterer: MigrationsFilterer{contract: contract}}, nil
}

// Migrations is an auto generated Go binding around an Ethereum contract.
type Migrations struct {
	MigrationsCaller     // Read-only binding to the contract
	MigrationsTransactor // Write-only binding to the contract
	MigrationsFilterer   // Log filterer for contract events
}

// MigrationsCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrationsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrationsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrationsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrationsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrationsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrationsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrationsSession struct {
	Contract     *Migrations       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MigrationsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrationsCallerSession struct {
	Contract *MigrationsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MigrationsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrationsTransactorSession struct {
	Contract     *MigrationsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MigrationsRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrationsRaw struct {
	Contract *Migrations // Generic contract binding to access the raw methods on
}

// MigrationsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrationsCallerRaw struct {
	Contract *MigrationsCaller // Generic read-only contract binding to access the raw methods on
}

// MigrationsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrationsTransactorRaw struct {
	Contract *MigrationsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrations creates a new instance of Migrations, bound to a specific deployed contract.
func NewMigrations(address common.Address, backend bind.ContractBackend) (*Migrations, error) {
	contract, err := bindMigrations(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Migrations{MigrationsCaller: MigrationsCaller{contract: contract}, MigrationsTransactor: MigrationsTransactor{contract: contract}, MigrationsFilterer: MigrationsFilterer{contract: contract}}, nil
}

// NewMigrationsCaller creates a new read-only instance of Migrations, bound to a specific deployed contract.
func NewMigrationsCaller(address common.Address, caller bind.ContractCaller) (*MigrationsCaller, error) {
	contract, err := bindMigrations(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrationsCaller{contract: contract}, nil
}

// NewMigrationsTransactor creates a new write-only instance of Migrations, bound to a specific deployed contract.
func NewMigrationsTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrationsTransactor, error) {
	contract, err := bindMigrations(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrationsTransactor{contract: contract}, nil
}

// NewMigrationsFilterer creates a new log filterer instance of Migrations, bound to a specific deployed contract.
func NewMigrationsFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrationsFilterer, error) {
	contract, err := bindMigrations(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrationsFilterer{contract: contract}, nil
}

// bindMigrations binds a generic wrapper to an already deployed contract.
func bindMigrations(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrationsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Migrations *MigrationsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Migrations.Contract.MigrationsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Migrations *MigrationsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Migrations.Contract.MigrationsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Migrations *MigrationsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Migrations.Contract.MigrationsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Migrations *MigrationsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Migrations.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Migrations *MigrationsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Migrations.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Migrations *MigrationsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Migrations.Contract.contract.Transact(opts, method, params...)
}

// LastCompletedMigration is a free data retrieval call binding the contract method 0x445df0ac.
//
// Solidity: function last_completed_migration() view returns(uint256)
func (_Migrations *MigrationsCaller) LastCompletedMigration(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Migrations.contract.Call(opts, out, "last_completed_migration")
	return *ret0, err
}

// LastCompletedMigration is a free data retrieval call binding the contract method 0x445df0ac.
//
// Solidity: function last_completed_migration() view returns(uint256)
func (_Migrations *MigrationsSession) LastCompletedMigration() (*big.Int, error) {
	return _Migrations.Contract.LastCompletedMigration(&_Migrations.CallOpts)
}

// LastCompletedMigration is a free data retrieval call binding the contract method 0x445df0ac.
//
// Solidity: function last_completed_migration() view returns(uint256)
func (_Migrations *MigrationsCallerSession) LastCompletedMigration() (*big.Int, error) {
	return _Migrations.Contract.LastCompletedMigration(&_Migrations.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Migrations *MigrationsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Migrations.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Migrations *MigrationsSession) Owner() (common.Address, error) {
	return _Migrations.Contract.Owner(&_Migrations.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Migrations *MigrationsCallerSession) Owner() (common.Address, error) {
	return _Migrations.Contract.Owner(&_Migrations.CallOpts)
}

// SetCompleted is a paid mutator transaction binding the contract method 0xfdacd576.
//
// Solidity: function setCompleted(uint256 completed) returns()
func (_Migrations *MigrationsTransactor) SetCompleted(opts *bind.TransactOpts, completed *big.Int) (*types.Transaction, error) {
	return _Migrations.contract.Transact(opts, "setCompleted", completed)
}

// SetCompleted is a paid mutator transaction binding the contract method 0xfdacd576.
//
// Solidity: function setCompleted(uint256 completed) returns()
func (_Migrations *MigrationsSession) SetCompleted(completed *big.Int) (*types.Transaction, error) {
	return _Migrations.Contract.SetCompleted(&_Migrations.TransactOpts, completed)
}

// SetCompleted is a paid mutator transaction binding the contract method 0xfdacd576.
//
// Solidity: function setCompleted(uint256 completed) returns()
func (_Migrations *MigrationsTransactorSession) SetCompleted(completed *big.Int) (*types.Transaction, error) {
	return _Migrations.Contract.SetCompleted(&_Migrations.TransactOpts, completed)
}

// Upgrade is a paid mutator transaction binding the contract method 0x0900f010.
//
// Solidity: function upgrade(address new_address) returns()
func (_Migrations *MigrationsTransactor) Upgrade(opts *bind.TransactOpts, new_address common.Address) (*types.Transaction, error) {
	return _Migrations.contract.Transact(opts, "upgrade", new_address)
}

// Upgrade is a paid mutator transaction binding the contract method 0x0900f010.
//
// Solidity: function upgrade(address new_address) returns()
func (_Migrations *MigrationsSession) Upgrade(new_address common.Address) (*types.Transaction, error) {
	return _Migrations.Contract.Upgrade(&_Migrations.TransactOpts, new_address)
}

// Upgrade is a paid mutator transaction binding the contract method 0x0900f010.
//
// Solidity: function upgrade(address new_address) returns()
func (_Migrations *MigrationsTransactorSession) Upgrade(new_address common.Address) (*types.Transaction, error) {
	return _Migrations.Contract.Upgrade(&_Migrations.TransactOpts, new_address)
}

// MintGatewayLogicV1ABI is the input ABI used to generate the binding from.
const MintGatewayLogicV1ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_indexedTo\",\"type\":\"bytes\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_indexedTo\",\"type\":\"bytes\"}],\"name\":\"LogBurnTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_signedMessageHash\",\"type\":\"bytes32\"}],\"name\":\"LogMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newMintAuthority\",\"type\":\"address\"}],\"name\":\"LogMintAuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"blacklistRecoverableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"getBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocknumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_chain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"}],\"name\":\"hashForSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractRenERC20LogicV1\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintAuthority\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_mintFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_burnFee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBurnAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_selectorHash\",\"type\":\"bytes32\"}],\"name\":\"initializeSelectorHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selectorHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractRenERC20LogicV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractMintGatewayLogicV1\",\"name\":\"_nextTokenOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_nextBurnFee\",\"type\":\"uint16\"}],\"name\":\"updateBurnFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumBurnAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBurnAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextMintAuthority\",\"type\":\"address\"}],\"name\":\"updateMintAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_nextMintFee\",\"type\":\"uint16\"}],\"name\":\"updateMintFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_signedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// MintGatewayLogicV1Bin is the compiled bytecode used for deploying new contracts.
var MintGatewayLogicV1Bin = ""

// DeployMintGatewayLogicV1 deploys a new Ethereum contract, binding an instance of MintGatewayLogicV1 to it.
func DeployMintGatewayLogicV1(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MintGatewayLogicV1, error) {
	parsed, err := abi.JSON(strings.NewReader(MintGatewayLogicV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MintGatewayLogicV1Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MintGatewayLogicV1{MintGatewayLogicV1Caller: MintGatewayLogicV1Caller{contract: contract}, MintGatewayLogicV1Transactor: MintGatewayLogicV1Transactor{contract: contract}, MintGatewayLogicV1Filterer: MintGatewayLogicV1Filterer{contract: contract}}, nil
}

// MintGatewayLogicV1 is an auto generated Go binding around an Ethereum contract.
type MintGatewayLogicV1 struct {
	MintGatewayLogicV1Caller     // Read-only binding to the contract
	MintGatewayLogicV1Transactor // Write-only binding to the contract
	MintGatewayLogicV1Filterer   // Log filterer for contract events
}

// MintGatewayLogicV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type MintGatewayLogicV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintGatewayLogicV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MintGatewayLogicV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintGatewayLogicV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MintGatewayLogicV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintGatewayLogicV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MintGatewayLogicV1Session struct {
	Contract     *MintGatewayLogicV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MintGatewayLogicV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MintGatewayLogicV1CallerSession struct {
	Contract *MintGatewayLogicV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// MintGatewayLogicV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MintGatewayLogicV1TransactorSession struct {
	Contract     *MintGatewayLogicV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// MintGatewayLogicV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type MintGatewayLogicV1Raw struct {
	Contract *MintGatewayLogicV1 // Generic contract binding to access the raw methods on
}

// MintGatewayLogicV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MintGatewayLogicV1CallerRaw struct {
	Contract *MintGatewayLogicV1Caller // Generic read-only contract binding to access the raw methods on
}

// MintGatewayLogicV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MintGatewayLogicV1TransactorRaw struct {
	Contract *MintGatewayLogicV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMintGatewayLogicV1 creates a new instance of MintGatewayLogicV1, bound to a specific deployed contract.
func NewMintGatewayLogicV1(address common.Address, backend bind.ContractBackend) (*MintGatewayLogicV1, error) {
	contract, err := bindMintGatewayLogicV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MintGatewayLogicV1{MintGatewayLogicV1Caller: MintGatewayLogicV1Caller{contract: contract}, MintGatewayLogicV1Transactor: MintGatewayLogicV1Transactor{contract: contract}, MintGatewayLogicV1Filterer: MintGatewayLogicV1Filterer{contract: contract}}, nil
}

// NewMintGatewayLogicV1Caller creates a new read-only instance of MintGatewayLogicV1, bound to a specific deployed contract.
func NewMintGatewayLogicV1Caller(address common.Address, caller bind.ContractCaller) (*MintGatewayLogicV1Caller, error) {
	contract, err := bindMintGatewayLogicV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MintGatewayLogicV1Caller{contract: contract}, nil
}

// NewMintGatewayLogicV1Transactor creates a new write-only instance of MintGatewayLogicV1, bound to a specific deployed contract.
func NewMintGatewayLogicV1Transactor(address common.Address, transactor bind.ContractTransactor) (*MintGatewayLogicV1Transactor, error) {
	contract, err := bindMintGatewayLogicV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MintGatewayLogicV1Transactor{contract: contract}, nil
}

// NewMintGatewayLogicV1Filterer creates a new log filterer instance of MintGatewayLogicV1, bound to a specific deployed contract.
func NewMintGatewayLogicV1Filterer(address common.Address, filterer bind.ContractFilterer) (*MintGatewayLogicV1Filterer, error) {
	contract, err := bindMintGatewayLogicV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MintGatewayLogicV1Filterer{contract: contract}, nil
}

// bindMintGatewayLogicV1 binds a generic wrapper to an already deployed contract.
func bindMintGatewayLogicV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MintGatewayLogicV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintGatewayLogicV1 *MintGatewayLogicV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MintGatewayLogicV1.Contract.MintGatewayLogicV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintGatewayLogicV1 *MintGatewayLogicV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.MintGatewayLogicV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintGatewayLogicV1 *MintGatewayLogicV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.MintGatewayLogicV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MintGatewayLogicV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.contract.Transact(opts, method, params...)
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint16)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) BurnFee(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "burnFee")
	return *ret0, err
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint16)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) BurnFee() (uint16, error) {
	return _MintGatewayLogicV1.Contract.BurnFee(&_MintGatewayLogicV1.CallOpts)
}

// BurnFee is a free data retrieval call binding the contract method 0xfce589d8.
//
// Solidity: function burnFee() view returns(uint16)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) BurnFee() (uint16, error) {
	return _MintGatewayLogicV1.Contract.BurnFee(&_MintGatewayLogicV1.CallOpts)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) FeeRecipient(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "feeRecipient")
	return *ret0, err
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) FeeRecipient() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.FeeRecipient(&_MintGatewayLogicV1.CallOpts)
}

// FeeRecipient is a free data retrieval call binding the contract method 0x46904840.
//
// Solidity: function feeRecipient() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) FeeRecipient() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.FeeRecipient(&_MintGatewayLogicV1.CallOpts)
}

// GetBurn is a free data retrieval call binding the contract method 0x2eb3f49b.
//
// Solidity: function getBurn(uint256 _n) view returns(uint256 _blocknumber, bytes _to, uint256 _amount, string _chain, bytes _payload)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) GetBurn(opts *bind.CallOpts, _n *big.Int) (struct {
	Blocknumber *big.Int
	To          []byte
	Amount      *big.Int
	Chain       string
	Payload     []byte
}, error) {
	ret := new(struct {
		Blocknumber *big.Int
		To          []byte
		Amount      *big.Int
		Chain       string
		Payload     []byte
	})
	out := ret
	err := _MintGatewayLogicV1.contract.Call(opts, out, "getBurn", _n)
	return *ret, err
}

// GetBurn is a free data retrieval call binding the contract method 0x2eb3f49b.
//
// Solidity: function getBurn(uint256 _n) view returns(uint256 _blocknumber, bytes _to, uint256 _amount, string _chain, bytes _payload)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) GetBurn(_n *big.Int) (struct {
	Blocknumber *big.Int
	To          []byte
	Amount      *big.Int
	Chain       string
	Payload     []byte
}, error) {
	return _MintGatewayLogicV1.Contract.GetBurn(&_MintGatewayLogicV1.CallOpts, _n)
}

// GetBurn is a free data retrieval call binding the contract method 0x2eb3f49b.
//
// Solidity: function getBurn(uint256 _n) view returns(uint256 _blocknumber, bytes _to, uint256 _amount, string _chain, bytes _payload)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) GetBurn(_n *big.Int) (struct {
	Blocknumber *big.Int
	To          []byte
	Amount      *big.Int
	Chain       string
	Payload     []byte
}, error) {
	return _MintGatewayLogicV1.Contract.GetBurn(&_MintGatewayLogicV1.CallOpts, _n)
}

// HashForSignature is a free data retrieval call binding the contract method 0x5219a566.
//
// Solidity: function hashForSignature(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) view returns(bytes32)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) HashForSignature(opts *bind.CallOpts, _pHash [32]byte, _amount *big.Int, _to common.Address, _nHash [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "hashForSignature", _pHash, _amount, _to, _nHash)
	return *ret0, err
}

// HashForSignature is a free data retrieval call binding the contract method 0x5219a566.
//
// Solidity: function hashForSignature(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) view returns(bytes32)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) HashForSignature(_pHash [32]byte, _amount *big.Int, _to common.Address, _nHash [32]byte) ([32]byte, error) {
	return _MintGatewayLogicV1.Contract.HashForSignature(&_MintGatewayLogicV1.CallOpts, _pHash, _amount, _to, _nHash)
}

// HashForSignature is a free data retrieval call binding the contract method 0x5219a566.
//
// Solidity: function hashForSignature(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) view returns(bytes32)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) HashForSignature(_pHash [32]byte, _amount *big.Int, _to common.Address, _nHash [32]byte) ([32]byte, error) {
	return _MintGatewayLogicV1.Contract.HashForSignature(&_MintGatewayLogicV1.CallOpts, _pHash, _amount, _to, _nHash)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) IsOwner() (bool, error) {
	return _MintGatewayLogicV1.Contract.IsOwner(&_MintGatewayLogicV1.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) IsOwner() (bool, error) {
	return _MintGatewayLogicV1.Contract.IsOwner(&_MintGatewayLogicV1.CallOpts)
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) MinimumBurnAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "minimumBurnAmount")
	return *ret0, err
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) MinimumBurnAmount() (*big.Int, error) {
	return _MintGatewayLogicV1.Contract.MinimumBurnAmount(&_MintGatewayLogicV1.CallOpts)
}

// MinimumBurnAmount is a free data retrieval call binding the contract method 0x94c238ac.
//
// Solidity: function minimumBurnAmount() view returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) MinimumBurnAmount() (*big.Int, error) {
	return _MintGatewayLogicV1.Contract.MinimumBurnAmount(&_MintGatewayLogicV1.CallOpts)
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) MintAuthority(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "mintAuthority")
	return *ret0, err
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) MintAuthority() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.MintAuthority(&_MintGatewayLogicV1.CallOpts)
}

// MintAuthority is a free data retrieval call binding the contract method 0x9340b21e.
//
// Solidity: function mintAuthority() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) MintAuthority() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.MintAuthority(&_MintGatewayLogicV1.CallOpts)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint16)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) MintFee(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "mintFee")
	return *ret0, err
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint16)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) MintFee() (uint16, error) {
	return _MintGatewayLogicV1.Contract.MintFee(&_MintGatewayLogicV1.CallOpts)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint16)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) MintFee() (uint16, error) {
	return _MintGatewayLogicV1.Contract.MintFee(&_MintGatewayLogicV1.CallOpts)
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) NextN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "nextN")
	return *ret0, err
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) NextN() (*big.Int, error) {
	return _MintGatewayLogicV1.Contract.NextN(&_MintGatewayLogicV1.CallOpts)
}

// NextN is a free data retrieval call binding the contract method 0xaa4df9ad.
//
// Solidity: function nextN() view returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) NextN() (*big.Int, error) {
	return _MintGatewayLogicV1.Contract.NextN(&_MintGatewayLogicV1.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) Owner() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.Owner(&_MintGatewayLogicV1.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) Owner() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.Owner(&_MintGatewayLogicV1.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "pendingOwner")
	return *ret0, err
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) PendingOwner() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.PendingOwner(&_MintGatewayLogicV1.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) PendingOwner() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.PendingOwner(&_MintGatewayLogicV1.CallOpts)
}

// SelectorHash is a free data retrieval call binding the contract method 0x29762976.
//
// Solidity: function selectorHash() view returns(bytes32)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) SelectorHash(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "selectorHash")
	return *ret0, err
}

// SelectorHash is a free data retrieval call binding the contract method 0x29762976.
//
// Solidity: function selectorHash() view returns(bytes32)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) SelectorHash() ([32]byte, error) {
	return _MintGatewayLogicV1.Contract.SelectorHash(&_MintGatewayLogicV1.CallOpts)
}

// SelectorHash is a free data retrieval call binding the contract method 0x29762976.
//
// Solidity: function selectorHash() view returns(bytes32)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) SelectorHash() ([32]byte, error) {
	return _MintGatewayLogicV1.Contract.SelectorHash(&_MintGatewayLogicV1.CallOpts)
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) Status(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "status", arg0)
	return *ret0, err
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) Status(arg0 [32]byte) (bool, error) {
	return _MintGatewayLogicV1.Contract.Status(&_MintGatewayLogicV1.CallOpts, arg0)
}

// Status is a free data retrieval call binding the contract method 0x52ad0d5e.
//
// Solidity: function status(bytes32 ) view returns(bool)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) Status(arg0 [32]byte) (bool, error) {
	return _MintGatewayLogicV1.Contract.Status(&_MintGatewayLogicV1.CallOpts, arg0)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) Token() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.Token(&_MintGatewayLogicV1.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) Token() (common.Address, error) {
	return _MintGatewayLogicV1.Contract.Token(&_MintGatewayLogicV1.CallOpts)
}

// VerifySignature is a free data retrieval call binding the contract method 0xdaca6f78.
//
// Solidity: function verifySignature(bytes32 _signedMessageHash, bytes _sig) view returns(bool)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Caller) VerifySignature(opts *bind.CallOpts, _signedMessageHash [32]byte, _sig []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MintGatewayLogicV1.contract.Call(opts, out, "verifySignature", _signedMessageHash, _sig)
	return *ret0, err
}

// VerifySignature is a free data retrieval call binding the contract method 0xdaca6f78.
//
// Solidity: function verifySignature(bytes32 _signedMessageHash, bytes _sig) view returns(bool)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) VerifySignature(_signedMessageHash [32]byte, _sig []byte) (bool, error) {
	return _MintGatewayLogicV1.Contract.VerifySignature(&_MintGatewayLogicV1.CallOpts, _signedMessageHash, _sig)
}

// VerifySignature is a free data retrieval call binding the contract method 0xdaca6f78.
//
// Solidity: function verifySignature(bytes32 _signedMessageHash, bytes _sig) view returns(bool)
func (_MintGatewayLogicV1 *MintGatewayLogicV1CallerSession) VerifySignature(_signedMessageHash [32]byte, _sig []byte) (bool, error) {
	return _MintGatewayLogicV1.Contract.VerifySignature(&_MintGatewayLogicV1.CallOpts, _signedMessageHash, _sig)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) BlacklistRecoverableToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "blacklistRecoverableToken", _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.BlacklistRecoverableToken(&_MintGatewayLogicV1.TransactOpts, _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.BlacklistRecoverableToken(&_MintGatewayLogicV1.TransactOpts, _token)
}

// Burn is a paid mutator transaction binding the contract method 0x38463cff.
//
// Solidity: function burn(bytes _to, uint256 _amount) returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) Burn(opts *bind.TransactOpts, _to []byte, _amount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "burn", _to, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x38463cff.
//
// Solidity: function burn(bytes _to, uint256 _amount) returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) Burn(_to []byte, _amount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.Burn(&_MintGatewayLogicV1.TransactOpts, _to, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x38463cff.
//
// Solidity: function burn(bytes _to, uint256 _amount) returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) Burn(_to []byte, _amount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.Burn(&_MintGatewayLogicV1.TransactOpts, _to, _amount)
}

// BurnTo is a paid mutator transaction binding the contract method 0x8b665c1f.
//
// Solidity: function burnTo(string _chain, bytes _to, bytes _payload, uint256 _amount) returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) BurnTo(opts *bind.TransactOpts, _chain string, _to []byte, _payload []byte, _amount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "burnTo", _chain, _to, _payload, _amount)
}

// BurnTo is a paid mutator transaction binding the contract method 0x8b665c1f.
//
// Solidity: function burnTo(string _chain, bytes _to, bytes _payload, uint256 _amount) returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) BurnTo(_chain string, _to []byte, _payload []byte, _amount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.BurnTo(&_MintGatewayLogicV1.TransactOpts, _chain, _to, _payload, _amount)
}

// BurnTo is a paid mutator transaction binding the contract method 0x8b665c1f.
//
// Solidity: function burnTo(string _chain, bytes _to, bytes _payload, uint256 _amount) returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) BurnTo(_chain string, _to []byte, _payload []byte, _amount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.BurnTo(&_MintGatewayLogicV1.TransactOpts, _chain, _to, _payload, _amount)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) ClaimOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "claimOwnership")
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) ClaimOwnership() (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.ClaimOwnership(&_MintGatewayLogicV1.TransactOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) ClaimOwnership() (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.ClaimOwnership(&_MintGatewayLogicV1.TransactOpts)
}

// ClaimTokenOwnership is a paid mutator transaction binding the contract method 0x10731a65.
//
// Solidity: function claimTokenOwnership() returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) ClaimTokenOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "claimTokenOwnership")
}

// ClaimTokenOwnership is a paid mutator transaction binding the contract method 0x10731a65.
//
// Solidity: function claimTokenOwnership() returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) ClaimTokenOwnership() (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.ClaimTokenOwnership(&_MintGatewayLogicV1.TransactOpts)
}

// ClaimTokenOwnership is a paid mutator transaction binding the contract method 0x10731a65.
//
// Solidity: function claimTokenOwnership() returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) ClaimTokenOwnership() (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.ClaimTokenOwnership(&_MintGatewayLogicV1.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xa2999beb.
//
// Solidity: function initialize(address _token, address _feeRecipient, address _mintAuthority, uint16 _mintFee, uint16 _burnFee, uint256 _minimumBurnAmount) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) Initialize(opts *bind.TransactOpts, _token common.Address, _feeRecipient common.Address, _mintAuthority common.Address, _mintFee uint16, _burnFee uint16, _minimumBurnAmount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "initialize", _token, _feeRecipient, _mintAuthority, _mintFee, _burnFee, _minimumBurnAmount)
}

// Initialize is a paid mutator transaction binding the contract method 0xa2999beb.
//
// Solidity: function initialize(address _token, address _feeRecipient, address _mintAuthority, uint16 _mintFee, uint16 _burnFee, uint256 _minimumBurnAmount) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) Initialize(_token common.Address, _feeRecipient common.Address, _mintAuthority common.Address, _mintFee uint16, _burnFee uint16, _minimumBurnAmount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.Initialize(&_MintGatewayLogicV1.TransactOpts, _token, _feeRecipient, _mintAuthority, _mintFee, _burnFee, _minimumBurnAmount)
}

// Initialize is a paid mutator transaction binding the contract method 0xa2999beb.
//
// Solidity: function initialize(address _token, address _feeRecipient, address _mintAuthority, uint16 _mintFee, uint16 _burnFee, uint256 _minimumBurnAmount) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) Initialize(_token common.Address, _feeRecipient common.Address, _mintAuthority common.Address, _mintFee uint16, _burnFee uint16, _minimumBurnAmount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.Initialize(&_MintGatewayLogicV1.TransactOpts, _token, _feeRecipient, _mintAuthority, _mintFee, _burnFee, _minimumBurnAmount)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) Initialize0(opts *bind.TransactOpts, _nextOwner common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "initialize0", _nextOwner)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) Initialize0(_nextOwner common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.Initialize0(&_MintGatewayLogicV1.TransactOpts, _nextOwner)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) Initialize0(_nextOwner common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.Initialize0(&_MintGatewayLogicV1.TransactOpts, _nextOwner)
}

// InitializeSelectorHash is a paid mutator transaction binding the contract method 0x29a7c945.
//
// Solidity: function initializeSelectorHash(bytes32 _selectorHash) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) InitializeSelectorHash(opts *bind.TransactOpts, _selectorHash [32]byte) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "initializeSelectorHash", _selectorHash)
}

// InitializeSelectorHash is a paid mutator transaction binding the contract method 0x29a7c945.
//
// Solidity: function initializeSelectorHash(bytes32 _selectorHash) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) InitializeSelectorHash(_selectorHash [32]byte) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.InitializeSelectorHash(&_MintGatewayLogicV1.TransactOpts, _selectorHash)
}

// InitializeSelectorHash is a paid mutator transaction binding the contract method 0x29a7c945.
//
// Solidity: function initializeSelectorHash(bytes32 _selectorHash) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) InitializeSelectorHash(_selectorHash [32]byte) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.InitializeSelectorHash(&_MintGatewayLogicV1.TransactOpts, _selectorHash)
}

// Mint is a paid mutator transaction binding the contract method 0x159ab14d.
//
// Solidity: function mint(bytes32 _pHash, uint256 _amountUnderlying, bytes32 _nHash, bytes _sig) returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) Mint(opts *bind.TransactOpts, _pHash [32]byte, _amountUnderlying *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "mint", _pHash, _amountUnderlying, _nHash, _sig)
}

// Mint is a paid mutator transaction binding the contract method 0x159ab14d.
//
// Solidity: function mint(bytes32 _pHash, uint256 _amountUnderlying, bytes32 _nHash, bytes _sig) returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) Mint(_pHash [32]byte, _amountUnderlying *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.Mint(&_MintGatewayLogicV1.TransactOpts, _pHash, _amountUnderlying, _nHash, _sig)
}

// Mint is a paid mutator transaction binding the contract method 0x159ab14d.
//
// Solidity: function mint(bytes32 _pHash, uint256 _amountUnderlying, bytes32 _nHash, bytes _sig) returns(uint256)
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) Mint(_pHash [32]byte, _amountUnderlying *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.Mint(&_MintGatewayLogicV1.TransactOpts, _pHash, _amountUnderlying, _nHash, _sig)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) RecoverTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "recoverTokens", _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.RecoverTokens(&_MintGatewayLogicV1.TransactOpts, _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.RecoverTokens(&_MintGatewayLogicV1.TransactOpts, _token)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) RenounceOwnership() (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.RenounceOwnership(&_MintGatewayLogicV1.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.RenounceOwnership(&_MintGatewayLogicV1.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.TransferOwnership(&_MintGatewayLogicV1.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.TransferOwnership(&_MintGatewayLogicV1.TransactOpts, newOwner)
}

// TransferTokenOwnership is a paid mutator transaction binding the contract method 0x21e6b53d.
//
// Solidity: function transferTokenOwnership(address _nextTokenOwner) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) TransferTokenOwnership(opts *bind.TransactOpts, _nextTokenOwner common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "transferTokenOwnership", _nextTokenOwner)
}

// TransferTokenOwnership is a paid mutator transaction binding the contract method 0x21e6b53d.
//
// Solidity: function transferTokenOwnership(address _nextTokenOwner) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) TransferTokenOwnership(_nextTokenOwner common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.TransferTokenOwnership(&_MintGatewayLogicV1.TransactOpts, _nextTokenOwner)
}

// TransferTokenOwnership is a paid mutator transaction binding the contract method 0x21e6b53d.
//
// Solidity: function transferTokenOwnership(address _nextTokenOwner) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) TransferTokenOwnership(_nextTokenOwner common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.TransferTokenOwnership(&_MintGatewayLogicV1.TransactOpts, _nextTokenOwner)
}

// UpdateBurnFee is a paid mutator transaction binding the contract method 0x59c9176c.
//
// Solidity: function updateBurnFee(uint16 _nextBurnFee) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) UpdateBurnFee(opts *bind.TransactOpts, _nextBurnFee uint16) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "updateBurnFee", _nextBurnFee)
}

// UpdateBurnFee is a paid mutator transaction binding the contract method 0x59c9176c.
//
// Solidity: function updateBurnFee(uint16 _nextBurnFee) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) UpdateBurnFee(_nextBurnFee uint16) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateBurnFee(&_MintGatewayLogicV1.TransactOpts, _nextBurnFee)
}

// UpdateBurnFee is a paid mutator transaction binding the contract method 0x59c9176c.
//
// Solidity: function updateBurnFee(uint16 _nextBurnFee) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) UpdateBurnFee(_nextBurnFee uint16) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateBurnFee(&_MintGatewayLogicV1.TransactOpts, _nextBurnFee)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0xf160d369.
//
// Solidity: function updateFeeRecipient(address _nextFeeRecipient) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) UpdateFeeRecipient(opts *bind.TransactOpts, _nextFeeRecipient common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "updateFeeRecipient", _nextFeeRecipient)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0xf160d369.
//
// Solidity: function updateFeeRecipient(address _nextFeeRecipient) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) UpdateFeeRecipient(_nextFeeRecipient common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateFeeRecipient(&_MintGatewayLogicV1.TransactOpts, _nextFeeRecipient)
}

// UpdateFeeRecipient is a paid mutator transaction binding the contract method 0xf160d369.
//
// Solidity: function updateFeeRecipient(address _nextFeeRecipient) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) UpdateFeeRecipient(_nextFeeRecipient common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateFeeRecipient(&_MintGatewayLogicV1.TransactOpts, _nextFeeRecipient)
}

// UpdateMinimumBurnAmount is a paid mutator transaction binding the contract method 0x3a521b8d.
//
// Solidity: function updateMinimumBurnAmount(uint256 _minimumBurnAmount) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) UpdateMinimumBurnAmount(opts *bind.TransactOpts, _minimumBurnAmount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "updateMinimumBurnAmount", _minimumBurnAmount)
}

// UpdateMinimumBurnAmount is a paid mutator transaction binding the contract method 0x3a521b8d.
//
// Solidity: function updateMinimumBurnAmount(uint256 _minimumBurnAmount) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) UpdateMinimumBurnAmount(_minimumBurnAmount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateMinimumBurnAmount(&_MintGatewayLogicV1.TransactOpts, _minimumBurnAmount)
}

// UpdateMinimumBurnAmount is a paid mutator transaction binding the contract method 0x3a521b8d.
//
// Solidity: function updateMinimumBurnAmount(uint256 _minimumBurnAmount) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) UpdateMinimumBurnAmount(_minimumBurnAmount *big.Int) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateMinimumBurnAmount(&_MintGatewayLogicV1.TransactOpts, _minimumBurnAmount)
}

// UpdateMintAuthority is a paid mutator transaction binding the contract method 0x0130a33b.
//
// Solidity: function updateMintAuthority(address _nextMintAuthority) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) UpdateMintAuthority(opts *bind.TransactOpts, _nextMintAuthority common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "updateMintAuthority", _nextMintAuthority)
}

// UpdateMintAuthority is a paid mutator transaction binding the contract method 0x0130a33b.
//
// Solidity: function updateMintAuthority(address _nextMintAuthority) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) UpdateMintAuthority(_nextMintAuthority common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateMintAuthority(&_MintGatewayLogicV1.TransactOpts, _nextMintAuthority)
}

// UpdateMintAuthority is a paid mutator transaction binding the contract method 0x0130a33b.
//
// Solidity: function updateMintAuthority(address _nextMintAuthority) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) UpdateMintAuthority(_nextMintAuthority common.Address) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateMintAuthority(&_MintGatewayLogicV1.TransactOpts, _nextMintAuthority)
}

// UpdateMintFee is a paid mutator transaction binding the contract method 0x5cc66106.
//
// Solidity: function updateMintFee(uint16 _nextMintFee) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Transactor) UpdateMintFee(opts *bind.TransactOpts, _nextMintFee uint16) (*types.Transaction, error) {
	return _MintGatewayLogicV1.contract.Transact(opts, "updateMintFee", _nextMintFee)
}

// UpdateMintFee is a paid mutator transaction binding the contract method 0x5cc66106.
//
// Solidity: function updateMintFee(uint16 _nextMintFee) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1Session) UpdateMintFee(_nextMintFee uint16) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateMintFee(&_MintGatewayLogicV1.TransactOpts, _nextMintFee)
}

// UpdateMintFee is a paid mutator transaction binding the contract method 0x5cc66106.
//
// Solidity: function updateMintFee(uint16 _nextMintFee) returns()
func (_MintGatewayLogicV1 *MintGatewayLogicV1TransactorSession) UpdateMintFee(_nextMintFee uint16) (*types.Transaction, error) {
	return _MintGatewayLogicV1.Contract.UpdateMintFee(&_MintGatewayLogicV1.TransactOpts, _nextMintFee)
}

// MintGatewayLogicV1LogBurnIterator is returned from FilterLogBurn and is used to iterate over the raw logs and unpacked data for LogBurn events raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1LogBurnIterator struct {
	Event *MintGatewayLogicV1LogBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintGatewayLogicV1LogBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintGatewayLogicV1LogBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintGatewayLogicV1LogBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintGatewayLogicV1LogBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintGatewayLogicV1LogBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintGatewayLogicV1LogBurn represents a LogBurn event raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1LogBurn struct {
	To        []byte
	Amount    *big.Int
	N         *big.Int
	IndexedTo common.Hash
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogBurn is a free log retrieval operation binding the contract event 0x1619fc95050ffb8c94c9077c82b3e1ebbf8d571b6234241c55ba0aaf40da019e.
//
// Solidity: event LogBurn(bytes _to, uint256 _amount, uint256 indexed _n, bytes indexed _indexedTo)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) FilterLogBurn(opts *bind.FilterOpts, _n []*big.Int, _indexedTo [][]byte) (*MintGatewayLogicV1LogBurnIterator, error) {

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _indexedToRule []interface{}
	for _, _indexedToItem := range _indexedTo {
		_indexedToRule = append(_indexedToRule, _indexedToItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.FilterLogs(opts, "LogBurn", _nRule, _indexedToRule)
	if err != nil {
		return nil, err
	}
	return &MintGatewayLogicV1LogBurnIterator{contract: _MintGatewayLogicV1.contract, event: "LogBurn", logs: logs, sub: sub}, nil
}

// WatchLogBurn is a free log subscription operation binding the contract event 0x1619fc95050ffb8c94c9077c82b3e1ebbf8d571b6234241c55ba0aaf40da019e.
//
// Solidity: event LogBurn(bytes _to, uint256 _amount, uint256 indexed _n, bytes indexed _indexedTo)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) WatchLogBurn(opts *bind.WatchOpts, sink chan<- *MintGatewayLogicV1LogBurn, _n []*big.Int, _indexedTo [][]byte) (event.Subscription, error) {

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _indexedToRule []interface{}
	for _, _indexedToItem := range _indexedTo {
		_indexedToRule = append(_indexedToRule, _indexedToItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.WatchLogs(opts, "LogBurn", _nRule, _indexedToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintGatewayLogicV1LogBurn)
				if err := _MintGatewayLogicV1.contract.UnpackLog(event, "LogBurn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBurn is a log parse operation binding the contract event 0x1619fc95050ffb8c94c9077c82b3e1ebbf8d571b6234241c55ba0aaf40da019e.
//
// Solidity: event LogBurn(bytes _to, uint256 _amount, uint256 indexed _n, bytes indexed _indexedTo)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) ParseLogBurn(log types.Log) (*MintGatewayLogicV1LogBurn, error) {
	event := new(MintGatewayLogicV1LogBurn)
	if err := _MintGatewayLogicV1.contract.UnpackLog(event, "LogBurn", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MintGatewayLogicV1LogBurnToIterator is returned from FilterLogBurnTo and is used to iterate over the raw logs and unpacked data for LogBurnTo events raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1LogBurnToIterator struct {
	Event *MintGatewayLogicV1LogBurnTo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintGatewayLogicV1LogBurnToIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintGatewayLogicV1LogBurnTo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintGatewayLogicV1LogBurnTo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintGatewayLogicV1LogBurnToIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintGatewayLogicV1LogBurnToIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintGatewayLogicV1LogBurnTo represents a LogBurnTo event raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1LogBurnTo struct {
	Chain     string
	To        []byte
	Payload   []byte
	Amount    *big.Int
	N         *big.Int
	IndexedTo common.Hash
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogBurnTo is a free log retrieval operation binding the contract event 0xde5995066860dde5b67236b0ea9b6554d7e29eca39a07f77040348c5e32585be.
//
// Solidity: event LogBurnTo(string _chain, bytes _to, bytes _payload, uint256 _amount, uint256 indexed _n, bytes indexed _indexedTo)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) FilterLogBurnTo(opts *bind.FilterOpts, _n []*big.Int, _indexedTo [][]byte) (*MintGatewayLogicV1LogBurnToIterator, error) {

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _indexedToRule []interface{}
	for _, _indexedToItem := range _indexedTo {
		_indexedToRule = append(_indexedToRule, _indexedToItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.FilterLogs(opts, "LogBurnTo", _nRule, _indexedToRule)
	if err != nil {
		return nil, err
	}
	return &MintGatewayLogicV1LogBurnToIterator{contract: _MintGatewayLogicV1.contract, event: "LogBurnTo", logs: logs, sub: sub}, nil
}

// WatchLogBurnTo is a free log subscription operation binding the contract event 0xde5995066860dde5b67236b0ea9b6554d7e29eca39a07f77040348c5e32585be.
//
// Solidity: event LogBurnTo(string _chain, bytes _to, bytes _payload, uint256 _amount, uint256 indexed _n, bytes indexed _indexedTo)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) WatchLogBurnTo(opts *bind.WatchOpts, sink chan<- *MintGatewayLogicV1LogBurnTo, _n []*big.Int, _indexedTo [][]byte) (event.Subscription, error) {

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _indexedToRule []interface{}
	for _, _indexedToItem := range _indexedTo {
		_indexedToRule = append(_indexedToRule, _indexedToItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.WatchLogs(opts, "LogBurnTo", _nRule, _indexedToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintGatewayLogicV1LogBurnTo)
				if err := _MintGatewayLogicV1.contract.UnpackLog(event, "LogBurnTo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBurnTo is a log parse operation binding the contract event 0xde5995066860dde5b67236b0ea9b6554d7e29eca39a07f77040348c5e32585be.
//
// Solidity: event LogBurnTo(string _chain, bytes _to, bytes _payload, uint256 _amount, uint256 indexed _n, bytes indexed _indexedTo)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) ParseLogBurnTo(log types.Log) (*MintGatewayLogicV1LogBurnTo, error) {
	event := new(MintGatewayLogicV1LogBurnTo)
	if err := _MintGatewayLogicV1.contract.UnpackLog(event, "LogBurnTo", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MintGatewayLogicV1LogMintIterator is returned from FilterLogMint and is used to iterate over the raw logs and unpacked data for LogMint events raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1LogMintIterator struct {
	Event *MintGatewayLogicV1LogMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintGatewayLogicV1LogMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintGatewayLogicV1LogMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintGatewayLogicV1LogMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintGatewayLogicV1LogMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintGatewayLogicV1LogMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintGatewayLogicV1LogMint represents a LogMint event raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1LogMint struct {
	To                common.Address
	Amount            *big.Int
	N                 *big.Int
	SignedMessageHash [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterLogMint is a free log retrieval operation binding the contract event 0xa58ba939eb08dab7eaf8ad09c16e7405ee88e5153e15da62d5481296a9f727fa.
//
// Solidity: event LogMint(address indexed _to, uint256 _amount, uint256 indexed _n, bytes32 indexed _signedMessageHash)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) FilterLogMint(opts *bind.FilterOpts, _to []common.Address, _n []*big.Int, _signedMessageHash [][32]byte) (*MintGatewayLogicV1LogMintIterator, error) {

	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _signedMessageHashRule []interface{}
	for _, _signedMessageHashItem := range _signedMessageHash {
		_signedMessageHashRule = append(_signedMessageHashRule, _signedMessageHashItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.FilterLogs(opts, "LogMint", _toRule, _nRule, _signedMessageHashRule)
	if err != nil {
		return nil, err
	}
	return &MintGatewayLogicV1LogMintIterator{contract: _MintGatewayLogicV1.contract, event: "LogMint", logs: logs, sub: sub}, nil
}

// WatchLogMint is a free log subscription operation binding the contract event 0xa58ba939eb08dab7eaf8ad09c16e7405ee88e5153e15da62d5481296a9f727fa.
//
// Solidity: event LogMint(address indexed _to, uint256 _amount, uint256 indexed _n, bytes32 indexed _signedMessageHash)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) WatchLogMint(opts *bind.WatchOpts, sink chan<- *MintGatewayLogicV1LogMint, _to []common.Address, _n []*big.Int, _signedMessageHash [][32]byte) (event.Subscription, error) {

	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	var _nRule []interface{}
	for _, _nItem := range _n {
		_nRule = append(_nRule, _nItem)
	}
	var _signedMessageHashRule []interface{}
	for _, _signedMessageHashItem := range _signedMessageHash {
		_signedMessageHashRule = append(_signedMessageHashRule, _signedMessageHashItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.WatchLogs(opts, "LogMint", _toRule, _nRule, _signedMessageHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintGatewayLogicV1LogMint)
				if err := _MintGatewayLogicV1.contract.UnpackLog(event, "LogMint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogMint is a log parse operation binding the contract event 0xa58ba939eb08dab7eaf8ad09c16e7405ee88e5153e15da62d5481296a9f727fa.
//
// Solidity: event LogMint(address indexed _to, uint256 _amount, uint256 indexed _n, bytes32 indexed _signedMessageHash)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) ParseLogMint(log types.Log) (*MintGatewayLogicV1LogMint, error) {
	event := new(MintGatewayLogicV1LogMint)
	if err := _MintGatewayLogicV1.contract.UnpackLog(event, "LogMint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MintGatewayLogicV1LogMintAuthorityUpdatedIterator is returned from FilterLogMintAuthorityUpdated and is used to iterate over the raw logs and unpacked data for LogMintAuthorityUpdated events raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1LogMintAuthorityUpdatedIterator struct {
	Event *MintGatewayLogicV1LogMintAuthorityUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintGatewayLogicV1LogMintAuthorityUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintGatewayLogicV1LogMintAuthorityUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintGatewayLogicV1LogMintAuthorityUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintGatewayLogicV1LogMintAuthorityUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintGatewayLogicV1LogMintAuthorityUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintGatewayLogicV1LogMintAuthorityUpdated represents a LogMintAuthorityUpdated event raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1LogMintAuthorityUpdated struct {
	NewMintAuthority common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterLogMintAuthorityUpdated is a free log retrieval operation binding the contract event 0xf0f08e606c1dd3a2c220ada53422fd9fe0aa75614b27db0549f649de3ad2072a.
//
// Solidity: event LogMintAuthorityUpdated(address indexed _newMintAuthority)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) FilterLogMintAuthorityUpdated(opts *bind.FilterOpts, _newMintAuthority []common.Address) (*MintGatewayLogicV1LogMintAuthorityUpdatedIterator, error) {

	var _newMintAuthorityRule []interface{}
	for _, _newMintAuthorityItem := range _newMintAuthority {
		_newMintAuthorityRule = append(_newMintAuthorityRule, _newMintAuthorityItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.FilterLogs(opts, "LogMintAuthorityUpdated", _newMintAuthorityRule)
	if err != nil {
		return nil, err
	}
	return &MintGatewayLogicV1LogMintAuthorityUpdatedIterator{contract: _MintGatewayLogicV1.contract, event: "LogMintAuthorityUpdated", logs: logs, sub: sub}, nil
}

// WatchLogMintAuthorityUpdated is a free log subscription operation binding the contract event 0xf0f08e606c1dd3a2c220ada53422fd9fe0aa75614b27db0549f649de3ad2072a.
//
// Solidity: event LogMintAuthorityUpdated(address indexed _newMintAuthority)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) WatchLogMintAuthorityUpdated(opts *bind.WatchOpts, sink chan<- *MintGatewayLogicV1LogMintAuthorityUpdated, _newMintAuthority []common.Address) (event.Subscription, error) {

	var _newMintAuthorityRule []interface{}
	for _, _newMintAuthorityItem := range _newMintAuthority {
		_newMintAuthorityRule = append(_newMintAuthorityRule, _newMintAuthorityItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.WatchLogs(opts, "LogMintAuthorityUpdated", _newMintAuthorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintGatewayLogicV1LogMintAuthorityUpdated)
				if err := _MintGatewayLogicV1.contract.UnpackLog(event, "LogMintAuthorityUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogMintAuthorityUpdated is a log parse operation binding the contract event 0xf0f08e606c1dd3a2c220ada53422fd9fe0aa75614b27db0549f649de3ad2072a.
//
// Solidity: event LogMintAuthorityUpdated(address indexed _newMintAuthority)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) ParseLogMintAuthorityUpdated(log types.Log) (*MintGatewayLogicV1LogMintAuthorityUpdated, error) {
	event := new(MintGatewayLogicV1LogMintAuthorityUpdated)
	if err := _MintGatewayLogicV1.contract.UnpackLog(event, "LogMintAuthorityUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MintGatewayLogicV1OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1OwnershipTransferredIterator struct {
	Event *MintGatewayLogicV1OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintGatewayLogicV1OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintGatewayLogicV1OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintGatewayLogicV1OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintGatewayLogicV1OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintGatewayLogicV1OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintGatewayLogicV1OwnershipTransferred represents a OwnershipTransferred event raised by the MintGatewayLogicV1 contract.
type MintGatewayLogicV1OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MintGatewayLogicV1OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MintGatewayLogicV1OwnershipTransferredIterator{contract: _MintGatewayLogicV1.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MintGatewayLogicV1OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MintGatewayLogicV1.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintGatewayLogicV1OwnershipTransferred)
				if err := _MintGatewayLogicV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MintGatewayLogicV1 *MintGatewayLogicV1Filterer) ParseOwnershipTransferred(log types.Log) (*MintGatewayLogicV1OwnershipTransferred, error) {
	event := new(MintGatewayLogicV1OwnershipTransferred)
	if err := _MintGatewayLogicV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MintGatewayProxyABI is the input ABI used to generate the binding from.
const MintGatewayProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// MintGatewayProxyBin is the compiled bytecode used for deploying new contracts.
var MintGatewayProxyBin = "0x608060405234801561001057600080fd5b5061097c806100206000396000f3fe6080604052600436106100705760003560e01c80638f2839701161004e5780638f2839701461015e578063cf7a1d7714610191578063d1f5789414610250578063f851a4401461030657610070565b80633659cfe61461007a5780634f1ef286146100ad5780635c60da1b1461012d575b61007861031b565b005b34801561008657600080fd5b506100786004803603602081101561009d57600080fd5b50356001600160a01b0316610335565b610078600480360360408110156100c357600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100ee57600080fd5b82018360208201111561010057600080fd5b8035906020019184600183028401116401000000008311171561012257600080fd5b50909250905061036f565b34801561013957600080fd5b5061014261041c565b604080516001600160a01b039092168252519081900360200190f35b34801561016a57600080fd5b506100786004803603602081101561018157600080fd5b50356001600160a01b0316610459565b610078600480360360608110156101a757600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156101db57600080fd5b8201836020820111156101ed57600080fd5b8035906020019184600183028401116401000000008311171561020f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610513945050505050565b6100786004803603604081101561026657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561029157600080fd5b8201836020820111156102a357600080fd5b803590602001918460018302840111640100000000831117156102c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610599945050505050565b34801561031257600080fd5b506101426106d9565b610323610704565b61033361032e610764565b610789565b565b61033d6107ad565b6001600160a01b0316336001600160a01b031614156103645761035f816107d2565b61036c565b61036c61031b565b50565b6103776107ad565b6001600160a01b0316336001600160a01b0316141561040f57610399836107d2565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d80600081146103f6576040519150601f19603f3d011682016040523d82523d6000602084013e6103fb565b606091505b505090508061040957600080fd5b50610417565b61041761031b565b505050565b60006104266107ad565b6001600160a01b0316336001600160a01b0316141561044e57610447610764565b9050610456565b61045661031b565b90565b6104616107ad565b6001600160a01b0316336001600160a01b03161415610364576001600160a01b0381166104bf5760405162461bcd60e51b81526004018080602001828103825260368152602001806108d76036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104e86107ad565b604080516001600160a01b03928316815291841660208301528051918290030190a161035f81610812565b600061051d610764565b6001600160a01b03161461053057600080fd5b61053a8382610599565b604080517232b4b8189c9b1b97383937bc3c9730b236b4b760691b815290519081900360130190207fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036000199091011461059057fe5b61041782610812565b60006105a3610764565b6001600160a01b0316146105b657600080fd5b604080517f656970313936372e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c0190207f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6000199091011461061657fe5b61061f82610836565b8051156106d5576000826001600160a01b0316826040518082805190602001908083835b602083106106625780518252601f199092019160209182019101610643565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146106c2576040519150601f19603f3d011682016040523d82523d6000602084013e6106c7565b606091505b505090508061041757600080fd5b5050565b60006106e36107ad565b6001600160a01b0316336001600160a01b0316141561044e576104476107ad565b61070c6107ad565b6001600160a01b0316336001600160a01b0316141561075c5760405162461bcd60e51b81526004018080602001828103825260328152602001806108a56032913960400191505060405180910390fd5b610333610333565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156107a8573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6107db81610836565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b61083f8161089e565b61087a5760405162461bcd60e51b815260040180806020018281038252603b81526020018061090d603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b15159056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a265627a7a7231582099b55259a830ccad1fd404c1aac8e4271cf750b45119687e30dc1c260d6ffdf464736f6c63430005100032"

// DeployMintGatewayProxy deploys a new Ethereum contract, binding an instance of MintGatewayProxy to it.
func DeployMintGatewayProxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MintGatewayProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(MintGatewayProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MintGatewayProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MintGatewayProxy{MintGatewayProxyCaller: MintGatewayProxyCaller{contract: contract}, MintGatewayProxyTransactor: MintGatewayProxyTransactor{contract: contract}, MintGatewayProxyFilterer: MintGatewayProxyFilterer{contract: contract}}, nil
}

// MintGatewayProxy is an auto generated Go binding around an Ethereum contract.
type MintGatewayProxy struct {
	MintGatewayProxyCaller     // Read-only binding to the contract
	MintGatewayProxyTransactor // Write-only binding to the contract
	MintGatewayProxyFilterer   // Log filterer for contract events
}

// MintGatewayProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type MintGatewayProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintGatewayProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MintGatewayProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintGatewayProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MintGatewayProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintGatewayProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MintGatewayProxySession struct {
	Contract     *MintGatewayProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MintGatewayProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MintGatewayProxyCallerSession struct {
	Contract *MintGatewayProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// MintGatewayProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MintGatewayProxyTransactorSession struct {
	Contract     *MintGatewayProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// MintGatewayProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type MintGatewayProxyRaw struct {
	Contract *MintGatewayProxy // Generic contract binding to access the raw methods on
}

// MintGatewayProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MintGatewayProxyCallerRaw struct {
	Contract *MintGatewayProxyCaller // Generic read-only contract binding to access the raw methods on
}

// MintGatewayProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MintGatewayProxyTransactorRaw struct {
	Contract *MintGatewayProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMintGatewayProxy creates a new instance of MintGatewayProxy, bound to a specific deployed contract.
func NewMintGatewayProxy(address common.Address, backend bind.ContractBackend) (*MintGatewayProxy, error) {
	contract, err := bindMintGatewayProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MintGatewayProxy{MintGatewayProxyCaller: MintGatewayProxyCaller{contract: contract}, MintGatewayProxyTransactor: MintGatewayProxyTransactor{contract: contract}, MintGatewayProxyFilterer: MintGatewayProxyFilterer{contract: contract}}, nil
}

// NewMintGatewayProxyCaller creates a new read-only instance of MintGatewayProxy, bound to a specific deployed contract.
func NewMintGatewayProxyCaller(address common.Address, caller bind.ContractCaller) (*MintGatewayProxyCaller, error) {
	contract, err := bindMintGatewayProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MintGatewayProxyCaller{contract: contract}, nil
}

// NewMintGatewayProxyTransactor creates a new write-only instance of MintGatewayProxy, bound to a specific deployed contract.
func NewMintGatewayProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*MintGatewayProxyTransactor, error) {
	contract, err := bindMintGatewayProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MintGatewayProxyTransactor{contract: contract}, nil
}

// NewMintGatewayProxyFilterer creates a new log filterer instance of MintGatewayProxy, bound to a specific deployed contract.
func NewMintGatewayProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*MintGatewayProxyFilterer, error) {
	contract, err := bindMintGatewayProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MintGatewayProxyFilterer{contract: contract}, nil
}

// bindMintGatewayProxy binds a generic wrapper to an already deployed contract.
func bindMintGatewayProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MintGatewayProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintGatewayProxy *MintGatewayProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MintGatewayProxy.Contract.MintGatewayProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintGatewayProxy *MintGatewayProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.MintGatewayProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintGatewayProxy *MintGatewayProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.MintGatewayProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintGatewayProxy *MintGatewayProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MintGatewayProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintGatewayProxy *MintGatewayProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintGatewayProxy *MintGatewayProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_MintGatewayProxy *MintGatewayProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintGatewayProxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_MintGatewayProxy *MintGatewayProxySession) Admin() (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Admin(&_MintGatewayProxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_MintGatewayProxy *MintGatewayProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Admin(&_MintGatewayProxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_MintGatewayProxy *MintGatewayProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _MintGatewayProxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_MintGatewayProxy *MintGatewayProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.ChangeAdmin(&_MintGatewayProxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_MintGatewayProxy *MintGatewayProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.ChangeAdmin(&_MintGatewayProxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_MintGatewayProxy *MintGatewayProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintGatewayProxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_MintGatewayProxy *MintGatewayProxySession) Implementation() (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Implementation(&_MintGatewayProxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_MintGatewayProxy *MintGatewayProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Implementation(&_MintGatewayProxy.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_MintGatewayProxy *MintGatewayProxyTransactor) Initialize(opts *bind.TransactOpts, _logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.contract.Transact(opts, "initialize", _logic, _admin, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_MintGatewayProxy *MintGatewayProxySession) Initialize(_logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Initialize(&_MintGatewayProxy.TransactOpts, _logic, _admin, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_MintGatewayProxy *MintGatewayProxyTransactorSession) Initialize(_logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Initialize(&_MintGatewayProxy.TransactOpts, _logic, _admin, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_MintGatewayProxy *MintGatewayProxyTransactor) Initialize0(opts *bind.TransactOpts, _logic common.Address, _data []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.contract.Transact(opts, "initialize0", _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_MintGatewayProxy *MintGatewayProxySession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Initialize0(&_MintGatewayProxy.TransactOpts, _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_MintGatewayProxy *MintGatewayProxyTransactorSession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Initialize0(&_MintGatewayProxy.TransactOpts, _logic, _data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_MintGatewayProxy *MintGatewayProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _MintGatewayProxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_MintGatewayProxy *MintGatewayProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.UpgradeTo(&_MintGatewayProxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_MintGatewayProxy *MintGatewayProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.UpgradeTo(&_MintGatewayProxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_MintGatewayProxy *MintGatewayProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_MintGatewayProxy *MintGatewayProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.UpgradeToAndCall(&_MintGatewayProxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_MintGatewayProxy *MintGatewayProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.UpgradeToAndCall(&_MintGatewayProxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MintGatewayProxy *MintGatewayProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MintGatewayProxy *MintGatewayProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Fallback(&_MintGatewayProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MintGatewayProxy *MintGatewayProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _MintGatewayProxy.Contract.Fallback(&_MintGatewayProxy.TransactOpts, calldata)
}

// MintGatewayProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the MintGatewayProxy contract.
type MintGatewayProxyAdminChangedIterator struct {
	Event *MintGatewayProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintGatewayProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintGatewayProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintGatewayProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintGatewayProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintGatewayProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintGatewayProxyAdminChanged represents a AdminChanged event raised by the MintGatewayProxy contract.
type MintGatewayProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_MintGatewayProxy *MintGatewayProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*MintGatewayProxyAdminChangedIterator, error) {

	logs, sub, err := _MintGatewayProxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &MintGatewayProxyAdminChangedIterator{contract: _MintGatewayProxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_MintGatewayProxy *MintGatewayProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *MintGatewayProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _MintGatewayProxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintGatewayProxyAdminChanged)
				if err := _MintGatewayProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_MintGatewayProxy *MintGatewayProxyFilterer) ParseAdminChanged(log types.Log) (*MintGatewayProxyAdminChanged, error) {
	event := new(MintGatewayProxyAdminChanged)
	if err := _MintGatewayProxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MintGatewayProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the MintGatewayProxy contract.
type MintGatewayProxyUpgradedIterator struct {
	Event *MintGatewayProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintGatewayProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintGatewayProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintGatewayProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintGatewayProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintGatewayProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintGatewayProxyUpgraded represents a Upgraded event raised by the MintGatewayProxy contract.
type MintGatewayProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_MintGatewayProxy *MintGatewayProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*MintGatewayProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _MintGatewayProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &MintGatewayProxyUpgradedIterator{contract: _MintGatewayProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_MintGatewayProxy *MintGatewayProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *MintGatewayProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _MintGatewayProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintGatewayProxyUpgraded)
				if err := _MintGatewayProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_MintGatewayProxy *MintGatewayProxyFilterer) ParseUpgraded(log types.Log) (*MintGatewayProxyUpgraded, error) {
	event := new(MintGatewayProxyUpgraded)
	if err := _MintGatewayProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MinterRoleABI is the input ABI used to generate the binding from.
const MinterRoleABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MinterRoleBin is the compiled bytecode used for deploying new contracts.
var MinterRoleBin = "0x60806040526104db806100136000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063983b2d56146100515780639865027514610079578063aa271e1a14610081578063c4d66de8146100bb575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100e1565b005b610077610138565b6100a76004803603602081101561009757600080fd5b50356001600160a01b031661014a565b604080519115158252519081900360200190f35b610077600480360360208110156100d157600080fd5b50356001600160a01b0316610163565b6100f16100ec61021c565b61014a565b61012c5760405162461bcd60e51b81526004018080602001828103825260308152602001806104066030913960400191505060405180910390fd5b61013581610220565b50565b61014861014361021c565b610268565b565b600061015d60338363ffffffff6102b016565b92915050565b600054610100900460ff168061017c575061017c610317565b8061018a575060005460ff16155b6101c55760405162461bcd60e51b815260040180806020018281038252602e815260200180610479602e913960400191505060405180910390fd5b600054610100900460ff161580156101f0576000805460ff1961ff0019909116610100171660011790555b6101f98261014a565b6102065761020682610220565b8015610218576000805461ff00191690555b5050565b3390565b61023160338263ffffffff61031d16565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61027960338263ffffffff61039e16565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60006001600160a01b0382166102f75760405162461bcd60e51b81526004018080602001828103825260228152602001806104576022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b303b1590565b61032782826102b0565b15610379576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6103a882826102b0565b6103e35760405162461bcd60e51b81526004018080602001828103825260218152602001806104366021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff1916905556fe4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820d4609aa7653ea4da1cb04ca40b91d11dd4fc6ef8a086d88373bf2f023694b81264736f6c63430005100032"

// DeployMinterRole deploys a new Ethereum contract, binding an instance of MinterRole to it.
func DeployMinterRole(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MinterRole, error) {
	parsed, err := abi.JSON(strings.NewReader(MinterRoleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MinterRoleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MinterRole{MinterRoleCaller: MinterRoleCaller{contract: contract}, MinterRoleTransactor: MinterRoleTransactor{contract: contract}, MinterRoleFilterer: MinterRoleFilterer{contract: contract}}, nil
}

// MinterRole is an auto generated Go binding around an Ethereum contract.
type MinterRole struct {
	MinterRoleCaller     // Read-only binding to the contract
	MinterRoleTransactor // Write-only binding to the contract
	MinterRoleFilterer   // Log filterer for contract events
}

// MinterRoleCaller is an auto generated read-only Go binding around an Ethereum contract.
type MinterRoleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MinterRoleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MinterRoleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MinterRoleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MinterRoleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MinterRoleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MinterRoleSession struct {
	Contract     *MinterRole       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MinterRoleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MinterRoleCallerSession struct {
	Contract *MinterRoleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MinterRoleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MinterRoleTransactorSession struct {
	Contract     *MinterRoleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MinterRoleRaw is an auto generated low-level Go binding around an Ethereum contract.
type MinterRoleRaw struct {
	Contract *MinterRole // Generic contract binding to access the raw methods on
}

// MinterRoleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MinterRoleCallerRaw struct {
	Contract *MinterRoleCaller // Generic read-only contract binding to access the raw methods on
}

// MinterRoleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MinterRoleTransactorRaw struct {
	Contract *MinterRoleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMinterRole creates a new instance of MinterRole, bound to a specific deployed contract.
func NewMinterRole(address common.Address, backend bind.ContractBackend) (*MinterRole, error) {
	contract, err := bindMinterRole(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MinterRole{MinterRoleCaller: MinterRoleCaller{contract: contract}, MinterRoleTransactor: MinterRoleTransactor{contract: contract}, MinterRoleFilterer: MinterRoleFilterer{contract: contract}}, nil
}

// NewMinterRoleCaller creates a new read-only instance of MinterRole, bound to a specific deployed contract.
func NewMinterRoleCaller(address common.Address, caller bind.ContractCaller) (*MinterRoleCaller, error) {
	contract, err := bindMinterRole(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MinterRoleCaller{contract: contract}, nil
}

// NewMinterRoleTransactor creates a new write-only instance of MinterRole, bound to a specific deployed contract.
func NewMinterRoleTransactor(address common.Address, transactor bind.ContractTransactor) (*MinterRoleTransactor, error) {
	contract, err := bindMinterRole(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MinterRoleTransactor{contract: contract}, nil
}

// NewMinterRoleFilterer creates a new log filterer instance of MinterRole, bound to a specific deployed contract.
func NewMinterRoleFilterer(address common.Address, filterer bind.ContractFilterer) (*MinterRoleFilterer, error) {
	contract, err := bindMinterRole(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MinterRoleFilterer{contract: contract}, nil
}

// bindMinterRole binds a generic wrapper to an already deployed contract.
func bindMinterRole(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MinterRoleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MinterRole *MinterRoleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MinterRole.Contract.MinterRoleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MinterRole *MinterRoleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MinterRole.Contract.MinterRoleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MinterRole *MinterRoleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MinterRole.Contract.MinterRoleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MinterRole *MinterRoleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MinterRole.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MinterRole *MinterRoleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MinterRole.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MinterRole *MinterRoleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MinterRole.Contract.contract.Transact(opts, method, params...)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_MinterRole *MinterRoleCaller) IsMinter(opts *bind.CallOpts, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MinterRole.contract.Call(opts, out, "isMinter", account)
	return *ret0, err
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_MinterRole *MinterRoleSession) IsMinter(account common.Address) (bool, error) {
	return _MinterRole.Contract.IsMinter(&_MinterRole.CallOpts, account)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_MinterRole *MinterRoleCallerSession) IsMinter(account common.Address) (bool, error) {
	return _MinterRole.Contract.IsMinter(&_MinterRole.CallOpts, account)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_MinterRole *MinterRoleTransactor) AddMinter(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _MinterRole.contract.Transact(opts, "addMinter", account)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_MinterRole *MinterRoleSession) AddMinter(account common.Address) (*types.Transaction, error) {
	return _MinterRole.Contract.AddMinter(&_MinterRole.TransactOpts, account)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_MinterRole *MinterRoleTransactorSession) AddMinter(account common.Address) (*types.Transaction, error) {
	return _MinterRole.Contract.AddMinter(&_MinterRole.TransactOpts, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_MinterRole *MinterRoleTransactor) Initialize(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _MinterRole.contract.Transact(opts, "initialize", sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_MinterRole *MinterRoleSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _MinterRole.Contract.Initialize(&_MinterRole.TransactOpts, sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_MinterRole *MinterRoleTransactorSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _MinterRole.Contract.Initialize(&_MinterRole.TransactOpts, sender)
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_MinterRole *MinterRoleTransactor) RenounceMinter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MinterRole.contract.Transact(opts, "renounceMinter")
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_MinterRole *MinterRoleSession) RenounceMinter() (*types.Transaction, error) {
	return _MinterRole.Contract.RenounceMinter(&_MinterRole.TransactOpts)
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_MinterRole *MinterRoleTransactorSession) RenounceMinter() (*types.Transaction, error) {
	return _MinterRole.Contract.RenounceMinter(&_MinterRole.TransactOpts)
}

// MinterRoleMinterAddedIterator is returned from FilterMinterAdded and is used to iterate over the raw logs and unpacked data for MinterAdded events raised by the MinterRole contract.
type MinterRoleMinterAddedIterator struct {
	Event *MinterRoleMinterAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MinterRoleMinterAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MinterRoleMinterAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MinterRoleMinterAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MinterRoleMinterAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MinterRoleMinterAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MinterRoleMinterAdded represents a MinterAdded event raised by the MinterRole contract.
type MinterRoleMinterAdded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinterAdded is a free log retrieval operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_MinterRole *MinterRoleFilterer) FilterMinterAdded(opts *bind.FilterOpts, account []common.Address) (*MinterRoleMinterAddedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _MinterRole.contract.FilterLogs(opts, "MinterAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return &MinterRoleMinterAddedIterator{contract: _MinterRole.contract, event: "MinterAdded", logs: logs, sub: sub}, nil
}

// WatchMinterAdded is a free log subscription operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_MinterRole *MinterRoleFilterer) WatchMinterAdded(opts *bind.WatchOpts, sink chan<- *MinterRoleMinterAdded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _MinterRole.contract.WatchLogs(opts, "MinterAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MinterRoleMinterAdded)
				if err := _MinterRole.contract.UnpackLog(event, "MinterAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterAdded is a log parse operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_MinterRole *MinterRoleFilterer) ParseMinterAdded(log types.Log) (*MinterRoleMinterAdded, error) {
	event := new(MinterRoleMinterAdded)
	if err := _MinterRole.contract.UnpackLog(event, "MinterAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MinterRoleMinterRemovedIterator is returned from FilterMinterRemoved and is used to iterate over the raw logs and unpacked data for MinterRemoved events raised by the MinterRole contract.
type MinterRoleMinterRemovedIterator struct {
	Event *MinterRoleMinterRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MinterRoleMinterRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MinterRoleMinterRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MinterRoleMinterRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MinterRoleMinterRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MinterRoleMinterRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MinterRoleMinterRemoved represents a MinterRemoved event raised by the MinterRole contract.
type MinterRoleMinterRemoved struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinterRemoved is a free log retrieval operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_MinterRole *MinterRoleFilterer) FilterMinterRemoved(opts *bind.FilterOpts, account []common.Address) (*MinterRoleMinterRemovedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _MinterRole.contract.FilterLogs(opts, "MinterRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return &MinterRoleMinterRemovedIterator{contract: _MinterRole.contract, event: "MinterRemoved", logs: logs, sub: sub}, nil
}

// WatchMinterRemoved is a free log subscription operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_MinterRole *MinterRoleFilterer) WatchMinterRemoved(opts *bind.WatchOpts, sink chan<- *MinterRoleMinterRemoved, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _MinterRole.contract.WatchLogs(opts, "MinterRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MinterRoleMinterRemoved)
				if err := _MinterRole.contract.UnpackLog(event, "MinterRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterRemoved is a log parse operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_MinterRole *MinterRoleFilterer) ParseMinterRemoved(log types.Log) (*MinterRoleMinterRemoved, error) {
	event := new(MinterRoleMinterRemoved)
	if err := _MinterRole.contract.UnpackLog(event, "MinterRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OpenZeppelinUpgradesAddressABI is the input ABI used to generate the binding from.
const OpenZeppelinUpgradesAddressABI = "[]"

// OpenZeppelinUpgradesAddressBin is the compiled bytecode used for deploying new contracts.
var OpenZeppelinUpgradesAddressBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820dd2eb08d838e2a3df9e8c1d7e8f55b86a7fd54a002adca49839e26886c56e5d264736f6c63430005100032"

// DeployOpenZeppelinUpgradesAddress deploys a new Ethereum contract, binding an instance of OpenZeppelinUpgradesAddress to it.
func DeployOpenZeppelinUpgradesAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OpenZeppelinUpgradesAddress, error) {
	parsed, err := abi.JSON(strings.NewReader(OpenZeppelinUpgradesAddressABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OpenZeppelinUpgradesAddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OpenZeppelinUpgradesAddress{OpenZeppelinUpgradesAddressCaller: OpenZeppelinUpgradesAddressCaller{contract: contract}, OpenZeppelinUpgradesAddressTransactor: OpenZeppelinUpgradesAddressTransactor{contract: contract}, OpenZeppelinUpgradesAddressFilterer: OpenZeppelinUpgradesAddressFilterer{contract: contract}}, nil
}

// OpenZeppelinUpgradesAddress is an auto generated Go binding around an Ethereum contract.
type OpenZeppelinUpgradesAddress struct {
	OpenZeppelinUpgradesAddressCaller     // Read-only binding to the contract
	OpenZeppelinUpgradesAddressTransactor // Write-only binding to the contract
	OpenZeppelinUpgradesAddressFilterer   // Log filterer for contract events
}

// OpenZeppelinUpgradesAddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type OpenZeppelinUpgradesAddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OpenZeppelinUpgradesAddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OpenZeppelinUpgradesAddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OpenZeppelinUpgradesAddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OpenZeppelinUpgradesAddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OpenZeppelinUpgradesAddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OpenZeppelinUpgradesAddressSession struct {
	Contract     *OpenZeppelinUpgradesAddress // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// OpenZeppelinUpgradesAddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OpenZeppelinUpgradesAddressCallerSession struct {
	Contract *OpenZeppelinUpgradesAddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// OpenZeppelinUpgradesAddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OpenZeppelinUpgradesAddressTransactorSession struct {
	Contract     *OpenZeppelinUpgradesAddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// OpenZeppelinUpgradesAddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type OpenZeppelinUpgradesAddressRaw struct {
	Contract *OpenZeppelinUpgradesAddress // Generic contract binding to access the raw methods on
}

// OpenZeppelinUpgradesAddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OpenZeppelinUpgradesAddressCallerRaw struct {
	Contract *OpenZeppelinUpgradesAddressCaller // Generic read-only contract binding to access the raw methods on
}

// OpenZeppelinUpgradesAddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OpenZeppelinUpgradesAddressTransactorRaw struct {
	Contract *OpenZeppelinUpgradesAddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOpenZeppelinUpgradesAddress creates a new instance of OpenZeppelinUpgradesAddress, bound to a specific deployed contract.
func NewOpenZeppelinUpgradesAddress(address common.Address, backend bind.ContractBackend) (*OpenZeppelinUpgradesAddress, error) {
	contract, err := bindOpenZeppelinUpgradesAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OpenZeppelinUpgradesAddress{OpenZeppelinUpgradesAddressCaller: OpenZeppelinUpgradesAddressCaller{contract: contract}, OpenZeppelinUpgradesAddressTransactor: OpenZeppelinUpgradesAddressTransactor{contract: contract}, OpenZeppelinUpgradesAddressFilterer: OpenZeppelinUpgradesAddressFilterer{contract: contract}}, nil
}

// NewOpenZeppelinUpgradesAddressCaller creates a new read-only instance of OpenZeppelinUpgradesAddress, bound to a specific deployed contract.
func NewOpenZeppelinUpgradesAddressCaller(address common.Address, caller bind.ContractCaller) (*OpenZeppelinUpgradesAddressCaller, error) {
	contract, err := bindOpenZeppelinUpgradesAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OpenZeppelinUpgradesAddressCaller{contract: contract}, nil
}

// NewOpenZeppelinUpgradesAddressTransactor creates a new write-only instance of OpenZeppelinUpgradesAddress, bound to a specific deployed contract.
func NewOpenZeppelinUpgradesAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*OpenZeppelinUpgradesAddressTransactor, error) {
	contract, err := bindOpenZeppelinUpgradesAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OpenZeppelinUpgradesAddressTransactor{contract: contract}, nil
}

// NewOpenZeppelinUpgradesAddressFilterer creates a new log filterer instance of OpenZeppelinUpgradesAddress, bound to a specific deployed contract.
func NewOpenZeppelinUpgradesAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*OpenZeppelinUpgradesAddressFilterer, error) {
	contract, err := bindOpenZeppelinUpgradesAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OpenZeppelinUpgradesAddressFilterer{contract: contract}, nil
}

// bindOpenZeppelinUpgradesAddress binds a generic wrapper to an already deployed contract.
func bindOpenZeppelinUpgradesAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OpenZeppelinUpgradesAddressABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OpenZeppelinUpgradesAddress *OpenZeppelinUpgradesAddressRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OpenZeppelinUpgradesAddress.Contract.OpenZeppelinUpgradesAddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OpenZeppelinUpgradesAddress *OpenZeppelinUpgradesAddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesAddress.Contract.OpenZeppelinUpgradesAddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OpenZeppelinUpgradesAddress *OpenZeppelinUpgradesAddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesAddress.Contract.OpenZeppelinUpgradesAddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OpenZeppelinUpgradesAddress *OpenZeppelinUpgradesAddressCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OpenZeppelinUpgradesAddress.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OpenZeppelinUpgradesAddress *OpenZeppelinUpgradesAddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesAddress.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OpenZeppelinUpgradesAddress *OpenZeppelinUpgradesAddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesAddress.Contract.contract.Transact(opts, method, params...)
}

// OpenZeppelinUpgradesOwnableABI is the input ABI used to generate the binding from.
const OpenZeppelinUpgradesOwnableABI = "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// OpenZeppelinUpgradesOwnable is an auto generated Go binding around an Ethereum contract.
type OpenZeppelinUpgradesOwnable struct {
	OpenZeppelinUpgradesOwnableCaller     // Read-only binding to the contract
	OpenZeppelinUpgradesOwnableTransactor // Write-only binding to the contract
	OpenZeppelinUpgradesOwnableFilterer   // Log filterer for contract events
}

// OpenZeppelinUpgradesOwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OpenZeppelinUpgradesOwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OpenZeppelinUpgradesOwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OpenZeppelinUpgradesOwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OpenZeppelinUpgradesOwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OpenZeppelinUpgradesOwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OpenZeppelinUpgradesOwnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OpenZeppelinUpgradesOwnableSession struct {
	Contract     *OpenZeppelinUpgradesOwnable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// OpenZeppelinUpgradesOwnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OpenZeppelinUpgradesOwnableCallerSession struct {
	Contract *OpenZeppelinUpgradesOwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// OpenZeppelinUpgradesOwnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OpenZeppelinUpgradesOwnableTransactorSession struct {
	Contract     *OpenZeppelinUpgradesOwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// OpenZeppelinUpgradesOwnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type OpenZeppelinUpgradesOwnableRaw struct {
	Contract *OpenZeppelinUpgradesOwnable // Generic contract binding to access the raw methods on
}

// OpenZeppelinUpgradesOwnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OpenZeppelinUpgradesOwnableCallerRaw struct {
	Contract *OpenZeppelinUpgradesOwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OpenZeppelinUpgradesOwnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OpenZeppelinUpgradesOwnableTransactorRaw struct {
	Contract *OpenZeppelinUpgradesOwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOpenZeppelinUpgradesOwnable creates a new instance of OpenZeppelinUpgradesOwnable, bound to a specific deployed contract.
func NewOpenZeppelinUpgradesOwnable(address common.Address, backend bind.ContractBackend) (*OpenZeppelinUpgradesOwnable, error) {
	contract, err := bindOpenZeppelinUpgradesOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OpenZeppelinUpgradesOwnable{OpenZeppelinUpgradesOwnableCaller: OpenZeppelinUpgradesOwnableCaller{contract: contract}, OpenZeppelinUpgradesOwnableTransactor: OpenZeppelinUpgradesOwnableTransactor{contract: contract}, OpenZeppelinUpgradesOwnableFilterer: OpenZeppelinUpgradesOwnableFilterer{contract: contract}}, nil
}

// NewOpenZeppelinUpgradesOwnableCaller creates a new read-only instance of OpenZeppelinUpgradesOwnable, bound to a specific deployed contract.
func NewOpenZeppelinUpgradesOwnableCaller(address common.Address, caller bind.ContractCaller) (*OpenZeppelinUpgradesOwnableCaller, error) {
	contract, err := bindOpenZeppelinUpgradesOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OpenZeppelinUpgradesOwnableCaller{contract: contract}, nil
}

// NewOpenZeppelinUpgradesOwnableTransactor creates a new write-only instance of OpenZeppelinUpgradesOwnable, bound to a specific deployed contract.
func NewOpenZeppelinUpgradesOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OpenZeppelinUpgradesOwnableTransactor, error) {
	contract, err := bindOpenZeppelinUpgradesOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OpenZeppelinUpgradesOwnableTransactor{contract: contract}, nil
}

// NewOpenZeppelinUpgradesOwnableFilterer creates a new log filterer instance of OpenZeppelinUpgradesOwnable, bound to a specific deployed contract.
func NewOpenZeppelinUpgradesOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OpenZeppelinUpgradesOwnableFilterer, error) {
	contract, err := bindOpenZeppelinUpgradesOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OpenZeppelinUpgradesOwnableFilterer{contract: contract}, nil
}

// bindOpenZeppelinUpgradesOwnable binds a generic wrapper to an already deployed contract.
func bindOpenZeppelinUpgradesOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OpenZeppelinUpgradesOwnableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OpenZeppelinUpgradesOwnable.Contract.OpenZeppelinUpgradesOwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.OpenZeppelinUpgradesOwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.OpenZeppelinUpgradesOwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OpenZeppelinUpgradesOwnable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.contract.Transact(opts, method, params...)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _OpenZeppelinUpgradesOwnable.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableSession) IsOwner() (bool, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.IsOwner(&_OpenZeppelinUpgradesOwnable.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableCallerSession) IsOwner() (bool, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.IsOwner(&_OpenZeppelinUpgradesOwnable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _OpenZeppelinUpgradesOwnable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableSession) Owner() (common.Address, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.Owner(&_OpenZeppelinUpgradesOwnable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableCallerSession) Owner() (common.Address, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.Owner(&_OpenZeppelinUpgradesOwnable.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableSession) RenounceOwnership() (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.RenounceOwnership(&_OpenZeppelinUpgradesOwnable.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.RenounceOwnership(&_OpenZeppelinUpgradesOwnable.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.TransferOwnership(&_OpenZeppelinUpgradesOwnable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OpenZeppelinUpgradesOwnable.Contract.TransferOwnership(&_OpenZeppelinUpgradesOwnable.TransactOpts, newOwner)
}

// OpenZeppelinUpgradesOwnableOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the OpenZeppelinUpgradesOwnable contract.
type OpenZeppelinUpgradesOwnableOwnershipTransferredIterator struct {
	Event *OpenZeppelinUpgradesOwnableOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OpenZeppelinUpgradesOwnableOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OpenZeppelinUpgradesOwnableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OpenZeppelinUpgradesOwnableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OpenZeppelinUpgradesOwnableOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OpenZeppelinUpgradesOwnableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OpenZeppelinUpgradesOwnableOwnershipTransferred represents a OwnershipTransferred event raised by the OpenZeppelinUpgradesOwnable contract.
type OpenZeppelinUpgradesOwnableOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OpenZeppelinUpgradesOwnableOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OpenZeppelinUpgradesOwnable.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OpenZeppelinUpgradesOwnableOwnershipTransferredIterator{contract: _OpenZeppelinUpgradesOwnable.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OpenZeppelinUpgradesOwnableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OpenZeppelinUpgradesOwnable.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OpenZeppelinUpgradesOwnableOwnershipTransferred)
				if err := _OpenZeppelinUpgradesOwnable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OpenZeppelinUpgradesOwnable *OpenZeppelinUpgradesOwnableFilterer) ParseOwnershipTransferred(log types.Log) (*OpenZeppelinUpgradesOwnableOwnershipTransferred, error) {
	event := new(OpenZeppelinUpgradesOwnableOwnershipTransferred)
	if err := _OpenZeppelinUpgradesOwnable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OwnableABI is the input ABI used to generate the binding from.
const OwnableABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// OwnableBin is the compiled bytecode used for deploying new contracts.
var OwnableBin = "0x6080604052610455806100136000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780638da5cb5b146100665780638f32d59b1461008a578063c4d66de8146100a6578063f2fde38b146100cc575b600080fd5b6100646100f2565b005b61006e610195565b604080516001600160a01b039092168252519081900360200190f35b6100926101a4565b604080519115158252519081900360200190f35b610064600480360360208110156100bc57600080fd5b50356001600160a01b03166101ca565b610064600480360360208110156100e257600080fd5b50356001600160a01b03166102bc565b6100fa6101a4565b61014b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6033546000906001600160a01b03166101bb610321565b6001600160a01b031614905090565b600054610100900460ff16806101e357506101e3610325565b806101f1575060005460ff16155b61022c5760405162461bcd60e51b815260040180806020018281038252602e8152602001806103f3602e913960400191505060405180910390fd5b600054610100900460ff16158015610257576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380156102b8576000805461ff00191690555b5050565b6102c46101a4565b610315576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61031e8161032b565b50565b3390565b303b1590565b6001600160a01b0381166103705760405162461bcd60e51b81526004018080602001828103825260268152602001806103cd6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820615421e258c8efca98412d0f7e93addbe423d11d7b6371e6123e37b372be1c8564736f6c63430005100032"

// DeployOwnable deploys a new Ethereum contract, binding an instance of Ownable to it.
func DeployOwnable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Ownable, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OwnableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_Ownable *OwnableCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_Ownable *OwnableSession) IsOwner() (bool, error) {
	return _Ownable.Contract.IsOwner(&_Ownable.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_Ownable *OwnableCallerSession) IsOwner() (bool, error) {
	return _Ownable.Contract.IsOwner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Ownable.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_Ownable *OwnableTransactor) Initialize(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "initialize", sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_Ownable *OwnableSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.Initialize(&_Ownable.TransactOpts, sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_Ownable *OwnableTransactorSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.Initialize(&_Ownable.TransactOpts, sender)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// OwnableOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Ownable contract.
type OwnableOwnershipTransferredIterator struct {
	Event *OwnableOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnableOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnableOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnableOwnershipTransferred represents a OwnershipTransferred event raised by the Ownable contract.
type OwnableOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OwnableOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OwnableOwnershipTransferredIterator{contract: _Ownable.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OwnableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnableOwnershipTransferred)
				if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) ParseOwnershipTransferred(log types.Log) (*OwnableOwnershipTransferred, error) {
	event := new(OwnableOwnershipTransferred)
	if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PausableABI is the input ABI used to generate the binding from.
const PausableABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// PausableBin is the compiled bytecode used for deploying new contracts.
var PausableBin = "0x608060405261078d806100136000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636ef8d66d1161005b5780636ef8d66d146100ce57806382dc1ec4146100d65780638456cb59146100fc578063c4d66de8146101045761007d565b80633f4ba83a1461008257806346fbf68e1461008c5780635c975abb146100c6575b600080fd5b61008a61012a565b005b6100b2600480360360208110156100a257600080fd5b50356001600160a01b0316610213565b604080519115158252519081900360200190f35b6100b261022c565b61008a610235565b61008a600480360360208110156100ec57600080fd5b50356001600160a01b0316610247565b61008a610299565b61008a6004803603602081101561011a57600080fd5b50356001600160a01b0316610360565b61013a610135610416565b610213565b6101755760405162461bcd60e51b81526004018080602001828103825260308152602001806106b86030913960400191505060405180910390fd5b60665460ff166101c3576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6066805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6101f6610416565b604080516001600160a01b039092168252519081900360200190a1565b600061022660338363ffffffff61041a16565b92915050565b60665460ff1690565b610245610240610416565b610481565b565b610252610135610416565b61028d5760405162461bcd60e51b81526004018080602001828103825260308152602001806106b86030913960400191505060405180910390fd5b610296816104c9565b50565b6102a4610135610416565b6102df5760405162461bcd60e51b81526004018080602001828103825260308152602001806106b86030913960400191505060405180910390fd5b60665460ff161561032a576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6066805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586101f6610416565b600054610100900460ff16806103795750610379610511565b80610387575060005460ff16155b6103c25760405162461bcd60e51b815260040180806020018281038252602e81526020018061072b602e913960400191505060405180910390fd5b600054610100900460ff161580156103ed576000805460ff1961ff0019909116610100171660011790555b6103f682610517565b6066805460ff191690558015610412576000805461ff00191690555b5050565b3390565b60006001600160a01b0382166104615760405162461bcd60e51b81526004018080602001828103825260228152602001806107096022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b61049260338263ffffffff6105cf16565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b6104da60338263ffffffff61063616565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b303b1590565b600054610100900460ff16806105305750610530610511565b8061053e575060005460ff16155b6105795760405162461bcd60e51b815260040180806020018281038252602e81526020018061072b602e913960400191505060405180910390fd5b600054610100900460ff161580156105a4576000805460ff1961ff0019909116610100171660011790555b6105ad82610213565b6105ba576105ba826104c9565b8015610412576000805461ff00191690555050565b6105d9828261041a565b6106145760405162461bcd60e51b81526004018080602001828103825260218152602001806106e86021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b610640828261041a565b15610692576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff1916600117905556fe506175736572526f6c653a2063616c6c657220646f6573206e6f742068617665207468652050617573657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820baed40538f7c0e0e41a5b74cd9233327afa4de9506b52805f146c4b8ca43404a64736f6c63430005100032"

// DeployPausable deploys a new Ethereum contract, binding an instance of Pausable to it.
func DeployPausable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Pausable, error) {
	parsed, err := abi.JSON(strings.NewReader(PausableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PausableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pausable{PausableCaller: PausableCaller{contract: contract}, PausableTransactor: PausableTransactor{contract: contract}, PausableFilterer: PausableFilterer{contract: contract}}, nil
}

// Pausable is an auto generated Go binding around an Ethereum contract.
type Pausable struct {
	PausableCaller     // Read-only binding to the contract
	PausableTransactor // Write-only binding to the contract
	PausableFilterer   // Log filterer for contract events
}

// PausableCaller is an auto generated read-only Go binding around an Ethereum contract.
type PausableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PausableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PausableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PausableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PausableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PausableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PausableSession struct {
	Contract     *Pausable         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PausableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PausableCallerSession struct {
	Contract *PausableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// PausableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PausableTransactorSession struct {
	Contract     *PausableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// PausableRaw is an auto generated low-level Go binding around an Ethereum contract.
type PausableRaw struct {
	Contract *Pausable // Generic contract binding to access the raw methods on
}

// PausableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PausableCallerRaw struct {
	Contract *PausableCaller // Generic read-only contract binding to access the raw methods on
}

// PausableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PausableTransactorRaw struct {
	Contract *PausableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPausable creates a new instance of Pausable, bound to a specific deployed contract.
func NewPausable(address common.Address, backend bind.ContractBackend) (*Pausable, error) {
	contract, err := bindPausable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pausable{PausableCaller: PausableCaller{contract: contract}, PausableTransactor: PausableTransactor{contract: contract}, PausableFilterer: PausableFilterer{contract: contract}}, nil
}

// NewPausableCaller creates a new read-only instance of Pausable, bound to a specific deployed contract.
func NewPausableCaller(address common.Address, caller bind.ContractCaller) (*PausableCaller, error) {
	contract, err := bindPausable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PausableCaller{contract: contract}, nil
}

// NewPausableTransactor creates a new write-only instance of Pausable, bound to a specific deployed contract.
func NewPausableTransactor(address common.Address, transactor bind.ContractTransactor) (*PausableTransactor, error) {
	contract, err := bindPausable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PausableTransactor{contract: contract}, nil
}

// NewPausableFilterer creates a new log filterer instance of Pausable, bound to a specific deployed contract.
func NewPausableFilterer(address common.Address, filterer bind.ContractFilterer) (*PausableFilterer, error) {
	contract, err := bindPausable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PausableFilterer{contract: contract}, nil
}

// bindPausable binds a generic wrapper to an already deployed contract.
func bindPausable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PausableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pausable *PausableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pausable.Contract.PausableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pausable *PausableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pausable.Contract.PausableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pausable *PausableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pausable.Contract.PausableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pausable *PausableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pausable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pausable *PausableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pausable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pausable *PausableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pausable.Contract.contract.Transact(opts, method, params...)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_Pausable *PausableCaller) IsPauser(opts *bind.CallOpts, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Pausable.contract.Call(opts, out, "isPauser", account)
	return *ret0, err
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_Pausable *PausableSession) IsPauser(account common.Address) (bool, error) {
	return _Pausable.Contract.IsPauser(&_Pausable.CallOpts, account)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_Pausable *PausableCallerSession) IsPauser(account common.Address) (bool, error) {
	return _Pausable.Contract.IsPauser(&_Pausable.CallOpts, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Pausable *PausableCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Pausable.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Pausable *PausableSession) Paused() (bool, error) {
	return _Pausable.Contract.Paused(&_Pausable.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Pausable *PausableCallerSession) Paused() (bool, error) {
	return _Pausable.Contract.Paused(&_Pausable.CallOpts)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_Pausable *PausableTransactor) AddPauser(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Pausable.contract.Transact(opts, "addPauser", account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_Pausable *PausableSession) AddPauser(account common.Address) (*types.Transaction, error) {
	return _Pausable.Contract.AddPauser(&_Pausable.TransactOpts, account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_Pausable *PausableTransactorSession) AddPauser(account common.Address) (*types.Transaction, error) {
	return _Pausable.Contract.AddPauser(&_Pausable.TransactOpts, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_Pausable *PausableTransactor) Initialize(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _Pausable.contract.Transact(opts, "initialize", sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_Pausable *PausableSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _Pausable.Contract.Initialize(&_Pausable.TransactOpts, sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_Pausable *PausableTransactorSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _Pausable.Contract.Initialize(&_Pausable.TransactOpts, sender)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Pausable *PausableTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pausable.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Pausable *PausableSession) Pause() (*types.Transaction, error) {
	return _Pausable.Contract.Pause(&_Pausable.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Pausable *PausableTransactorSession) Pause() (*types.Transaction, error) {
	return _Pausable.Contract.Pause(&_Pausable.TransactOpts)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_Pausable *PausableTransactor) RenouncePauser(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pausable.contract.Transact(opts, "renouncePauser")
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_Pausable *PausableSession) RenouncePauser() (*types.Transaction, error) {
	return _Pausable.Contract.RenouncePauser(&_Pausable.TransactOpts)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_Pausable *PausableTransactorSession) RenouncePauser() (*types.Transaction, error) {
	return _Pausable.Contract.RenouncePauser(&_Pausable.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Pausable *PausableTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pausable.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Pausable *PausableSession) Unpause() (*types.Transaction, error) {
	return _Pausable.Contract.Unpause(&_Pausable.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Pausable *PausableTransactorSession) Unpause() (*types.Transaction, error) {
	return _Pausable.Contract.Unpause(&_Pausable.TransactOpts)
}

// PausablePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Pausable contract.
type PausablePausedIterator struct {
	Event *PausablePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PausablePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PausablePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PausablePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PausablePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PausablePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PausablePaused represents a Paused event raised by the Pausable contract.
type PausablePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Pausable *PausableFilterer) FilterPaused(opts *bind.FilterOpts) (*PausablePausedIterator, error) {

	logs, sub, err := _Pausable.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &PausablePausedIterator{contract: _Pausable.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Pausable *PausableFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *PausablePaused) (event.Subscription, error) {

	logs, sub, err := _Pausable.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PausablePaused)
				if err := _Pausable.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Pausable *PausableFilterer) ParsePaused(log types.Log) (*PausablePaused, error) {
	event := new(PausablePaused)
	if err := _Pausable.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PausablePauserAddedIterator is returned from FilterPauserAdded and is used to iterate over the raw logs and unpacked data for PauserAdded events raised by the Pausable contract.
type PausablePauserAddedIterator struct {
	Event *PausablePauserAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PausablePauserAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PausablePauserAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PausablePauserAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PausablePauserAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PausablePauserAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PausablePauserAdded represents a PauserAdded event raised by the Pausable contract.
type PausablePauserAdded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserAdded is a free log retrieval operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_Pausable *PausableFilterer) FilterPauserAdded(opts *bind.FilterOpts, account []common.Address) (*PausablePauserAddedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Pausable.contract.FilterLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return &PausablePauserAddedIterator{contract: _Pausable.contract, event: "PauserAdded", logs: logs, sub: sub}, nil
}

// WatchPauserAdded is a free log subscription operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_Pausable *PausableFilterer) WatchPauserAdded(opts *bind.WatchOpts, sink chan<- *PausablePauserAdded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Pausable.contract.WatchLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PausablePauserAdded)
				if err := _Pausable.contract.UnpackLog(event, "PauserAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserAdded is a log parse operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_Pausable *PausableFilterer) ParsePauserAdded(log types.Log) (*PausablePauserAdded, error) {
	event := new(PausablePauserAdded)
	if err := _Pausable.contract.UnpackLog(event, "PauserAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PausablePauserRemovedIterator is returned from FilterPauserRemoved and is used to iterate over the raw logs and unpacked data for PauserRemoved events raised by the Pausable contract.
type PausablePauserRemovedIterator struct {
	Event *PausablePauserRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PausablePauserRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PausablePauserRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PausablePauserRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PausablePauserRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PausablePauserRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PausablePauserRemoved represents a PauserRemoved event raised by the Pausable contract.
type PausablePauserRemoved struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserRemoved is a free log retrieval operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_Pausable *PausableFilterer) FilterPauserRemoved(opts *bind.FilterOpts, account []common.Address) (*PausablePauserRemovedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Pausable.contract.FilterLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return &PausablePauserRemovedIterator{contract: _Pausable.contract, event: "PauserRemoved", logs: logs, sub: sub}, nil
}

// WatchPauserRemoved is a free log subscription operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_Pausable *PausableFilterer) WatchPauserRemoved(opts *bind.WatchOpts, sink chan<- *PausablePauserRemoved, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Pausable.contract.WatchLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PausablePauserRemoved)
				if err := _Pausable.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRemoved is a log parse operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_Pausable *PausableFilterer) ParsePauserRemoved(log types.Log) (*PausablePauserRemoved, error) {
	event := new(PausablePauserRemoved)
	if err := _Pausable.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PausableUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Pausable contract.
type PausableUnpausedIterator struct {
	Event *PausableUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PausableUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PausableUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PausableUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PausableUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PausableUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PausableUnpaused represents a Unpaused event raised by the Pausable contract.
type PausableUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Pausable *PausableFilterer) FilterUnpaused(opts *bind.FilterOpts) (*PausableUnpausedIterator, error) {

	logs, sub, err := _Pausable.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &PausableUnpausedIterator{contract: _Pausable.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Pausable *PausableFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *PausableUnpaused) (event.Subscription, error) {

	logs, sub, err := _Pausable.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PausableUnpaused)
				if err := _Pausable.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Pausable *PausableFilterer) ParseUnpaused(log types.Log) (*PausableUnpaused, error) {
	event := new(PausableUnpaused)
	if err := _Pausable.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PauserRoleABI is the input ABI used to generate the binding from.
const PauserRoleABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// PauserRoleBin is the compiled bytecode used for deploying new contracts.
var PauserRoleBin = "0x60806040526104db806100136000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806346fbf68e146100515780636ef8d66d1461008b57806382dc1ec414610095578063c4d66de8146100bb575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100e1565b604080519115158252519081900360200190f35b6100936100fa565b005b610093600480360360208110156100ab57600080fd5b50356001600160a01b031661010c565b610093600480360360208110156100d157600080fd5b50356001600160a01b0316610163565b60006100f460338363ffffffff61021c16565b92915050565b61010a610105610283565b610287565b565b61011c610117610283565b6100e1565b6101575760405162461bcd60e51b81526004018080602001828103825260308152602001806104066030913960400191505060405180910390fd5b610160816102cf565b50565b600054610100900460ff168061017c575061017c610317565b8061018a575060005460ff16155b6101c55760405162461bcd60e51b815260040180806020018281038252602e815260200180610479602e913960400191505060405180910390fd5b600054610100900460ff161580156101f0576000805460ff1961ff0019909116610100171660011790555b6101f9826100e1565b61020657610206826102cf565b8015610218576000805461ff00191690555b5050565b60006001600160a01b0382166102635760405162461bcd60e51b81526004018080602001828103825260228152602001806104576022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b3390565b61029860338263ffffffff61031d16565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b6102e060338263ffffffff61038416565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b303b1590565b610327828261021c565b6103625760405162461bcd60e51b81526004018080602001828103825260218152602001806104366021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b61038e828261021c565b156103e0576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff1916600117905556fe506175736572526f6c653a2063616c6c657220646f6573206e6f742068617665207468652050617573657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820f940f92be40c34412c030486932e764b798087b1a833b78f5da2b3fb973bbe1e64736f6c63430005100032"

// DeployPauserRole deploys a new Ethereum contract, binding an instance of PauserRole to it.
func DeployPauserRole(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PauserRole, error) {
	parsed, err := abi.JSON(strings.NewReader(PauserRoleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PauserRoleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PauserRole{PauserRoleCaller: PauserRoleCaller{contract: contract}, PauserRoleTransactor: PauserRoleTransactor{contract: contract}, PauserRoleFilterer: PauserRoleFilterer{contract: contract}}, nil
}

// PauserRole is an auto generated Go binding around an Ethereum contract.
type PauserRole struct {
	PauserRoleCaller     // Read-only binding to the contract
	PauserRoleTransactor // Write-only binding to the contract
	PauserRoleFilterer   // Log filterer for contract events
}

// PauserRoleCaller is an auto generated read-only Go binding around an Ethereum contract.
type PauserRoleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PauserRoleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PauserRoleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PauserRoleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PauserRoleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PauserRoleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PauserRoleSession struct {
	Contract     *PauserRole       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PauserRoleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PauserRoleCallerSession struct {
	Contract *PauserRoleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// PauserRoleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PauserRoleTransactorSession struct {
	Contract     *PauserRoleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PauserRoleRaw is an auto generated low-level Go binding around an Ethereum contract.
type PauserRoleRaw struct {
	Contract *PauserRole // Generic contract binding to access the raw methods on
}

// PauserRoleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PauserRoleCallerRaw struct {
	Contract *PauserRoleCaller // Generic read-only contract binding to access the raw methods on
}

// PauserRoleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PauserRoleTransactorRaw struct {
	Contract *PauserRoleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPauserRole creates a new instance of PauserRole, bound to a specific deployed contract.
func NewPauserRole(address common.Address, backend bind.ContractBackend) (*PauserRole, error) {
	contract, err := bindPauserRole(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PauserRole{PauserRoleCaller: PauserRoleCaller{contract: contract}, PauserRoleTransactor: PauserRoleTransactor{contract: contract}, PauserRoleFilterer: PauserRoleFilterer{contract: contract}}, nil
}

// NewPauserRoleCaller creates a new read-only instance of PauserRole, bound to a specific deployed contract.
func NewPauserRoleCaller(address common.Address, caller bind.ContractCaller) (*PauserRoleCaller, error) {
	contract, err := bindPauserRole(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PauserRoleCaller{contract: contract}, nil
}

// NewPauserRoleTransactor creates a new write-only instance of PauserRole, bound to a specific deployed contract.
func NewPauserRoleTransactor(address common.Address, transactor bind.ContractTransactor) (*PauserRoleTransactor, error) {
	contract, err := bindPauserRole(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PauserRoleTransactor{contract: contract}, nil
}

// NewPauserRoleFilterer creates a new log filterer instance of PauserRole, bound to a specific deployed contract.
func NewPauserRoleFilterer(address common.Address, filterer bind.ContractFilterer) (*PauserRoleFilterer, error) {
	contract, err := bindPauserRole(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PauserRoleFilterer{contract: contract}, nil
}

// bindPauserRole binds a generic wrapper to an already deployed contract.
func bindPauserRole(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PauserRoleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PauserRole *PauserRoleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _PauserRole.Contract.PauserRoleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PauserRole *PauserRoleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PauserRole.Contract.PauserRoleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PauserRole *PauserRoleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PauserRole.Contract.PauserRoleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PauserRole *PauserRoleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _PauserRole.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PauserRole *PauserRoleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PauserRole.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PauserRole *PauserRoleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PauserRole.Contract.contract.Transact(opts, method, params...)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_PauserRole *PauserRoleCaller) IsPauser(opts *bind.CallOpts, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _PauserRole.contract.Call(opts, out, "isPauser", account)
	return *ret0, err
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_PauserRole *PauserRoleSession) IsPauser(account common.Address) (bool, error) {
	return _PauserRole.Contract.IsPauser(&_PauserRole.CallOpts, account)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_PauserRole *PauserRoleCallerSession) IsPauser(account common.Address) (bool, error) {
	return _PauserRole.Contract.IsPauser(&_PauserRole.CallOpts, account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_PauserRole *PauserRoleTransactor) AddPauser(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _PauserRole.contract.Transact(opts, "addPauser", account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_PauserRole *PauserRoleSession) AddPauser(account common.Address) (*types.Transaction, error) {
	return _PauserRole.Contract.AddPauser(&_PauserRole.TransactOpts, account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_PauserRole *PauserRoleTransactorSession) AddPauser(account common.Address) (*types.Transaction, error) {
	return _PauserRole.Contract.AddPauser(&_PauserRole.TransactOpts, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_PauserRole *PauserRoleTransactor) Initialize(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _PauserRole.contract.Transact(opts, "initialize", sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_PauserRole *PauserRoleSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _PauserRole.Contract.Initialize(&_PauserRole.TransactOpts, sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_PauserRole *PauserRoleTransactorSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _PauserRole.Contract.Initialize(&_PauserRole.TransactOpts, sender)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_PauserRole *PauserRoleTransactor) RenouncePauser(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PauserRole.contract.Transact(opts, "renouncePauser")
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_PauserRole *PauserRoleSession) RenouncePauser() (*types.Transaction, error) {
	return _PauserRole.Contract.RenouncePauser(&_PauserRole.TransactOpts)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_PauserRole *PauserRoleTransactorSession) RenouncePauser() (*types.Transaction, error) {
	return _PauserRole.Contract.RenouncePauser(&_PauserRole.TransactOpts)
}

// PauserRolePauserAddedIterator is returned from FilterPauserAdded and is used to iterate over the raw logs and unpacked data for PauserAdded events raised by the PauserRole contract.
type PauserRolePauserAddedIterator struct {
	Event *PauserRolePauserAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PauserRolePauserAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PauserRolePauserAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PauserRolePauserAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PauserRolePauserAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PauserRolePauserAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PauserRolePauserAdded represents a PauserAdded event raised by the PauserRole contract.
type PauserRolePauserAdded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserAdded is a free log retrieval operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_PauserRole *PauserRoleFilterer) FilterPauserAdded(opts *bind.FilterOpts, account []common.Address) (*PauserRolePauserAddedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _PauserRole.contract.FilterLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return &PauserRolePauserAddedIterator{contract: _PauserRole.contract, event: "PauserAdded", logs: logs, sub: sub}, nil
}

// WatchPauserAdded is a free log subscription operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_PauserRole *PauserRoleFilterer) WatchPauserAdded(opts *bind.WatchOpts, sink chan<- *PauserRolePauserAdded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _PauserRole.contract.WatchLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PauserRolePauserAdded)
				if err := _PauserRole.contract.UnpackLog(event, "PauserAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserAdded is a log parse operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_PauserRole *PauserRoleFilterer) ParsePauserAdded(log types.Log) (*PauserRolePauserAdded, error) {
	event := new(PauserRolePauserAdded)
	if err := _PauserRole.contract.UnpackLog(event, "PauserAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PauserRolePauserRemovedIterator is returned from FilterPauserRemoved and is used to iterate over the raw logs and unpacked data for PauserRemoved events raised by the PauserRole contract.
type PauserRolePauserRemovedIterator struct {
	Event *PauserRolePauserRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PauserRolePauserRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PauserRolePauserRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PauserRolePauserRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PauserRolePauserRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PauserRolePauserRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PauserRolePauserRemoved represents a PauserRemoved event raised by the PauserRole contract.
type PauserRolePauserRemoved struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserRemoved is a free log retrieval operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_PauserRole *PauserRoleFilterer) FilterPauserRemoved(opts *bind.FilterOpts, account []common.Address) (*PauserRolePauserRemovedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _PauserRole.contract.FilterLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return &PauserRolePauserRemovedIterator{contract: _PauserRole.contract, event: "PauserRemoved", logs: logs, sub: sub}, nil
}

// WatchPauserRemoved is a free log subscription operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_PauserRole *PauserRoleFilterer) WatchPauserRemoved(opts *bind.WatchOpts, sink chan<- *PauserRolePauserRemoved, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _PauserRole.contract.WatchLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PauserRolePauserRemoved)
				if err := _PauserRole.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRemoved is a log parse operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_PauserRole *PauserRoleFilterer) ParsePauserRemoved(log types.Log) (*PauserRolePauserRemoved, error) {
	event := new(PauserRolePauserRemoved)
	if err := _PauserRole.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ProxyABI is the input ABI used to generate the binding from.
const ProxyABI = "[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// Proxy is an auto generated Go binding around an Ethereum contract.
type Proxy struct {
	ProxyCaller     // Read-only binding to the contract
	ProxyTransactor // Write-only binding to the contract
	ProxyFilterer   // Log filterer for contract events
}

// ProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProxySession struct {
	Contract     *Proxy            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProxyCallerSession struct {
	Contract *ProxyCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProxyTransactorSession struct {
	Contract     *ProxyTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProxyRaw struct {
	Contract *Proxy // Generic contract binding to access the raw methods on
}

// ProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProxyCallerRaw struct {
	Contract *ProxyCaller // Generic read-only contract binding to access the raw methods on
}

// ProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProxyTransactorRaw struct {
	Contract *ProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProxy creates a new instance of Proxy, bound to a specific deployed contract.
func NewProxy(address common.Address, backend bind.ContractBackend) (*Proxy, error) {
	contract, err := bindProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Proxy{ProxyCaller: ProxyCaller{contract: contract}, ProxyTransactor: ProxyTransactor{contract: contract}, ProxyFilterer: ProxyFilterer{contract: contract}}, nil
}

// NewProxyCaller creates a new read-only instance of Proxy, bound to a specific deployed contract.
func NewProxyCaller(address common.Address, caller bind.ContractCaller) (*ProxyCaller, error) {
	contract, err := bindProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyCaller{contract: contract}, nil
}

// NewProxyTransactor creates a new write-only instance of Proxy, bound to a specific deployed contract.
func NewProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*ProxyTransactor, error) {
	contract, err := bindProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyTransactor{contract: contract}, nil
}

// NewProxyFilterer creates a new log filterer instance of Proxy, bound to a specific deployed contract.
func NewProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*ProxyFilterer, error) {
	contract, err := bindProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProxyFilterer{contract: contract}, nil
}

// bindProxy binds a generic wrapper to an already deployed contract.
func bindProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proxy *ProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Proxy.Contract.ProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proxy *ProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proxy.Contract.ProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proxy *ProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proxy.Contract.ProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Proxy *ProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Proxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Proxy *ProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Proxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Proxy *ProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Proxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Proxy *ProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Proxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Proxy *ProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Proxy.Contract.Fallback(&_Proxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Proxy *ProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Proxy.Contract.Fallback(&_Proxy.TransactOpts, calldata)
}

// ProxyAdminABI is the input ABI used to generate the binding from.
const ProxyAdminABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// ProxyAdminBin is the compiled bytecode used for deploying new contracts.
var ProxyAdminBin = "0x60806040819052600080546001600160a01b03191633178082556001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36106d5806100576000396000f3fe6080604052600436106100865760003560e01c80638f32d59b116100595780638f32d59b146101415780639623609d1461016a57806399a88ec414610229578063f2fde38b14610264578063f3b7dead1461029757610086565b8063204e1c7a1461008b578063715018a6146100da5780637eff275e146100f15780638da5cb5b1461012c575b600080fd5b34801561009757600080fd5b506100be600480360360208110156100ae57600080fd5b50356001600160a01b03166102ca565b604080516001600160a01b039092168252519081900360200190f35b3480156100e657600080fd5b506100ef61035c565b005b3480156100fd57600080fd5b506100ef6004803603604081101561011457600080fd5b506001600160a01b03813581169160200135166103b7565b34801561013857600080fd5b506100be61043c565b34801561014d57600080fd5b5061015661044b565b604080519115158252519081900360200190f35b6100ef6004803603606081101561018057600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156101b457600080fd5b8201836020820111156101c657600080fd5b803590602001918460018302840111640100000000831117156101e857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061045c945050505050565b34801561023557600080fd5b506100ef6004803603604081101561024c57600080fd5b506001600160a01b038135811691602001351661054d565b34801561027057600080fd5b506100ef6004803603602081101561028757600080fd5b50356001600160a01b03166105b6565b3480156102a357600080fd5b506100be600480360360208110156102ba57600080fd5b50356001600160a01b03166105d3565b6000806060836001600160a01b03166040518080635c60da1b60e01b8152506004019050600060405180830381855afa9150503d8060008114610329576040519150601f19603f3d011682016040523d82523d6000602084013e61032e565b606091505b50915091508161033d57600080fd5b80806020019051602081101561035257600080fd5b5051949350505050565b61036461044b565b61036d57600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6103bf61044b565b6103c857600080fd5b816001600160a01b0316638f283970826040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561042057600080fd5b505af1158015610434573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b61046461044b565b61046d57600080fd5b826001600160a01b0316634f1ef2863484846040518463ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104e35781810151838201526020016104cb565b50505050905090810190601f1680156105105780820380516001836020036101000a031916815260200191505b5093505050506000604051808303818588803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b5050505050505050565b61055561044b565b61055e57600080fd5b816001600160a01b0316633659cfe6826040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561042057600080fd5b6105be61044b565b6105c757600080fd5b6105d081610632565b50565b6000806060836001600160a01b031660405180806303e1469160e61b8152506004019050600060405180830381855afa9150503d8060008114610329576040519150601f19603f3d011682016040523d82523d6000602084013e61032e565b6001600160a01b03811661064557600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fea265627a7a7231582065a253f3ec26fc48be7d627579796934888a224aa12b08594f1e2f0baba45c0c64736f6c63430005100032"

// DeployProxyAdmin deploys a new Ethereum contract, binding an instance of ProxyAdmin to it.
func DeployProxyAdmin(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ProxyAdmin, error) {
	parsed, err := abi.JSON(strings.NewReader(ProxyAdminABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProxyAdminBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ProxyAdmin{ProxyAdminCaller: ProxyAdminCaller{contract: contract}, ProxyAdminTransactor: ProxyAdminTransactor{contract: contract}, ProxyAdminFilterer: ProxyAdminFilterer{contract: contract}}, nil
}

// ProxyAdmin is an auto generated Go binding around an Ethereum contract.
type ProxyAdmin struct {
	ProxyAdminCaller     // Read-only binding to the contract
	ProxyAdminTransactor // Write-only binding to the contract
	ProxyAdminFilterer   // Log filterer for contract events
}

// ProxyAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProxyAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProxyAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProxyAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProxyAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProxyAdminSession struct {
	Contract     *ProxyAdmin       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProxyAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProxyAdminCallerSession struct {
	Contract *ProxyAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ProxyAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProxyAdminTransactorSession struct {
	Contract     *ProxyAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ProxyAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProxyAdminRaw struct {
	Contract *ProxyAdmin // Generic contract binding to access the raw methods on
}

// ProxyAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProxyAdminCallerRaw struct {
	Contract *ProxyAdminCaller // Generic read-only contract binding to access the raw methods on
}

// ProxyAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProxyAdminTransactorRaw struct {
	Contract *ProxyAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProxyAdmin creates a new instance of ProxyAdmin, bound to a specific deployed contract.
func NewProxyAdmin(address common.Address, backend bind.ContractBackend) (*ProxyAdmin, error) {
	contract, err := bindProxyAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ProxyAdmin{ProxyAdminCaller: ProxyAdminCaller{contract: contract}, ProxyAdminTransactor: ProxyAdminTransactor{contract: contract}, ProxyAdminFilterer: ProxyAdminFilterer{contract: contract}}, nil
}

// NewProxyAdminCaller creates a new read-only instance of ProxyAdmin, bound to a specific deployed contract.
func NewProxyAdminCaller(address common.Address, caller bind.ContractCaller) (*ProxyAdminCaller, error) {
	contract, err := bindProxyAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminCaller{contract: contract}, nil
}

// NewProxyAdminTransactor creates a new write-only instance of ProxyAdmin, bound to a specific deployed contract.
func NewProxyAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*ProxyAdminTransactor, error) {
	contract, err := bindProxyAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminTransactor{contract: contract}, nil
}

// NewProxyAdminFilterer creates a new log filterer instance of ProxyAdmin, bound to a specific deployed contract.
func NewProxyAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*ProxyAdminFilterer, error) {
	contract, err := bindProxyAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminFilterer{contract: contract}, nil
}

// bindProxyAdmin binds a generic wrapper to an already deployed contract.
func bindProxyAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProxyAdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProxyAdmin *ProxyAdminRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ProxyAdmin.Contract.ProxyAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProxyAdmin *ProxyAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.ProxyAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProxyAdmin *ProxyAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.ProxyAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProxyAdmin *ProxyAdminCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ProxyAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProxyAdmin *ProxyAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProxyAdmin *ProxyAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.contract.Transact(opts, method, params...)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminCaller) GetProxyAdmin(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ProxyAdmin.contract.Call(opts, out, "getProxyAdmin", proxy)
	return *ret0, err
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _ProxyAdmin.Contract.GetProxyAdmin(&_ProxyAdmin.CallOpts, proxy)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminCallerSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _ProxyAdmin.Contract.GetProxyAdmin(&_ProxyAdmin.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminCaller) GetProxyImplementation(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ProxyAdmin.contract.Call(opts, out, "getProxyImplementation", proxy)
	return *ret0, err
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _ProxyAdmin.Contract.GetProxyImplementation(&_ProxyAdmin.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_ProxyAdmin *ProxyAdminCallerSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _ProxyAdmin.Contract.GetProxyImplementation(&_ProxyAdmin.CallOpts, proxy)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_ProxyAdmin *ProxyAdminCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ProxyAdmin.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_ProxyAdmin *ProxyAdminSession) IsOwner() (bool, error) {
	return _ProxyAdmin.Contract.IsOwner(&_ProxyAdmin.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_ProxyAdmin *ProxyAdminCallerSession) IsOwner() (bool, error) {
	return _ProxyAdmin.Contract.IsOwner(&_ProxyAdmin.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdmin *ProxyAdminCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ProxyAdmin.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdmin *ProxyAdminSession) Owner() (common.Address, error) {
	return _ProxyAdmin.Contract.Owner(&_ProxyAdmin.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProxyAdmin *ProxyAdminCallerSession) Owner() (common.Address, error) {
	return _ProxyAdmin.Contract.Owner(&_ProxyAdmin.CallOpts)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdmin *ProxyAdminTransactor) ChangeProxyAdmin(opts *bind.TransactOpts, proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "changeProxyAdmin", proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdmin *ProxyAdminSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.ChangeProxyAdmin(&_ProxyAdmin.TransactOpts, proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.ChangeProxyAdmin(&_ProxyAdmin.TransactOpts, proxy, newAdmin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdmin *ProxyAdminTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdmin *ProxyAdminSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProxyAdmin.Contract.RenounceOwnership(&_ProxyAdmin.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProxyAdmin.Contract.RenounceOwnership(&_ProxyAdmin.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdmin *ProxyAdminTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdmin *ProxyAdminSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.TransferOwnership(&_ProxyAdmin.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.TransferOwnership(&_ProxyAdmin.TransactOpts, newOwner)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdmin *ProxyAdminTransactor) Upgrade(opts *bind.TransactOpts, proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "upgrade", proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdmin *ProxyAdminSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.Upgrade(&_ProxyAdmin.TransactOpts, proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.Upgrade(&_ProxyAdmin.TransactOpts, proxy, implementation)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdmin *ProxyAdminTransactor) UpgradeAndCall(opts *bind.TransactOpts, proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdmin.contract.Transact(opts, "upgradeAndCall", proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdmin *ProxyAdminSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.UpgradeAndCall(&_ProxyAdmin.TransactOpts, proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_ProxyAdmin *ProxyAdminTransactorSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _ProxyAdmin.Contract.UpgradeAndCall(&_ProxyAdmin.TransactOpts, proxy, implementation, data)
}

// ProxyAdminOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ProxyAdmin contract.
type ProxyAdminOwnershipTransferredIterator struct {
	Event *ProxyAdminOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProxyAdminOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProxyAdminOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProxyAdminOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProxyAdminOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProxyAdminOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProxyAdminOwnershipTransferred represents a OwnershipTransferred event raised by the ProxyAdmin contract.
type ProxyAdminOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdmin *ProxyAdminFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProxyAdminOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProxyAdmin.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProxyAdminOwnershipTransferredIterator{contract: _ProxyAdmin.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdmin *ProxyAdminFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProxyAdminOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProxyAdmin.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProxyAdminOwnershipTransferred)
				if err := _ProxyAdmin.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProxyAdmin *ProxyAdminFilterer) ParseOwnershipTransferred(log types.Log) (*ProxyAdminOwnershipTransferred, error) {
	event := new(ProxyAdminOwnershipTransferred)
	if err := _ProxyAdmin.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RenERC20LogicV1ABI is the input ABI used to generate the binding from.
const RenERC20LogicV1ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"LogRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_rateScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"blacklistRecoverableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"fromUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"toUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// RenERC20LogicV1Bin is the compiled bytecode used for deploying new contracts.
var RenERC20LogicV1Bin = ""

// DeployRenERC20LogicV1 deploys a new Ethereum contract, binding an instance of RenERC20LogicV1 to it.
func DeployRenERC20LogicV1(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RenERC20LogicV1, error) {
	parsed, err := abi.JSON(strings.NewReader(RenERC20LogicV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RenERC20LogicV1Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RenERC20LogicV1{RenERC20LogicV1Caller: RenERC20LogicV1Caller{contract: contract}, RenERC20LogicV1Transactor: RenERC20LogicV1Transactor{contract: contract}, RenERC20LogicV1Filterer: RenERC20LogicV1Filterer{contract: contract}}, nil
}

// RenERC20LogicV1 is an auto generated Go binding around an Ethereum contract.
type RenERC20LogicV1 struct {
	RenERC20LogicV1Caller     // Read-only binding to the contract
	RenERC20LogicV1Transactor // Write-only binding to the contract
	RenERC20LogicV1Filterer   // Log filterer for contract events
}

// RenERC20LogicV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type RenERC20LogicV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RenERC20LogicV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type RenERC20LogicV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RenERC20LogicV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RenERC20LogicV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RenERC20LogicV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RenERC20LogicV1Session struct {
	Contract     *RenERC20LogicV1  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RenERC20LogicV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RenERC20LogicV1CallerSession struct {
	Contract *RenERC20LogicV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// RenERC20LogicV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RenERC20LogicV1TransactorSession struct {
	Contract     *RenERC20LogicV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// RenERC20LogicV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type RenERC20LogicV1Raw struct {
	Contract *RenERC20LogicV1 // Generic contract binding to access the raw methods on
}

// RenERC20LogicV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RenERC20LogicV1CallerRaw struct {
	Contract *RenERC20LogicV1Caller // Generic read-only contract binding to access the raw methods on
}

// RenERC20LogicV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RenERC20LogicV1TransactorRaw struct {
	Contract *RenERC20LogicV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewRenERC20LogicV1 creates a new instance of RenERC20LogicV1, bound to a specific deployed contract.
func NewRenERC20LogicV1(address common.Address, backend bind.ContractBackend) (*RenERC20LogicV1, error) {
	contract, err := bindRenERC20LogicV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RenERC20LogicV1{RenERC20LogicV1Caller: RenERC20LogicV1Caller{contract: contract}, RenERC20LogicV1Transactor: RenERC20LogicV1Transactor{contract: contract}, RenERC20LogicV1Filterer: RenERC20LogicV1Filterer{contract: contract}}, nil
}

// NewRenERC20LogicV1Caller creates a new read-only instance of RenERC20LogicV1, bound to a specific deployed contract.
func NewRenERC20LogicV1Caller(address common.Address, caller bind.ContractCaller) (*RenERC20LogicV1Caller, error) {
	contract, err := bindRenERC20LogicV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RenERC20LogicV1Caller{contract: contract}, nil
}

// NewRenERC20LogicV1Transactor creates a new write-only instance of RenERC20LogicV1, bound to a specific deployed contract.
func NewRenERC20LogicV1Transactor(address common.Address, transactor bind.ContractTransactor) (*RenERC20LogicV1Transactor, error) {
	contract, err := bindRenERC20LogicV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RenERC20LogicV1Transactor{contract: contract}, nil
}

// NewRenERC20LogicV1Filterer creates a new log filterer instance of RenERC20LogicV1, bound to a specific deployed contract.
func NewRenERC20LogicV1Filterer(address common.Address, filterer bind.ContractFilterer) (*RenERC20LogicV1Filterer, error) {
	contract, err := bindRenERC20LogicV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RenERC20LogicV1Filterer{contract: contract}, nil
}

// bindRenERC20LogicV1 binds a generic wrapper to an already deployed contract.
func bindRenERC20LogicV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RenERC20LogicV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RenERC20LogicV1 *RenERC20LogicV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RenERC20LogicV1.Contract.RenERC20LogicV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RenERC20LogicV1 *RenERC20LogicV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.RenERC20LogicV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RenERC20LogicV1 *RenERC20LogicV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.RenERC20LogicV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RenERC20LogicV1 *RenERC20LogicV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RenERC20LogicV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "DOMAIN_SEPARATOR")
	return *ret0, err
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) DOMAINSEPARATOR() ([32]byte, error) {
	return _RenERC20LogicV1.Contract.DOMAINSEPARATOR(&_RenERC20LogicV1.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _RenERC20LogicV1.Contract.DOMAINSEPARATOR(&_RenERC20LogicV1.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) PERMITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "PERMIT_TYPEHASH")
	return *ret0, err
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) PERMITTYPEHASH() ([32]byte, error) {
	return _RenERC20LogicV1.Contract.PERMITTYPEHASH(&_RenERC20LogicV1.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _RenERC20LogicV1.Contract.PERMITTYPEHASH(&_RenERC20LogicV1.CallOpts)
}

// RateScale is a free data retrieval call binding the contract method 0x25e27ed8.
//
// Solidity: function _rateScale() view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) RateScale(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "_rateScale")
	return *ret0, err
}

// RateScale is a free data retrieval call binding the contract method 0x25e27ed8.
//
// Solidity: function _rateScale() view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) RateScale() (*big.Int, error) {
	return _RenERC20LogicV1.Contract.RateScale(&_RenERC20LogicV1.CallOpts)
}

// RateScale is a free data retrieval call binding the contract method 0x25e27ed8.
//
// Solidity: function _rateScale() view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) RateScale() (*big.Int, error) {
	return _RenERC20LogicV1.Contract.RateScale(&_RenERC20LogicV1.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.Allowance(&_RenERC20LogicV1.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.Allowance(&_RenERC20LogicV1.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.BalanceOf(&_RenERC20LogicV1.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.BalanceOf(&_RenERC20LogicV1.CallOpts, account)
}

// BalanceOfUnderlying is a free data retrieval call binding the contract method 0x3af9e669.
//
// Solidity: function balanceOfUnderlying(address _account) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) BalanceOfUnderlying(opts *bind.CallOpts, _account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "balanceOfUnderlying", _account)
	return *ret0, err
}

// BalanceOfUnderlying is a free data retrieval call binding the contract method 0x3af9e669.
//
// Solidity: function balanceOfUnderlying(address _account) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) BalanceOfUnderlying(_account common.Address) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.BalanceOfUnderlying(&_RenERC20LogicV1.CallOpts, _account)
}

// BalanceOfUnderlying is a free data retrieval call binding the contract method 0x3af9e669.
//
// Solidity: function balanceOfUnderlying(address _account) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) BalanceOfUnderlying(_account common.Address) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.BalanceOfUnderlying(&_RenERC20LogicV1.CallOpts, _account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Decimals() (uint8, error) {
	return _RenERC20LogicV1.Contract.Decimals(&_RenERC20LogicV1.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) Decimals() (uint8, error) {
	return _RenERC20LogicV1.Contract.Decimals(&_RenERC20LogicV1.CallOpts)
}

// ExchangeRateCurrent is a free data retrieval call binding the contract method 0xbd6d894d.
//
// Solidity: function exchangeRateCurrent() view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) ExchangeRateCurrent(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "exchangeRateCurrent")
	return *ret0, err
}

// ExchangeRateCurrent is a free data retrieval call binding the contract method 0xbd6d894d.
//
// Solidity: function exchangeRateCurrent() view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) ExchangeRateCurrent() (*big.Int, error) {
	return _RenERC20LogicV1.Contract.ExchangeRateCurrent(&_RenERC20LogicV1.CallOpts)
}

// ExchangeRateCurrent is a free data retrieval call binding the contract method 0xbd6d894d.
//
// Solidity: function exchangeRateCurrent() view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) ExchangeRateCurrent() (*big.Int, error) {
	return _RenERC20LogicV1.Contract.ExchangeRateCurrent(&_RenERC20LogicV1.CallOpts)
}

// FromUnderlying is a free data retrieval call binding the contract method 0xa173b2f6.
//
// Solidity: function fromUnderlying(uint256 _amountUnderlying) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) FromUnderlying(opts *bind.CallOpts, _amountUnderlying *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "fromUnderlying", _amountUnderlying)
	return *ret0, err
}

// FromUnderlying is a free data retrieval call binding the contract method 0xa173b2f6.
//
// Solidity: function fromUnderlying(uint256 _amountUnderlying) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) FromUnderlying(_amountUnderlying *big.Int) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.FromUnderlying(&_RenERC20LogicV1.CallOpts, _amountUnderlying)
}

// FromUnderlying is a free data retrieval call binding the contract method 0xa173b2f6.
//
// Solidity: function fromUnderlying(uint256 _amountUnderlying) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) FromUnderlying(_amountUnderlying *big.Int) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.FromUnderlying(&_RenERC20LogicV1.CallOpts, _amountUnderlying)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) IsOwner() (bool, error) {
	return _RenERC20LogicV1.Contract.IsOwner(&_RenERC20LogicV1.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) IsOwner() (bool, error) {
	return _RenERC20LogicV1.Contract.IsOwner(&_RenERC20LogicV1.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Name() (string, error) {
	return _RenERC20LogicV1.Contract.Name(&_RenERC20LogicV1.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) Name() (string, error) {
	return _RenERC20LogicV1.Contract.Name(&_RenERC20LogicV1.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "nonces", arg0)
	return *ret0, err
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Nonces(arg0 common.Address) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.Nonces(&_RenERC20LogicV1.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.Nonces(&_RenERC20LogicV1.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Owner() (common.Address, error) {
	return _RenERC20LogicV1.Contract.Owner(&_RenERC20LogicV1.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) Owner() (common.Address, error) {
	return _RenERC20LogicV1.Contract.Owner(&_RenERC20LogicV1.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "pendingOwner")
	return *ret0, err
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) PendingOwner() (common.Address, error) {
	return _RenERC20LogicV1.Contract.PendingOwner(&_RenERC20LogicV1.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) PendingOwner() (common.Address, error) {
	return _RenERC20LogicV1.Contract.PendingOwner(&_RenERC20LogicV1.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Symbol() (string, error) {
	return _RenERC20LogicV1.Contract.Symbol(&_RenERC20LogicV1.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) Symbol() (string, error) {
	return _RenERC20LogicV1.Contract.Symbol(&_RenERC20LogicV1.CallOpts)
}

// ToUnderlying is a free data retrieval call binding the contract method 0xeb438fc2.
//
// Solidity: function toUnderlying(uint256 _amount) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) ToUnderlying(opts *bind.CallOpts, _amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "toUnderlying", _amount)
	return *ret0, err
}

// ToUnderlying is a free data retrieval call binding the contract method 0xeb438fc2.
//
// Solidity: function toUnderlying(uint256 _amount) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) ToUnderlying(_amount *big.Int) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.ToUnderlying(&_RenERC20LogicV1.CallOpts, _amount)
}

// ToUnderlying is a free data retrieval call binding the contract method 0xeb438fc2.
//
// Solidity: function toUnderlying(uint256 _amount) view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) ToUnderlying(_amount *big.Int) (*big.Int, error) {
	return _RenERC20LogicV1.Contract.ToUnderlying(&_RenERC20LogicV1.CallOpts, _amount)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) TotalSupply() (*big.Int, error) {
	return _RenERC20LogicV1.Contract.TotalSupply(&_RenERC20LogicV1.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) TotalSupply() (*big.Int, error) {
	return _RenERC20LogicV1.Contract.TotalSupply(&_RenERC20LogicV1.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_RenERC20LogicV1 *RenERC20LogicV1Caller) Version(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _RenERC20LogicV1.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Version() (string, error) {
	return _RenERC20LogicV1.Contract.Version(&_RenERC20LogicV1.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_RenERC20LogicV1 *RenERC20LogicV1CallerSession) Version() (string, error) {
	return _RenERC20LogicV1.Contract.Version(&_RenERC20LogicV1.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Approve(&_RenERC20LogicV1.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Approve(&_RenERC20LogicV1.TransactOpts, spender, amount)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) BlacklistRecoverableToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "blacklistRecoverableToken", _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.BlacklistRecoverableToken(&_RenERC20LogicV1.TransactOpts, _token)
}

// BlacklistRecoverableToken is a paid mutator transaction binding the contract method 0xf65d901c.
//
// Solidity: function blacklistRecoverableToken(address _token) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) BlacklistRecoverableToken(_token common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.BlacklistRecoverableToken(&_RenERC20LogicV1.TransactOpts, _token)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _from, uint256 _amount) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Burn(opts *bind.TransactOpts, _from common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "burn", _from, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _from, uint256 _amount) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Burn(_from common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Burn(&_RenERC20LogicV1.TransactOpts, _from, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _from, uint256 _amount) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Burn(_from common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Burn(&_RenERC20LogicV1.TransactOpts, _from, _amount)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) ClaimOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "claimOwnership")
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) ClaimOwnership() (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.ClaimOwnership(&_RenERC20LogicV1.TransactOpts)
}

// ClaimOwnership is a paid mutator transaction binding the contract method 0x4e71e0c8.
//
// Solidity: function claimOwnership() returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) ClaimOwnership() (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.ClaimOwnership(&_RenERC20LogicV1.TransactOpts)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.DecreaseAllowance(&_RenERC20LogicV1.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.DecreaseAllowance(&_RenERC20LogicV1.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.IncreaseAllowance(&_RenERC20LogicV1.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.IncreaseAllowance(&_RenERC20LogicV1.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Initialize(opts *bind.TransactOpts, name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "initialize", name, symbol, decimals)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Initialize(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize(&_RenERC20LogicV1.TransactOpts, name, symbol, decimals)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Initialize(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize(&_RenERC20LogicV1.TransactOpts, name, symbol, decimals)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x53531e39.
//
// Solidity: function initialize(uint256 _chainId, address _nextOwner, uint256 _initialRate, string _version, string _name, string _symbol, uint8 _decimals) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Initialize0(opts *bind.TransactOpts, _chainId *big.Int, _nextOwner common.Address, _initialRate *big.Int, _version string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "initialize0", _chainId, _nextOwner, _initialRate, _version, _name, _symbol, _decimals)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x53531e39.
//
// Solidity: function initialize(uint256 _chainId, address _nextOwner, uint256 _initialRate, string _version, string _name, string _symbol, uint8 _decimals) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Initialize0(_chainId *big.Int, _nextOwner common.Address, _initialRate *big.Int, _version string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize0(&_RenERC20LogicV1.TransactOpts, _chainId, _nextOwner, _initialRate, _version, _name, _symbol, _decimals)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x53531e39.
//
// Solidity: function initialize(uint256 _chainId, address _nextOwner, uint256 _initialRate, string _version, string _name, string _symbol, uint8 _decimals) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Initialize0(_chainId *big.Int, _nextOwner common.Address, _initialRate *big.Int, _version string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize0(&_RenERC20LogicV1.TransactOpts, _chainId, _nextOwner, _initialRate, _version, _name, _symbol, _decimals)
}

// Initialize1 is a paid mutator transaction binding the contract method 0x5dca3452.
//
// Solidity: function initialize(uint256 _chainId, string _version, string _name, string _symbol, uint8 _decimals) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Initialize1(opts *bind.TransactOpts, _chainId *big.Int, _version string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "initialize1", _chainId, _version, _name, _symbol, _decimals)
}

// Initialize1 is a paid mutator transaction binding the contract method 0x5dca3452.
//
// Solidity: function initialize(uint256 _chainId, string _version, string _name, string _symbol, uint8 _decimals) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Initialize1(_chainId *big.Int, _version string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize1(&_RenERC20LogicV1.TransactOpts, _chainId, _version, _name, _symbol, _decimals)
}

// Initialize1 is a paid mutator transaction binding the contract method 0x5dca3452.
//
// Solidity: function initialize(uint256 _chainId, string _version, string _name, string _symbol, uint8 _decimals) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Initialize1(_chainId *big.Int, _version string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize1(&_RenERC20LogicV1.TransactOpts, _chainId, _version, _name, _symbol, _decimals)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Initialize2(opts *bind.TransactOpts, _nextOwner common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "initialize2", _nextOwner)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Initialize2(_nextOwner common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize2(&_RenERC20LogicV1.TransactOpts, _nextOwner)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _nextOwner) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Initialize2(_nextOwner common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize2(&_RenERC20LogicV1.TransactOpts, _nextOwner)
}

// Initialize3 is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _nextOwner, uint256 _initialRate) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Initialize3(opts *bind.TransactOpts, _nextOwner common.Address, _initialRate *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "initialize3", _nextOwner, _initialRate)
}

// Initialize3 is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _nextOwner, uint256 _initialRate) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Initialize3(_nextOwner common.Address, _initialRate *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize3(&_RenERC20LogicV1.TransactOpts, _nextOwner, _initialRate)
}

// Initialize3 is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _nextOwner, uint256 _initialRate) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Initialize3(_nextOwner common.Address, _initialRate *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Initialize3(&_RenERC20LogicV1.TransactOpts, _nextOwner, _initialRate)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Mint(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "mint", _to, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Mint(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Mint(&_RenERC20LogicV1.TransactOpts, _to, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Mint(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Mint(&_RenERC20LogicV1.TransactOpts, _to, _amount)
}

// Permit is a paid mutator transaction binding the contract method 0x8fcbaf0c.
//
// Solidity: function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Permit(opts *bind.TransactOpts, holder common.Address, spender common.Address, nonce *big.Int, expiry *big.Int, allowed bool, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "permit", holder, spender, nonce, expiry, allowed, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0x8fcbaf0c.
//
// Solidity: function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Permit(holder common.Address, spender common.Address, nonce *big.Int, expiry *big.Int, allowed bool, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Permit(&_RenERC20LogicV1.TransactOpts, holder, spender, nonce, expiry, allowed, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0x8fcbaf0c.
//
// Solidity: function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Permit(holder common.Address, spender common.Address, nonce *big.Int, expiry *big.Int, allowed bool, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Permit(&_RenERC20LogicV1.TransactOpts, holder, spender, nonce, expiry, allowed, v, r, s)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) RecoverTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "recoverTokens", _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.RecoverTokens(&_RenERC20LogicV1.TransactOpts, _token)
}

// RecoverTokens is a paid mutator transaction binding the contract method 0x16114acd.
//
// Solidity: function recoverTokens(address _token) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) RecoverTokens(_token common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.RecoverTokens(&_RenERC20LogicV1.TransactOpts, _token)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) RenounceOwnership() (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.RenounceOwnership(&_RenERC20LogicV1.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.RenounceOwnership(&_RenERC20LogicV1.TransactOpts)
}

// SetExchangeRate is a paid mutator transaction binding the contract method 0xdb068e0e.
//
// Solidity: function setExchangeRate(uint256 _nextRate) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) SetExchangeRate(opts *bind.TransactOpts, _nextRate *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "setExchangeRate", _nextRate)
}

// SetExchangeRate is a paid mutator transaction binding the contract method 0xdb068e0e.
//
// Solidity: function setExchangeRate(uint256 _nextRate) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) SetExchangeRate(_nextRate *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.SetExchangeRate(&_RenERC20LogicV1.TransactOpts, _nextRate)
}

// SetExchangeRate is a paid mutator transaction binding the contract method 0xdb068e0e.
//
// Solidity: function setExchangeRate(uint256 _nextRate) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) SetExchangeRate(_nextRate *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.SetExchangeRate(&_RenERC20LogicV1.TransactOpts, _nextRate)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Transfer(&_RenERC20LogicV1.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.Transfer(&_RenERC20LogicV1.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.TransferFrom(&_RenERC20LogicV1.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.TransferFrom(&_RenERC20LogicV1.TransactOpts, sender, recipient, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.TransferOwnership(&_RenERC20LogicV1.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RenERC20LogicV1 *RenERC20LogicV1TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RenERC20LogicV1.Contract.TransferOwnership(&_RenERC20LogicV1.TransactOpts, newOwner)
}

// RenERC20LogicV1ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the RenERC20LogicV1 contract.
type RenERC20LogicV1ApprovalIterator struct {
	Event *RenERC20LogicV1Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RenERC20LogicV1ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RenERC20LogicV1Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RenERC20LogicV1Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RenERC20LogicV1ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RenERC20LogicV1ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RenERC20LogicV1Approval represents a Approval event raised by the RenERC20LogicV1 contract.
type RenERC20LogicV1Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*RenERC20LogicV1ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _RenERC20LogicV1.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &RenERC20LogicV1ApprovalIterator{contract: _RenERC20LogicV1.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *RenERC20LogicV1Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _RenERC20LogicV1.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RenERC20LogicV1Approval)
				if err := _RenERC20LogicV1.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) ParseApproval(log types.Log) (*RenERC20LogicV1Approval, error) {
	event := new(RenERC20LogicV1Approval)
	if err := _RenERC20LogicV1.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RenERC20LogicV1LogRateChangedIterator is returned from FilterLogRateChanged and is used to iterate over the raw logs and unpacked data for LogRateChanged events raised by the RenERC20LogicV1 contract.
type RenERC20LogicV1LogRateChangedIterator struct {
	Event *RenERC20LogicV1LogRateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RenERC20LogicV1LogRateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RenERC20LogicV1LogRateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RenERC20LogicV1LogRateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RenERC20LogicV1LogRateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RenERC20LogicV1LogRateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RenERC20LogicV1LogRateChanged represents a LogRateChanged event raised by the RenERC20LogicV1 contract.
type RenERC20LogicV1LogRateChanged struct {
	Rate *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogRateChanged is a free log retrieval operation binding the contract event 0x9d6ef0d454e23e234e8c1cf70cee49a44226ffb036017442229a7a5bd1d0957e.
//
// Solidity: event LogRateChanged(uint256 indexed _rate)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) FilterLogRateChanged(opts *bind.FilterOpts, _rate []*big.Int) (*RenERC20LogicV1LogRateChangedIterator, error) {

	var _rateRule []interface{}
	for _, _rateItem := range _rate {
		_rateRule = append(_rateRule, _rateItem)
	}

	logs, sub, err := _RenERC20LogicV1.contract.FilterLogs(opts, "LogRateChanged", _rateRule)
	if err != nil {
		return nil, err
	}
	return &RenERC20LogicV1LogRateChangedIterator{contract: _RenERC20LogicV1.contract, event: "LogRateChanged", logs: logs, sub: sub}, nil
}

// WatchLogRateChanged is a free log subscription operation binding the contract event 0x9d6ef0d454e23e234e8c1cf70cee49a44226ffb036017442229a7a5bd1d0957e.
//
// Solidity: event LogRateChanged(uint256 indexed _rate)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) WatchLogRateChanged(opts *bind.WatchOpts, sink chan<- *RenERC20LogicV1LogRateChanged, _rate []*big.Int) (event.Subscription, error) {

	var _rateRule []interface{}
	for _, _rateItem := range _rate {
		_rateRule = append(_rateRule, _rateItem)
	}

	logs, sub, err := _RenERC20LogicV1.contract.WatchLogs(opts, "LogRateChanged", _rateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RenERC20LogicV1LogRateChanged)
				if err := _RenERC20LogicV1.contract.UnpackLog(event, "LogRateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogRateChanged is a log parse operation binding the contract event 0x9d6ef0d454e23e234e8c1cf70cee49a44226ffb036017442229a7a5bd1d0957e.
//
// Solidity: event LogRateChanged(uint256 indexed _rate)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) ParseLogRateChanged(log types.Log) (*RenERC20LogicV1LogRateChanged, error) {
	event := new(RenERC20LogicV1LogRateChanged)
	if err := _RenERC20LogicV1.contract.UnpackLog(event, "LogRateChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RenERC20LogicV1OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RenERC20LogicV1 contract.
type RenERC20LogicV1OwnershipTransferredIterator struct {
	Event *RenERC20LogicV1OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RenERC20LogicV1OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RenERC20LogicV1OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RenERC20LogicV1OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RenERC20LogicV1OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RenERC20LogicV1OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RenERC20LogicV1OwnershipTransferred represents a OwnershipTransferred event raised by the RenERC20LogicV1 contract.
type RenERC20LogicV1OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RenERC20LogicV1OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RenERC20LogicV1.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RenERC20LogicV1OwnershipTransferredIterator{contract: _RenERC20LogicV1.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RenERC20LogicV1OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RenERC20LogicV1.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RenERC20LogicV1OwnershipTransferred)
				if err := _RenERC20LogicV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) ParseOwnershipTransferred(log types.Log) (*RenERC20LogicV1OwnershipTransferred, error) {
	event := new(RenERC20LogicV1OwnershipTransferred)
	if err := _RenERC20LogicV1.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RenERC20LogicV1TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the RenERC20LogicV1 contract.
type RenERC20LogicV1TransferIterator struct {
	Event *RenERC20LogicV1Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RenERC20LogicV1TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RenERC20LogicV1Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RenERC20LogicV1Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RenERC20LogicV1TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RenERC20LogicV1TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RenERC20LogicV1Transfer represents a Transfer event raised by the RenERC20LogicV1 contract.
type RenERC20LogicV1Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*RenERC20LogicV1TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RenERC20LogicV1.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RenERC20LogicV1TransferIterator{contract: _RenERC20LogicV1.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *RenERC20LogicV1Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RenERC20LogicV1.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RenERC20LogicV1Transfer)
				if err := _RenERC20LogicV1.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_RenERC20LogicV1 *RenERC20LogicV1Filterer) ParseTransfer(log types.Log) (*RenERC20LogicV1Transfer, error) {
	event := new(RenERC20LogicV1Transfer)
	if err := _RenERC20LogicV1.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RenERC20ProxyABI is the input ABI used to generate the binding from.
const RenERC20ProxyABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// RenERC20ProxyBin is the compiled bytecode used for deploying new contracts.
var RenERC20ProxyBin = "0x608060405234801561001057600080fd5b5061097c806100206000396000f3fe6080604052600436106100705760003560e01c80638f2839701161004e5780638f2839701461015e578063cf7a1d7714610191578063d1f5789414610250578063f851a4401461030657610070565b80633659cfe61461007a5780634f1ef286146100ad5780635c60da1b1461012d575b61007861031b565b005b34801561008657600080fd5b506100786004803603602081101561009d57600080fd5b50356001600160a01b0316610335565b610078600480360360408110156100c357600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100ee57600080fd5b82018360208201111561010057600080fd5b8035906020019184600183028401116401000000008311171561012257600080fd5b50909250905061036f565b34801561013957600080fd5b5061014261041c565b604080516001600160a01b039092168252519081900360200190f35b34801561016a57600080fd5b506100786004803603602081101561018157600080fd5b50356001600160a01b0316610459565b610078600480360360608110156101a757600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156101db57600080fd5b8201836020820111156101ed57600080fd5b8035906020019184600183028401116401000000008311171561020f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610513945050505050565b6100786004803603604081101561026657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561029157600080fd5b8201836020820111156102a357600080fd5b803590602001918460018302840111640100000000831117156102c557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610599945050505050565b34801561031257600080fd5b506101426106d9565b610323610704565b61033361032e610764565b610789565b565b61033d6107ad565b6001600160a01b0316336001600160a01b031614156103645761035f816107d2565b61036c565b61036c61031b565b50565b6103776107ad565b6001600160a01b0316336001600160a01b0316141561040f57610399836107d2565b6000836001600160a01b031683836040518083838082843760405192019450600093509091505080830381855af49150503d80600081146103f6576040519150601f19603f3d011682016040523d82523d6000602084013e6103fb565b606091505b505090508061040957600080fd5b50610417565b61041761031b565b505050565b60006104266107ad565b6001600160a01b0316336001600160a01b0316141561044e57610447610764565b9050610456565b61045661031b565b90565b6104616107ad565b6001600160a01b0316336001600160a01b03161415610364576001600160a01b0381166104bf5760405162461bcd60e51b81526004018080602001828103825260368152602001806108d76036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104e86107ad565b604080516001600160a01b03928316815291841660208301528051918290030190a161035f81610812565b600061051d610764565b6001600160a01b03161461053057600080fd5b61053a8382610599565b604080517232b4b8189c9b1b97383937bc3c9730b236b4b760691b815290519081900360130190207fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036000199091011461059057fe5b61041782610812565b60006105a3610764565b6001600160a01b0316146105b657600080fd5b604080517f656970313936372e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c0190207f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6000199091011461061657fe5b61061f82610836565b8051156106d5576000826001600160a01b0316826040518082805190602001908083835b602083106106625780518252601f199092019160209182019101610643565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146106c2576040519150601f19603f3d011682016040523d82523d6000602084013e6106c7565b606091505b505090508061041757600080fd5b5050565b60006106e36107ad565b6001600160a01b0316336001600160a01b0316141561044e576104476107ad565b61070c6107ad565b6001600160a01b0316336001600160a01b0316141561075c5760405162461bcd60e51b81526004018080602001828103825260328152602001806108a56032913960400191505060405180910390fd5b610333610333565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156107a8573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6107db81610836565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b61083f8161089e565b61087a5760405162461bcd60e51b815260040180806020018281038252603b81526020018061090d603b913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b15159056fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a265627a7a72315820786916546cc099908af61dde08788eb52e0a8aa010c198be4abdb7977422297464736f6c63430005100032"

// DeployRenERC20Proxy deploys a new Ethereum contract, binding an instance of RenERC20Proxy to it.
func DeployRenERC20Proxy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RenERC20Proxy, error) {
	parsed, err := abi.JSON(strings.NewReader(RenERC20ProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RenERC20ProxyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RenERC20Proxy{RenERC20ProxyCaller: RenERC20ProxyCaller{contract: contract}, RenERC20ProxyTransactor: RenERC20ProxyTransactor{contract: contract}, RenERC20ProxyFilterer: RenERC20ProxyFilterer{contract: contract}}, nil
}

// RenERC20Proxy is an auto generated Go binding around an Ethereum contract.
type RenERC20Proxy struct {
	RenERC20ProxyCaller     // Read-only binding to the contract
	RenERC20ProxyTransactor // Write-only binding to the contract
	RenERC20ProxyFilterer   // Log filterer for contract events
}

// RenERC20ProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type RenERC20ProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RenERC20ProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RenERC20ProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RenERC20ProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RenERC20ProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RenERC20ProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RenERC20ProxySession struct {
	Contract     *RenERC20Proxy    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RenERC20ProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RenERC20ProxyCallerSession struct {
	Contract *RenERC20ProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// RenERC20ProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RenERC20ProxyTransactorSession struct {
	Contract     *RenERC20ProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// RenERC20ProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type RenERC20ProxyRaw struct {
	Contract *RenERC20Proxy // Generic contract binding to access the raw methods on
}

// RenERC20ProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RenERC20ProxyCallerRaw struct {
	Contract *RenERC20ProxyCaller // Generic read-only contract binding to access the raw methods on
}

// RenERC20ProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RenERC20ProxyTransactorRaw struct {
	Contract *RenERC20ProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRenERC20Proxy creates a new instance of RenERC20Proxy, bound to a specific deployed contract.
func NewRenERC20Proxy(address common.Address, backend bind.ContractBackend) (*RenERC20Proxy, error) {
	contract, err := bindRenERC20Proxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RenERC20Proxy{RenERC20ProxyCaller: RenERC20ProxyCaller{contract: contract}, RenERC20ProxyTransactor: RenERC20ProxyTransactor{contract: contract}, RenERC20ProxyFilterer: RenERC20ProxyFilterer{contract: contract}}, nil
}

// NewRenERC20ProxyCaller creates a new read-only instance of RenERC20Proxy, bound to a specific deployed contract.
func NewRenERC20ProxyCaller(address common.Address, caller bind.ContractCaller) (*RenERC20ProxyCaller, error) {
	contract, err := bindRenERC20Proxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RenERC20ProxyCaller{contract: contract}, nil
}

// NewRenERC20ProxyTransactor creates a new write-only instance of RenERC20Proxy, bound to a specific deployed contract.
func NewRenERC20ProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*RenERC20ProxyTransactor, error) {
	contract, err := bindRenERC20Proxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RenERC20ProxyTransactor{contract: contract}, nil
}

// NewRenERC20ProxyFilterer creates a new log filterer instance of RenERC20Proxy, bound to a specific deployed contract.
func NewRenERC20ProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*RenERC20ProxyFilterer, error) {
	contract, err := bindRenERC20Proxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RenERC20ProxyFilterer{contract: contract}, nil
}

// bindRenERC20Proxy binds a generic wrapper to an already deployed contract.
func bindRenERC20Proxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RenERC20ProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RenERC20Proxy *RenERC20ProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RenERC20Proxy.Contract.RenERC20ProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RenERC20Proxy *RenERC20ProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.RenERC20ProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RenERC20Proxy *RenERC20ProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.RenERC20ProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RenERC20Proxy *RenERC20ProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RenERC20Proxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RenERC20Proxy *RenERC20ProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RenERC20Proxy *RenERC20ProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.contract.Transact(opts, method, params...)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_RenERC20Proxy *RenERC20ProxyTransactor) Admin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenERC20Proxy.contract.Transact(opts, "admin")
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_RenERC20Proxy *RenERC20ProxySession) Admin() (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Admin(&_RenERC20Proxy.TransactOpts)
}

// Admin is a paid mutator transaction binding the contract method 0xf851a440.
//
// Solidity: function admin() returns(address)
func (_RenERC20Proxy *RenERC20ProxyTransactorSession) Admin() (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Admin(&_RenERC20Proxy.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_RenERC20Proxy *RenERC20ProxyTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _RenERC20Proxy.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_RenERC20Proxy *RenERC20ProxySession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.ChangeAdmin(&_RenERC20Proxy.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_RenERC20Proxy *RenERC20ProxyTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.ChangeAdmin(&_RenERC20Proxy.TransactOpts, newAdmin)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_RenERC20Proxy *RenERC20ProxyTransactor) Implementation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenERC20Proxy.contract.Transact(opts, "implementation")
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_RenERC20Proxy *RenERC20ProxySession) Implementation() (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Implementation(&_RenERC20Proxy.TransactOpts)
}

// Implementation is a paid mutator transaction binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() returns(address)
func (_RenERC20Proxy *RenERC20ProxyTransactorSession) Implementation() (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Implementation(&_RenERC20Proxy.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_RenERC20Proxy *RenERC20ProxyTransactor) Initialize(opts *bind.TransactOpts, _logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.contract.Transact(opts, "initialize", _logic, _admin, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_RenERC20Proxy *RenERC20ProxySession) Initialize(_logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Initialize(&_RenERC20Proxy.TransactOpts, _logic, _admin, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf7a1d77.
//
// Solidity: function initialize(address _logic, address _admin, bytes _data) payable returns()
func (_RenERC20Proxy *RenERC20ProxyTransactorSession) Initialize(_logic common.Address, _admin common.Address, _data []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Initialize(&_RenERC20Proxy.TransactOpts, _logic, _admin, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_RenERC20Proxy *RenERC20ProxyTransactor) Initialize0(opts *bind.TransactOpts, _logic common.Address, _data []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.contract.Transact(opts, "initialize0", _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_RenERC20Proxy *RenERC20ProxySession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Initialize0(&_RenERC20Proxy.TransactOpts, _logic, _data)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xd1f57894.
//
// Solidity: function initialize(address _logic, bytes _data) payable returns()
func (_RenERC20Proxy *RenERC20ProxyTransactorSession) Initialize0(_logic common.Address, _data []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Initialize0(&_RenERC20Proxy.TransactOpts, _logic, _data)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RenERC20Proxy *RenERC20ProxyTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RenERC20Proxy.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RenERC20Proxy *RenERC20ProxySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.UpgradeTo(&_RenERC20Proxy.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RenERC20Proxy *RenERC20ProxyTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.UpgradeTo(&_RenERC20Proxy.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RenERC20Proxy *RenERC20ProxyTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RenERC20Proxy *RenERC20ProxySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.UpgradeToAndCall(&_RenERC20Proxy.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RenERC20Proxy *RenERC20ProxyTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.UpgradeToAndCall(&_RenERC20Proxy.TransactOpts, newImplementation, data)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RenERC20Proxy *RenERC20ProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RenERC20Proxy *RenERC20ProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Fallback(&_RenERC20Proxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_RenERC20Proxy *RenERC20ProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _RenERC20Proxy.Contract.Fallback(&_RenERC20Proxy.TransactOpts, calldata)
}

// RenERC20ProxyAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RenERC20Proxy contract.
type RenERC20ProxyAdminChangedIterator struct {
	Event *RenERC20ProxyAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RenERC20ProxyAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RenERC20ProxyAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RenERC20ProxyAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RenERC20ProxyAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RenERC20ProxyAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RenERC20ProxyAdminChanged represents a AdminChanged event raised by the RenERC20Proxy contract.
type RenERC20ProxyAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RenERC20Proxy *RenERC20ProxyFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RenERC20ProxyAdminChangedIterator, error) {

	logs, sub, err := _RenERC20Proxy.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RenERC20ProxyAdminChangedIterator{contract: _RenERC20Proxy.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RenERC20Proxy *RenERC20ProxyFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RenERC20ProxyAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RenERC20Proxy.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RenERC20ProxyAdminChanged)
				if err := _RenERC20Proxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RenERC20Proxy *RenERC20ProxyFilterer) ParseAdminChanged(log types.Log) (*RenERC20ProxyAdminChanged, error) {
	event := new(RenERC20ProxyAdminChanged)
	if err := _RenERC20Proxy.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RenERC20ProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RenERC20Proxy contract.
type RenERC20ProxyUpgradedIterator struct {
	Event *RenERC20ProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RenERC20ProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RenERC20ProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RenERC20ProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RenERC20ProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RenERC20ProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RenERC20ProxyUpgraded represents a Upgraded event raised by the RenERC20Proxy contract.
type RenERC20ProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RenERC20Proxy *RenERC20ProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RenERC20ProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RenERC20Proxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RenERC20ProxyUpgradedIterator{contract: _RenERC20Proxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RenERC20Proxy *RenERC20ProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RenERC20ProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RenERC20Proxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RenERC20ProxyUpgraded)
				if err := _RenERC20Proxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RenERC20Proxy *RenERC20ProxyFilterer) ParseUpgraded(log types.Log) (*RenERC20ProxyUpgraded, error) {
	event := new(RenERC20ProxyUpgraded)
	if err := _RenERC20Proxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RenProxyAdminABI is the input ABI used to generate the binding from.
const RenProxyAdminABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractAdminUpgradeabilityProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// RenProxyAdminBin is the compiled bytecode used for deploying new contracts.
var RenProxyAdminBin = "0x60806040819052600080546001600160a01b03191633178082556001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36106d5806100576000396000f3fe6080604052600436106100865760003560e01c80638f32d59b116100595780638f32d59b146101415780639623609d1461016a57806399a88ec414610229578063f2fde38b14610264578063f3b7dead1461029757610086565b8063204e1c7a1461008b578063715018a6146100da5780637eff275e146100f15780638da5cb5b1461012c575b600080fd5b34801561009757600080fd5b506100be600480360360208110156100ae57600080fd5b50356001600160a01b03166102ca565b604080516001600160a01b039092168252519081900360200190f35b3480156100e657600080fd5b506100ef61035c565b005b3480156100fd57600080fd5b506100ef6004803603604081101561011457600080fd5b506001600160a01b03813581169160200135166103b7565b34801561013857600080fd5b506100be61043c565b34801561014d57600080fd5b5061015661044b565b604080519115158252519081900360200190f35b6100ef6004803603606081101561018057600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156101b457600080fd5b8201836020820111156101c657600080fd5b803590602001918460018302840111640100000000831117156101e857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061045c945050505050565b34801561023557600080fd5b506100ef6004803603604081101561024c57600080fd5b506001600160a01b038135811691602001351661054d565b34801561027057600080fd5b506100ef6004803603602081101561028757600080fd5b50356001600160a01b03166105b6565b3480156102a357600080fd5b506100be600480360360208110156102ba57600080fd5b50356001600160a01b03166105d3565b6000806060836001600160a01b03166040518080635c60da1b60e01b8152506004019050600060405180830381855afa9150503d8060008114610329576040519150601f19603f3d011682016040523d82523d6000602084013e61032e565b606091505b50915091508161033d57600080fd5b80806020019051602081101561035257600080fd5b5051949350505050565b61036461044b565b61036d57600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6103bf61044b565b6103c857600080fd5b816001600160a01b0316638f283970826040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561042057600080fd5b505af1158015610434573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b61046461044b565b61046d57600080fd5b826001600160a01b0316634f1ef2863484846040518463ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104e35781810151838201526020016104cb565b50505050905090810190601f1680156105105780820380516001836020036101000a031916815260200191505b5093505050506000604051808303818588803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b5050505050505050565b61055561044b565b61055e57600080fd5b816001600160a01b0316633659cfe6826040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561042057600080fd5b6105be61044b565b6105c757600080fd5b6105d081610632565b50565b6000806060836001600160a01b031660405180806303e1469160e61b8152506004019050600060405180830381855afa9150503d8060008114610329576040519150601f19603f3d011682016040523d82523d6000602084013e61032e565b6001600160a01b03811661064557600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fea265627a7a72315820b78cce0a70950c6d79c81f4c592213e338c4a7ff452eee5f99e28a3adbc155bb64736f6c63430005100032"

// DeployRenProxyAdmin deploys a new Ethereum contract, binding an instance of RenProxyAdmin to it.
func DeployRenProxyAdmin(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RenProxyAdmin, error) {
	parsed, err := abi.JSON(strings.NewReader(RenProxyAdminABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RenProxyAdminBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RenProxyAdmin{RenProxyAdminCaller: RenProxyAdminCaller{contract: contract}, RenProxyAdminTransactor: RenProxyAdminTransactor{contract: contract}, RenProxyAdminFilterer: RenProxyAdminFilterer{contract: contract}}, nil
}

// RenProxyAdmin is an auto generated Go binding around an Ethereum contract.
type RenProxyAdmin struct {
	RenProxyAdminCaller     // Read-only binding to the contract
	RenProxyAdminTransactor // Write-only binding to the contract
	RenProxyAdminFilterer   // Log filterer for contract events
}

// RenProxyAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type RenProxyAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RenProxyAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RenProxyAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RenProxyAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RenProxyAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RenProxyAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RenProxyAdminSession struct {
	Contract     *RenProxyAdmin    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RenProxyAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RenProxyAdminCallerSession struct {
	Contract *RenProxyAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// RenProxyAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RenProxyAdminTransactorSession struct {
	Contract     *RenProxyAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// RenProxyAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type RenProxyAdminRaw struct {
	Contract *RenProxyAdmin // Generic contract binding to access the raw methods on
}

// RenProxyAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RenProxyAdminCallerRaw struct {
	Contract *RenProxyAdminCaller // Generic read-only contract binding to access the raw methods on
}

// RenProxyAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RenProxyAdminTransactorRaw struct {
	Contract *RenProxyAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRenProxyAdmin creates a new instance of RenProxyAdmin, bound to a specific deployed contract.
func NewRenProxyAdmin(address common.Address, backend bind.ContractBackend) (*RenProxyAdmin, error) {
	contract, err := bindRenProxyAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RenProxyAdmin{RenProxyAdminCaller: RenProxyAdminCaller{contract: contract}, RenProxyAdminTransactor: RenProxyAdminTransactor{contract: contract}, RenProxyAdminFilterer: RenProxyAdminFilterer{contract: contract}}, nil
}

// NewRenProxyAdminCaller creates a new read-only instance of RenProxyAdmin, bound to a specific deployed contract.
func NewRenProxyAdminCaller(address common.Address, caller bind.ContractCaller) (*RenProxyAdminCaller, error) {
	contract, err := bindRenProxyAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RenProxyAdminCaller{contract: contract}, nil
}

// NewRenProxyAdminTransactor creates a new write-only instance of RenProxyAdmin, bound to a specific deployed contract.
func NewRenProxyAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*RenProxyAdminTransactor, error) {
	contract, err := bindRenProxyAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RenProxyAdminTransactor{contract: contract}, nil
}

// NewRenProxyAdminFilterer creates a new log filterer instance of RenProxyAdmin, bound to a specific deployed contract.
func NewRenProxyAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*RenProxyAdminFilterer, error) {
	contract, err := bindRenProxyAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RenProxyAdminFilterer{contract: contract}, nil
}

// bindRenProxyAdmin binds a generic wrapper to an already deployed contract.
func bindRenProxyAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RenProxyAdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RenProxyAdmin *RenProxyAdminRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RenProxyAdmin.Contract.RenProxyAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RenProxyAdmin *RenProxyAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.RenProxyAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RenProxyAdmin *RenProxyAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.RenProxyAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RenProxyAdmin *RenProxyAdminCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RenProxyAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RenProxyAdmin *RenProxyAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RenProxyAdmin *RenProxyAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.contract.Transact(opts, method, params...)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_RenProxyAdmin *RenProxyAdminCaller) GetProxyAdmin(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _RenProxyAdmin.contract.Call(opts, out, "getProxyAdmin", proxy)
	return *ret0, err
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_RenProxyAdmin *RenProxyAdminSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _RenProxyAdmin.Contract.GetProxyAdmin(&_RenProxyAdmin.CallOpts, proxy)
}

// GetProxyAdmin is a free data retrieval call binding the contract method 0xf3b7dead.
//
// Solidity: function getProxyAdmin(address proxy) view returns(address)
func (_RenProxyAdmin *RenProxyAdminCallerSession) GetProxyAdmin(proxy common.Address) (common.Address, error) {
	return _RenProxyAdmin.Contract.GetProxyAdmin(&_RenProxyAdmin.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_RenProxyAdmin *RenProxyAdminCaller) GetProxyImplementation(opts *bind.CallOpts, proxy common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _RenProxyAdmin.contract.Call(opts, out, "getProxyImplementation", proxy)
	return *ret0, err
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_RenProxyAdmin *RenProxyAdminSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _RenProxyAdmin.Contract.GetProxyImplementation(&_RenProxyAdmin.CallOpts, proxy)
}

// GetProxyImplementation is a free data retrieval call binding the contract method 0x204e1c7a.
//
// Solidity: function getProxyImplementation(address proxy) view returns(address)
func (_RenProxyAdmin *RenProxyAdminCallerSession) GetProxyImplementation(proxy common.Address) (common.Address, error) {
	return _RenProxyAdmin.Contract.GetProxyImplementation(&_RenProxyAdmin.CallOpts, proxy)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_RenProxyAdmin *RenProxyAdminCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _RenProxyAdmin.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_RenProxyAdmin *RenProxyAdminSession) IsOwner() (bool, error) {
	return _RenProxyAdmin.Contract.IsOwner(&_RenProxyAdmin.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_RenProxyAdmin *RenProxyAdminCallerSession) IsOwner() (bool, error) {
	return _RenProxyAdmin.Contract.IsOwner(&_RenProxyAdmin.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RenProxyAdmin *RenProxyAdminCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _RenProxyAdmin.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RenProxyAdmin *RenProxyAdminSession) Owner() (common.Address, error) {
	return _RenProxyAdmin.Contract.Owner(&_RenProxyAdmin.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RenProxyAdmin *RenProxyAdminCallerSession) Owner() (common.Address, error) {
	return _RenProxyAdmin.Contract.Owner(&_RenProxyAdmin.CallOpts)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_RenProxyAdmin *RenProxyAdminTransactor) ChangeProxyAdmin(opts *bind.TransactOpts, proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _RenProxyAdmin.contract.Transact(opts, "changeProxyAdmin", proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_RenProxyAdmin *RenProxyAdminSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.ChangeProxyAdmin(&_RenProxyAdmin.TransactOpts, proxy, newAdmin)
}

// ChangeProxyAdmin is a paid mutator transaction binding the contract method 0x7eff275e.
//
// Solidity: function changeProxyAdmin(address proxy, address newAdmin) returns()
func (_RenProxyAdmin *RenProxyAdminTransactorSession) ChangeProxyAdmin(proxy common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.ChangeProxyAdmin(&_RenProxyAdmin.TransactOpts, proxy, newAdmin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RenProxyAdmin *RenProxyAdminTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RenProxyAdmin.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RenProxyAdmin *RenProxyAdminSession) RenounceOwnership() (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.RenounceOwnership(&_RenProxyAdmin.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RenProxyAdmin *RenProxyAdminTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.RenounceOwnership(&_RenProxyAdmin.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RenProxyAdmin *RenProxyAdminTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RenProxyAdmin.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RenProxyAdmin *RenProxyAdminSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.TransferOwnership(&_RenProxyAdmin.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RenProxyAdmin *RenProxyAdminTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.TransferOwnership(&_RenProxyAdmin.TransactOpts, newOwner)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_RenProxyAdmin *RenProxyAdminTransactor) Upgrade(opts *bind.TransactOpts, proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _RenProxyAdmin.contract.Transact(opts, "upgrade", proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_RenProxyAdmin *RenProxyAdminSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.Upgrade(&_RenProxyAdmin.TransactOpts, proxy, implementation)
}

// Upgrade is a paid mutator transaction binding the contract method 0x99a88ec4.
//
// Solidity: function upgrade(address proxy, address implementation) returns()
func (_RenProxyAdmin *RenProxyAdminTransactorSession) Upgrade(proxy common.Address, implementation common.Address) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.Upgrade(&_RenProxyAdmin.TransactOpts, proxy, implementation)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_RenProxyAdmin *RenProxyAdminTransactor) UpgradeAndCall(opts *bind.TransactOpts, proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _RenProxyAdmin.contract.Transact(opts, "upgradeAndCall", proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_RenProxyAdmin *RenProxyAdminSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.UpgradeAndCall(&_RenProxyAdmin.TransactOpts, proxy, implementation, data)
}

// UpgradeAndCall is a paid mutator transaction binding the contract method 0x9623609d.
//
// Solidity: function upgradeAndCall(address proxy, address implementation, bytes data) payable returns()
func (_RenProxyAdmin *RenProxyAdminTransactorSession) UpgradeAndCall(proxy common.Address, implementation common.Address, data []byte) (*types.Transaction, error) {
	return _RenProxyAdmin.Contract.UpgradeAndCall(&_RenProxyAdmin.TransactOpts, proxy, implementation, data)
}

// RenProxyAdminOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RenProxyAdmin contract.
type RenProxyAdminOwnershipTransferredIterator struct {
	Event *RenProxyAdminOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RenProxyAdminOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RenProxyAdminOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RenProxyAdminOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RenProxyAdminOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RenProxyAdminOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RenProxyAdminOwnershipTransferred represents a OwnershipTransferred event raised by the RenProxyAdmin contract.
type RenProxyAdminOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RenProxyAdmin *RenProxyAdminFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RenProxyAdminOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RenProxyAdmin.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RenProxyAdminOwnershipTransferredIterator{contract: _RenProxyAdmin.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RenProxyAdmin *RenProxyAdminFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RenProxyAdminOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RenProxyAdmin.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RenProxyAdminOwnershipTransferred)
				if err := _RenProxyAdmin.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RenProxyAdmin *RenProxyAdminFilterer) ParseOwnershipTransferred(log types.Log) (*RenProxyAdminOwnershipTransferred, error) {
	event := new(RenProxyAdminOwnershipTransferred)
	if err := _RenProxyAdmin.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RolesABI is the input ABI used to generate the binding from.
const RolesABI = "[]"

// RolesBin is the compiled bytecode used for deploying new contracts.
var RolesBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820054f16a30e77727c688555cad87e1bc21cc112a248f26325d9b001b684095beb64736f6c63430005100032"

// DeployRoles deploys a new Ethereum contract, binding an instance of Roles to it.
func DeployRoles(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Roles, error) {
	parsed, err := abi.JSON(strings.NewReader(RolesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RolesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Roles{RolesCaller: RolesCaller{contract: contract}, RolesTransactor: RolesTransactor{contract: contract}, RolesFilterer: RolesFilterer{contract: contract}}, nil
}

// Roles is an auto generated Go binding around an Ethereum contract.
type Roles struct {
	RolesCaller     // Read-only binding to the contract
	RolesTransactor // Write-only binding to the contract
	RolesFilterer   // Log filterer for contract events
}

// RolesCaller is an auto generated read-only Go binding around an Ethereum contract.
type RolesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RolesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RolesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RolesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RolesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RolesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RolesSession struct {
	Contract     *Roles            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RolesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RolesCallerSession struct {
	Contract *RolesCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// RolesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RolesTransactorSession struct {
	Contract     *RolesTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RolesRaw is an auto generated low-level Go binding around an Ethereum contract.
type RolesRaw struct {
	Contract *Roles // Generic contract binding to access the raw methods on
}

// RolesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RolesCallerRaw struct {
	Contract *RolesCaller // Generic read-only contract binding to access the raw methods on
}

// RolesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RolesTransactorRaw struct {
	Contract *RolesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRoles creates a new instance of Roles, bound to a specific deployed contract.
func NewRoles(address common.Address, backend bind.ContractBackend) (*Roles, error) {
	contract, err := bindRoles(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Roles{RolesCaller: RolesCaller{contract: contract}, RolesTransactor: RolesTransactor{contract: contract}, RolesFilterer: RolesFilterer{contract: contract}}, nil
}

// NewRolesCaller creates a new read-only instance of Roles, bound to a specific deployed contract.
func NewRolesCaller(address common.Address, caller bind.ContractCaller) (*RolesCaller, error) {
	contract, err := bindRoles(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RolesCaller{contract: contract}, nil
}

// NewRolesTransactor creates a new write-only instance of Roles, bound to a specific deployed contract.
func NewRolesTransactor(address common.Address, transactor bind.ContractTransactor) (*RolesTransactor, error) {
	contract, err := bindRoles(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RolesTransactor{contract: contract}, nil
}

// NewRolesFilterer creates a new log filterer instance of Roles, bound to a specific deployed contract.
func NewRolesFilterer(address common.Address, filterer bind.ContractFilterer) (*RolesFilterer, error) {
	contract, err := bindRoles(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RolesFilterer{contract: contract}, nil
}

// bindRoles binds a generic wrapper to an already deployed contract.
func bindRoles(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RolesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Roles *RolesRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Roles.Contract.RolesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Roles *RolesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Roles.Contract.RolesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Roles *RolesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Roles.Contract.RolesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Roles *RolesCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Roles.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Roles *RolesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Roles.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Roles *RolesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Roles.Contract.contract.Transact(opts, method, params...)
}

// SafeERC20ABI is the input ABI used to generate the binding from.
const SafeERC20ABI = "[]"

// SafeERC20Bin is the compiled bytecode used for deploying new contracts.
var SafeERC20Bin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820befab17ff76ffc895034e606861d7666a486740c9187387ee79d592e53423c6964736f6c63430005100032"

// DeploySafeERC20 deploys a new Ethereum contract, binding an instance of SafeERC20 to it.
func DeploySafeERC20(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeERC20Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeERC20{SafeERC20Caller: SafeERC20Caller{contract: contract}, SafeERC20Transactor: SafeERC20Transactor{contract: contract}, SafeERC20Filterer: SafeERC20Filterer{contract: contract}}, nil
}

// SafeERC20 is an auto generated Go binding around an Ethereum contract.
type SafeERC20 struct {
	SafeERC20Caller     // Read-only binding to the contract
	SafeERC20Transactor // Write-only binding to the contract
	SafeERC20Filterer   // Log filterer for contract events
}

// SafeERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type SafeERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeERC20Session struct {
	Contract     *SafeERC20        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeERC20CallerSession struct {
	Contract *SafeERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SafeERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeERC20TransactorSession struct {
	Contract     *SafeERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SafeERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type SafeERC20Raw struct {
	Contract *SafeERC20 // Generic contract binding to access the raw methods on
}

// SafeERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeERC20CallerRaw struct {
	Contract *SafeERC20Caller // Generic read-only contract binding to access the raw methods on
}

// SafeERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeERC20TransactorRaw struct {
	Contract *SafeERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeERC20 creates a new instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20(address common.Address, backend bind.ContractBackend) (*SafeERC20, error) {
	contract, err := bindSafeERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeERC20{SafeERC20Caller: SafeERC20Caller{contract: contract}, SafeERC20Transactor: SafeERC20Transactor{contract: contract}, SafeERC20Filterer: SafeERC20Filterer{contract: contract}}, nil
}

// NewSafeERC20Caller creates a new read-only instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Caller(address common.Address, caller bind.ContractCaller) (*SafeERC20Caller, error) {
	contract, err := bindSafeERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Caller{contract: contract}, nil
}

// NewSafeERC20Transactor creates a new write-only instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*SafeERC20Transactor, error) {
	contract, err := bindSafeERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Transactor{contract: contract}, nil
}

// NewSafeERC20Filterer creates a new log filterer instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*SafeERC20Filterer, error) {
	contract, err := bindSafeERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Filterer{contract: contract}, nil
}

// bindSafeERC20 binds a generic wrapper to an already deployed contract.
func bindSafeERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeERC20 *SafeERC20Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeERC20.Contract.SafeERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeERC20 *SafeERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeERC20.Contract.SafeERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeERC20 *SafeERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeERC20.Contract.SafeERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeERC20 *SafeERC20CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeERC20 *SafeERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeERC20 *SafeERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeERC20.Contract.contract.Transact(opts, method, params...)
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBin is the compiled bytecode used for deploying new contracts.
var SafeMathBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820e44126cf640c35d2e94958d2488927bdbca7ef60c490a59b4936d06c06f8316264736f6c63430005100032"

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// StandaloneERC20ABI is the input ABI used to generate the binding from.
const StandaloneERC20ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pausers\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialHolder\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pausers\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// StandaloneERC20Bin is the compiled bytecode used for deploying new contracts.
var StandaloneERC20Bin = "0x60806040526121aa806100136000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80635c975abb116100de578063983b2d5611610097578063a9059cbb11610071578063a9059cbb146109a2578063aa271e1a146109ce578063c4d66de8146109f4578063dd62ed3e14610a1a57610173565b8063983b2d5614610948578063986502751461096e578063a457c2d71461097657610173565b80635c975abb146108dc5780636ef8d66d146108e457806370a08231146108ec57806382dc1ec4146109125780638456cb591461093857806395d89b411461094057610173565b8063313ce56711610130578063313ce567146105ed578063395093511461060b5780633f4ba83a1461063757806340c10f191461063f57806346fbf68e1461066b57806348be01c61461069157610173565b806306fdde0314610178578063095ea7b3146101f55780631624f6c61461023557806318160ddd1461036557806323b872dd1461037f57806331392b4a146103b5575b600080fd5b610180610a48565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102216004803603604081101561020b57600080fd5b506001600160a01b038135169060200135610adf565b604080519115158252519081900360200190f35b6103636004803603606081101561024b57600080fd5b810190602081018135600160201b81111561026557600080fd5b82018360208201111561027757600080fd5b803590602001918460018302840111600160201b8311171561029857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156102ea57600080fd5b8201836020820111156102fc57600080fd5b803590602001918460018302840111600160201b8311171561031d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff169150610b3f9050565b005b61036d610c1b565b60408051918252519081900360200190f35b6102216004803603606081101561039557600080fd5b506001600160a01b03813581169160208101359091169060400135610c21565b610363600480360360a08110156103cb57600080fd5b810190602081018135600160201b8111156103e557600080fd5b8201836020820111156103f757600080fd5b803590602001918460018302840111600160201b8311171561041857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561046a57600080fd5b82018360208201111561047c57600080fd5b803590602001918460018302840111600160201b8311171561049d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929560ff853516959094909350604081019250602001359050600160201b8111156104fa57600080fd5b82018360208201111561050c57600080fd5b803590602001918460208302840111600160201b8311171561052d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561057c57600080fd5b82018360208201111561058e57600080fd5b803590602001918460208302840111600160201b831117156105af57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610c83945050505050565b6105f5610dbb565b6040805160ff9092168252519081900360200190f35b6102216004803603604081101561062157600080fd5b506001600160a01b038135169060200135610dc4565b610363610e1d565b6102216004803603604081101561065557600080fd5b506001600160a01b038135169060200135610f08565b6102216004803603602081101561068157600080fd5b50356001600160a01b0316610f68565b610363600480360360e08110156106a757600080fd5b810190602081018135600160201b8111156106c157600080fd5b8201836020820111156106d357600080fd5b803590602001918460018302840111600160201b831117156106f457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561074657600080fd5b82018360208201111561075857600080fd5b803590602001918460018302840111600160201b8311171561077957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929560ff853516956020860135956001600160a01b0360408201351695509193509150608081019060600135600160201b8111156107e957600080fd5b8201836020820111156107fb57600080fd5b803590602001918460208302840111600160201b8311171561081c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561086b57600080fd5b82018360208201111561087d57600080fd5b803590602001918460208302840111600160201b8311171561089e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610f82945050505050565b6102216110ac565b6103636110b6565b61036d6004803603602081101561090257600080fd5b50356001600160a01b03166110c8565b6103636004803603602081101561092857600080fd5b50356001600160a01b03166110e3565b610363611135565b6101806111fe565b6103636004803603602081101561095e57600080fd5b50356001600160a01b031661125f565b6103636112ae565b6102216004803603604081101561098c57600080fd5b506001600160a01b0381351690602001356112be565b610221600480360360408110156109b857600080fd5b506001600160a01b038135169060200135611317565b610221600480360360208110156109e457600080fd5b50356001600160a01b0316611370565b61036360048036036020811015610a0a57600080fd5b50356001600160a01b0316611383565b61036d60048036036040811015610a3057600080fd5b506001600160a01b038135811691602001351661142f565b60338054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ad45780601f10610aa957610100808354040283529160200191610ad4565b820191906000526020600020905b815481529060010190602001808311610ab757829003601f168201915b505050505090505b90565b6101355460009060ff1615610b2e576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610b38838361145a565b9392505050565b600054610100900460ff1680610b585750610b5861146e565b80610b66575060005460ff16155b610ba15760405162461bcd60e51b815260040180806020018281038252602e8152602001806120da602e913960400191505060405180910390fd5b600054610100900460ff16158015610bcc576000805460ff1961ff0019909116610100171660011790555b8351610bdf906033906020870190611f0b565b508251610bf3906034906020860190611f0b565b506035805460ff191660ff84161790558015610c15576000805461ff00191690555b50505050565b606a5490565b6101355460009060ff1615610c70576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610c7b848484611474565b949350505050565b600054610100900460ff1680610c9c5750610c9c61146e565b80610caa575060005460ff16155b610ce55760405162461bcd60e51b815260040180806020018281038252602e8152602001806120da602e913960400191505060405180910390fd5b600054610100900460ff16158015610d10576000805460ff1961ff0019909116610100171660011790555b610d1b868686610b3f565b610d2430611501565b610d2d30611597565b610d3630611383565b610d3f306115df565b60005b8351811015610d6f57610d67848281518110610d5a57fe5b6020026020010151611628565b600101610d42565b5060005b8251811015610da057610d98838281518110610d8b57fe5b6020026020010151611670565b600101610d73565b508015610db3576000805461ff00191690555b505050505050565b60355460ff1690565b6101355460009060ff1615610e13576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610b3883836116b9565b610e2d610e2861170d565b610f68565b610e685760405162461bcd60e51b8152600401808060200182810382526030815260200180611fc76030913960400191505060405180910390fd5b6101355460ff16610eb7576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b610135805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610eeb61170d565b604080516001600160a01b039092168252519081900360200190a1565b6000610f1a610f1561170d565b611370565b610f555760405162461bcd60e51b815260040180806020018281038252603081526020018061203f6030913960400191505060405180910390fd5b610f5f8383611711565b50600192915050565b6000610f7c6101028363ffffffff61180316565b92915050565b600054610100900460ff1680610f9b5750610f9b61146e565b80610fa9575060005460ff16155b610fe45760405162461bcd60e51b815260040180806020018281038252602e8152602001806120da602e913960400191505060405180910390fd5b600054610100900460ff1615801561100f576000805460ff1961ff0019909116610100171660011790555b61101a888888610b3f565b6110248486611711565b61102d30611501565b61103630611597565b61103f30611383565b611048306115df565b60005b835181101561106b57611063848281518110610d5a57fe5b60010161104b565b5060005b825181101561108f57611087838281518110610d8b57fe5b60010161106f565b5080156110a2576000805461ff00191690555b5050505050505050565b6101355460ff1690565b6110c66110c161170d565b6115df565b565b6001600160a01b031660009081526068602052604090205490565b6110ee610e2861170d565b6111295760405162461bcd60e51b8152600401808060200182810382526030815260200180611fc76030913960400191505060405180910390fd5b61113281611670565b50565b611140610e2861170d565b61117b5760405162461bcd60e51b8152600401808060200182810382526030815260200180611fc76030913960400191505060405180910390fd5b6101355460ff16156111c7576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610135805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610eeb61170d565b60348054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ad45780601f10610aa957610100808354040283529160200191610ad4565b61126a610f1561170d565b6112a55760405162461bcd60e51b815260040180806020018281038252603081526020018061203f6030913960400191505060405180910390fd5b61113281611628565b6110c66112b961170d565b611597565b6101355460009060ff161561130d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610b38838361186a565b6101355460009060ff1615611366576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610b3883836118d8565b6000610f7c609d8363ffffffff61180316565b600054610100900460ff168061139c575061139c61146e565b806113aa575060005460ff16155b6113e55760405162461bcd60e51b815260040180806020018281038252602e8152602001806120da602e913960400191505060405180910390fd5b600054610100900460ff16158015611410576000805460ff1961ff0019909116610100171660011790555b611419826118ec565b801561142b576000805461ff00191690555b5050565b6001600160a01b03918216600090815260696020908152604080832093909416825291909152205490565b6000610f5f61146761170d565b84846119a2565b303b1590565b6000611481848484611a8e565b6114f78461148d61170d565b6114f285604051806060016040528060288152602001612090602891396001600160a01b038a166000908152606960205260408120906114cb61170d565b6001600160a01b03168152602081019190915260400160002054919063ffffffff611bec16565b6119a2565b5060019392505050565b600054610100900460ff168061151a575061151a61146e565b80611528575060005460ff16155b6115635760405162461bcd60e51b815260040180806020018281038252602e8152602001806120da602e913960400191505060405180910390fd5b600054610100900460ff1615801561158e576000805460ff1961ff0019909116610100171660011790555b61141982611c83565b6115a8609d8263ffffffff611d2616565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6115f16101028263ffffffff611d2616565b6040516001600160a01b038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b611639609d8263ffffffff611d8d16565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6116826101028263ffffffff611d8d16565b6040516001600160a01b038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6000610f5f6116c661170d565b846114f285606960006116d761170d565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff611e0e16565b3390565b6001600160a01b03821661176c576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b606a5461177f908263ffffffff611e0e16565b606a556001600160a01b0382166000908152606860205260409020546117ab908263ffffffff611e0e16565b6001600160a01b03831660008181526068602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60006001600160a01b03821661184a5760405162461bcd60e51b81526004018080602001828103825260228152602001806120b86022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6000610f5f61187761170d565b846114f28560405180606001604052806025815260200161215160259139606960006118a161170d565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff611bec16565b6000610f5f6118e561170d565b8484611a8e565b600054610100900460ff1680611905575061190561146e565b80611913575060005460ff16155b61194e5760405162461bcd60e51b815260040180806020018281038252602e8152602001806120da602e913960400191505060405180910390fd5b600054610100900460ff16158015611979576000805460ff1961ff0019909116610100171660011790555b61198282611e68565b610135805460ff19169055801561142b576000805461ff00191690555050565b6001600160a01b0383166119e75760405162461bcd60e51b815260040180806020018281038252602481526020018061212d6024913960400191505060405180910390fd5b6001600160a01b038216611a2c5760405162461bcd60e51b8152600401808060200182810382526022815260200180611ff76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260696020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316611ad35760405162461bcd60e51b81526004018080602001828103825260258152602001806121086025913960400191505060405180910390fd5b6001600160a01b038216611b185760405162461bcd60e51b8152600401808060200182810382526023815260200180611fa46023913960400191505060405180910390fd5b611b5b81604051806060016040528060268152602001612019602691396001600160a01b038616600090815260686020526040902054919063ffffffff611bec16565b6001600160a01b038085166000908152606860205260408082209390935590841681522054611b90908263ffffffff611e0e16565b6001600160a01b0380841660008181526068602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115611c7b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c40578181015183820152602001611c28565b50505050905090810190601f168015611c6d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600054610100900460ff1680611c9c5750611c9c61146e565b80611caa575060005460ff16155b611ce55760405162461bcd60e51b815260040180806020018281038252602e8152602001806120da602e913960400191505060405180910390fd5b600054610100900460ff16158015611d10576000805460ff1961ff0019909116610100171660011790555b611d1982611370565b6114195761141982611628565b611d308282611803565b611d6b5760405162461bcd60e51b815260040180806020018281038252602181526020018061206f6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b611d978282611803565b15611de9576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600082820183811015610b38576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600054610100900460ff1680611e815750611e8161146e565b80611e8f575060005460ff16155b611eca5760405162461bcd60e51b815260040180806020018281038252602e8152602001806120da602e913960400191505060405180910390fd5b600054610100900460ff16158015611ef5576000805460ff1961ff0019909116610100171660011790555b611efe82610f68565b6114195761141982611670565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f4c57805160ff1916838001178555611f79565b82800160010185558215611f79579182015b82811115611f79578251825591602001919060010190611f5e565b50611f85929150611f89565b5090565b610adc91905b80821115611f855760008155600101611f8f56fe45524332303a207472616e7366657220746f20746865207a65726f2061646472657373506175736572526f6c653a2063616c6c657220646f6573206e6f742068617665207468652050617573657220726f6c6545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656445524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a7231582042156e0484ce69d3028d1f62ceaefe2b65a9ba667aab1572e59f74d5a2d6cd1464736f6c63430005100032"

// DeployStandaloneERC20 deploys a new Ethereum contract, binding an instance of StandaloneERC20 to it.
func DeployStandaloneERC20(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StandaloneERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(StandaloneERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StandaloneERC20Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StandaloneERC20{StandaloneERC20Caller: StandaloneERC20Caller{contract: contract}, StandaloneERC20Transactor: StandaloneERC20Transactor{contract: contract}, StandaloneERC20Filterer: StandaloneERC20Filterer{contract: contract}}, nil
}

// StandaloneERC20 is an auto generated Go binding around an Ethereum contract.
type StandaloneERC20 struct {
	StandaloneERC20Caller     // Read-only binding to the contract
	StandaloneERC20Transactor // Write-only binding to the contract
	StandaloneERC20Filterer   // Log filterer for contract events
}

// StandaloneERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type StandaloneERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StandaloneERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type StandaloneERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StandaloneERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StandaloneERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StandaloneERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StandaloneERC20Session struct {
	Contract     *StandaloneERC20  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StandaloneERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StandaloneERC20CallerSession struct {
	Contract *StandaloneERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// StandaloneERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StandaloneERC20TransactorSession struct {
	Contract     *StandaloneERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// StandaloneERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type StandaloneERC20Raw struct {
	Contract *StandaloneERC20 // Generic contract binding to access the raw methods on
}

// StandaloneERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StandaloneERC20CallerRaw struct {
	Contract *StandaloneERC20Caller // Generic read-only contract binding to access the raw methods on
}

// StandaloneERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StandaloneERC20TransactorRaw struct {
	Contract *StandaloneERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewStandaloneERC20 creates a new instance of StandaloneERC20, bound to a specific deployed contract.
func NewStandaloneERC20(address common.Address, backend bind.ContractBackend) (*StandaloneERC20, error) {
	contract, err := bindStandaloneERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20{StandaloneERC20Caller: StandaloneERC20Caller{contract: contract}, StandaloneERC20Transactor: StandaloneERC20Transactor{contract: contract}, StandaloneERC20Filterer: StandaloneERC20Filterer{contract: contract}}, nil
}

// NewStandaloneERC20Caller creates a new read-only instance of StandaloneERC20, bound to a specific deployed contract.
func NewStandaloneERC20Caller(address common.Address, caller bind.ContractCaller) (*StandaloneERC20Caller, error) {
	contract, err := bindStandaloneERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20Caller{contract: contract}, nil
}

// NewStandaloneERC20Transactor creates a new write-only instance of StandaloneERC20, bound to a specific deployed contract.
func NewStandaloneERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*StandaloneERC20Transactor, error) {
	contract, err := bindStandaloneERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20Transactor{contract: contract}, nil
}

// NewStandaloneERC20Filterer creates a new log filterer instance of StandaloneERC20, bound to a specific deployed contract.
func NewStandaloneERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*StandaloneERC20Filterer, error) {
	contract, err := bindStandaloneERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20Filterer{contract: contract}, nil
}

// bindStandaloneERC20 binds a generic wrapper to an already deployed contract.
func bindStandaloneERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StandaloneERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StandaloneERC20 *StandaloneERC20Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StandaloneERC20.Contract.StandaloneERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StandaloneERC20 *StandaloneERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.StandaloneERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StandaloneERC20 *StandaloneERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.StandaloneERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StandaloneERC20 *StandaloneERC20CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StandaloneERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StandaloneERC20 *StandaloneERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StandaloneERC20 *StandaloneERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StandaloneERC20 *StandaloneERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StandaloneERC20.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StandaloneERC20 *StandaloneERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _StandaloneERC20.Contract.Allowance(&_StandaloneERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StandaloneERC20 *StandaloneERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _StandaloneERC20.Contract.Allowance(&_StandaloneERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StandaloneERC20 *StandaloneERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StandaloneERC20.contract.Call(opts, out, "balanceOf", account)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StandaloneERC20 *StandaloneERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _StandaloneERC20.Contract.BalanceOf(&_StandaloneERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StandaloneERC20 *StandaloneERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _StandaloneERC20.Contract.BalanceOf(&_StandaloneERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_StandaloneERC20 *StandaloneERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _StandaloneERC20.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_StandaloneERC20 *StandaloneERC20Session) Decimals() (uint8, error) {
	return _StandaloneERC20.Contract.Decimals(&_StandaloneERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_StandaloneERC20 *StandaloneERC20CallerSession) Decimals() (uint8, error) {
	return _StandaloneERC20.Contract.Decimals(&_StandaloneERC20.CallOpts)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_StandaloneERC20 *StandaloneERC20Caller) IsMinter(opts *bind.CallOpts, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _StandaloneERC20.contract.Call(opts, out, "isMinter", account)
	return *ret0, err
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_StandaloneERC20 *StandaloneERC20Session) IsMinter(account common.Address) (bool, error) {
	return _StandaloneERC20.Contract.IsMinter(&_StandaloneERC20.CallOpts, account)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_StandaloneERC20 *StandaloneERC20CallerSession) IsMinter(account common.Address) (bool, error) {
	return _StandaloneERC20.Contract.IsMinter(&_StandaloneERC20.CallOpts, account)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_StandaloneERC20 *StandaloneERC20Caller) IsPauser(opts *bind.CallOpts, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _StandaloneERC20.contract.Call(opts, out, "isPauser", account)
	return *ret0, err
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_StandaloneERC20 *StandaloneERC20Session) IsPauser(account common.Address) (bool, error) {
	return _StandaloneERC20.Contract.IsPauser(&_StandaloneERC20.CallOpts, account)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_StandaloneERC20 *StandaloneERC20CallerSession) IsPauser(account common.Address) (bool, error) {
	return _StandaloneERC20.Contract.IsPauser(&_StandaloneERC20.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StandaloneERC20 *StandaloneERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _StandaloneERC20.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StandaloneERC20 *StandaloneERC20Session) Name() (string, error) {
	return _StandaloneERC20.Contract.Name(&_StandaloneERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StandaloneERC20 *StandaloneERC20CallerSession) Name() (string, error) {
	return _StandaloneERC20.Contract.Name(&_StandaloneERC20.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StandaloneERC20 *StandaloneERC20Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _StandaloneERC20.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StandaloneERC20 *StandaloneERC20Session) Paused() (bool, error) {
	return _StandaloneERC20.Contract.Paused(&_StandaloneERC20.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StandaloneERC20 *StandaloneERC20CallerSession) Paused() (bool, error) {
	return _StandaloneERC20.Contract.Paused(&_StandaloneERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StandaloneERC20 *StandaloneERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _StandaloneERC20.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StandaloneERC20 *StandaloneERC20Session) Symbol() (string, error) {
	return _StandaloneERC20.Contract.Symbol(&_StandaloneERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StandaloneERC20 *StandaloneERC20CallerSession) Symbol() (string, error) {
	return _StandaloneERC20.Contract.Symbol(&_StandaloneERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StandaloneERC20 *StandaloneERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StandaloneERC20.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StandaloneERC20 *StandaloneERC20Session) TotalSupply() (*big.Int, error) {
	return _StandaloneERC20.Contract.TotalSupply(&_StandaloneERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StandaloneERC20 *StandaloneERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _StandaloneERC20.Contract.TotalSupply(&_StandaloneERC20.CallOpts)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) AddMinter(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "addMinter", account)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_StandaloneERC20 *StandaloneERC20Session) AddMinter(account common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.AddMinter(&_StandaloneERC20.TransactOpts, account)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) AddMinter(account common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.AddMinter(&_StandaloneERC20.TransactOpts, account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) AddPauser(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "addPauser", account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_StandaloneERC20 *StandaloneERC20Session) AddPauser(account common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.AddPauser(&_StandaloneERC20.TransactOpts, account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) AddPauser(account common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.AddPauser(&_StandaloneERC20.TransactOpts, account)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Session) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Approve(&_StandaloneERC20.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_StandaloneERC20 *StandaloneERC20TransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Approve(&_StandaloneERC20.TransactOpts, spender, value)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.DecreaseAllowance(&_StandaloneERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_StandaloneERC20 *StandaloneERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.DecreaseAllowance(&_StandaloneERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.IncreaseAllowance(&_StandaloneERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_StandaloneERC20 *StandaloneERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.IncreaseAllowance(&_StandaloneERC20.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) Initialize(opts *bind.TransactOpts, name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "initialize", name, symbol, decimals)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_StandaloneERC20 *StandaloneERC20Session) Initialize(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Initialize(&_StandaloneERC20.TransactOpts, name, symbol, decimals)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals) returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) Initialize(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Initialize(&_StandaloneERC20.TransactOpts, name, symbol, decimals)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x31392b4a.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals, address[] minters, address[] pausers) returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) Initialize0(opts *bind.TransactOpts, name string, symbol string, decimals uint8, minters []common.Address, pausers []common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "initialize0", name, symbol, decimals, minters, pausers)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x31392b4a.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals, address[] minters, address[] pausers) returns()
func (_StandaloneERC20 *StandaloneERC20Session) Initialize0(name string, symbol string, decimals uint8, minters []common.Address, pausers []common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Initialize0(&_StandaloneERC20.TransactOpts, name, symbol, decimals, minters, pausers)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x31392b4a.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals, address[] minters, address[] pausers) returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) Initialize0(name string, symbol string, decimals uint8, minters []common.Address, pausers []common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Initialize0(&_StandaloneERC20.TransactOpts, name, symbol, decimals, minters, pausers)
}

// Initialize1 is a paid mutator transaction binding the contract method 0x48be01c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals, uint256 initialSupply, address initialHolder, address[] minters, address[] pausers) returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) Initialize1(opts *bind.TransactOpts, name string, symbol string, decimals uint8, initialSupply *big.Int, initialHolder common.Address, minters []common.Address, pausers []common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "initialize1", name, symbol, decimals, initialSupply, initialHolder, minters, pausers)
}

// Initialize1 is a paid mutator transaction binding the contract method 0x48be01c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals, uint256 initialSupply, address initialHolder, address[] minters, address[] pausers) returns()
func (_StandaloneERC20 *StandaloneERC20Session) Initialize1(name string, symbol string, decimals uint8, initialSupply *big.Int, initialHolder common.Address, minters []common.Address, pausers []common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Initialize1(&_StandaloneERC20.TransactOpts, name, symbol, decimals, initialSupply, initialHolder, minters, pausers)
}

// Initialize1 is a paid mutator transaction binding the contract method 0x48be01c6.
//
// Solidity: function initialize(string name, string symbol, uint8 decimals, uint256 initialSupply, address initialHolder, address[] minters, address[] pausers) returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) Initialize1(name string, symbol string, decimals uint8, initialSupply *big.Int, initialHolder common.Address, minters []common.Address, pausers []common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Initialize1(&_StandaloneERC20.TransactOpts, name, symbol, decimals, initialSupply, initialHolder, minters, pausers)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) Initialize2(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "initialize2", sender)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_StandaloneERC20 *StandaloneERC20Session) Initialize2(sender common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Initialize2(&_StandaloneERC20.TransactOpts, sender)
}

// Initialize2 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) Initialize2(sender common.Address) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Initialize2(&_StandaloneERC20.TransactOpts, sender)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Transactor) Mint(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "mint", account, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Session) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Mint(&_StandaloneERC20.TransactOpts, account, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns(bool)
func (_StandaloneERC20 *StandaloneERC20TransactorSession) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Mint(&_StandaloneERC20.TransactOpts, account, amount)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StandaloneERC20 *StandaloneERC20Session) Pause() (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Pause(&_StandaloneERC20.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) Pause() (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Pause(&_StandaloneERC20.TransactOpts)
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) RenounceMinter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "renounceMinter")
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_StandaloneERC20 *StandaloneERC20Session) RenounceMinter() (*types.Transaction, error) {
	return _StandaloneERC20.Contract.RenounceMinter(&_StandaloneERC20.TransactOpts)
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) RenounceMinter() (*types.Transaction, error) {
	return _StandaloneERC20.Contract.RenounceMinter(&_StandaloneERC20.TransactOpts)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) RenouncePauser(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "renouncePauser")
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_StandaloneERC20 *StandaloneERC20Session) RenouncePauser() (*types.Transaction, error) {
	return _StandaloneERC20.Contract.RenouncePauser(&_StandaloneERC20.TransactOpts)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) RenouncePauser() (*types.Transaction, error) {
	return _StandaloneERC20.Contract.RenouncePauser(&_StandaloneERC20.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Session) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Transfer(&_StandaloneERC20.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_StandaloneERC20 *StandaloneERC20TransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Transfer(&_StandaloneERC20.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_StandaloneERC20 *StandaloneERC20Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.TransferFrom(&_StandaloneERC20.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_StandaloneERC20 *StandaloneERC20TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StandaloneERC20.Contract.TransferFrom(&_StandaloneERC20.TransactOpts, from, to, value)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StandaloneERC20 *StandaloneERC20Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StandaloneERC20.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StandaloneERC20 *StandaloneERC20Session) Unpause() (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Unpause(&_StandaloneERC20.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StandaloneERC20 *StandaloneERC20TransactorSession) Unpause() (*types.Transaction, error) {
	return _StandaloneERC20.Contract.Unpause(&_StandaloneERC20.TransactOpts)
}

// StandaloneERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the StandaloneERC20 contract.
type StandaloneERC20ApprovalIterator struct {
	Event *StandaloneERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StandaloneERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StandaloneERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StandaloneERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StandaloneERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StandaloneERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StandaloneERC20Approval represents a Approval event raised by the StandaloneERC20 contract.
type StandaloneERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StandaloneERC20 *StandaloneERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*StandaloneERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _StandaloneERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20ApprovalIterator{contract: _StandaloneERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StandaloneERC20 *StandaloneERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StandaloneERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _StandaloneERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StandaloneERC20Approval)
				if err := _StandaloneERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StandaloneERC20 *StandaloneERC20Filterer) ParseApproval(log types.Log) (*StandaloneERC20Approval, error) {
	event := new(StandaloneERC20Approval)
	if err := _StandaloneERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StandaloneERC20MinterAddedIterator is returned from FilterMinterAdded and is used to iterate over the raw logs and unpacked data for MinterAdded events raised by the StandaloneERC20 contract.
type StandaloneERC20MinterAddedIterator struct {
	Event *StandaloneERC20MinterAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StandaloneERC20MinterAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StandaloneERC20MinterAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StandaloneERC20MinterAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StandaloneERC20MinterAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StandaloneERC20MinterAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StandaloneERC20MinterAdded represents a MinterAdded event raised by the StandaloneERC20 contract.
type StandaloneERC20MinterAdded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinterAdded is a free log retrieval operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) FilterMinterAdded(opts *bind.FilterOpts, account []common.Address) (*StandaloneERC20MinterAddedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _StandaloneERC20.contract.FilterLogs(opts, "MinterAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20MinterAddedIterator{contract: _StandaloneERC20.contract, event: "MinterAdded", logs: logs, sub: sub}, nil
}

// WatchMinterAdded is a free log subscription operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) WatchMinterAdded(opts *bind.WatchOpts, sink chan<- *StandaloneERC20MinterAdded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _StandaloneERC20.contract.WatchLogs(opts, "MinterAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StandaloneERC20MinterAdded)
				if err := _StandaloneERC20.contract.UnpackLog(event, "MinterAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterAdded is a log parse operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) ParseMinterAdded(log types.Log) (*StandaloneERC20MinterAdded, error) {
	event := new(StandaloneERC20MinterAdded)
	if err := _StandaloneERC20.contract.UnpackLog(event, "MinterAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StandaloneERC20MinterRemovedIterator is returned from FilterMinterRemoved and is used to iterate over the raw logs and unpacked data for MinterRemoved events raised by the StandaloneERC20 contract.
type StandaloneERC20MinterRemovedIterator struct {
	Event *StandaloneERC20MinterRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StandaloneERC20MinterRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StandaloneERC20MinterRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StandaloneERC20MinterRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StandaloneERC20MinterRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StandaloneERC20MinterRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StandaloneERC20MinterRemoved represents a MinterRemoved event raised by the StandaloneERC20 contract.
type StandaloneERC20MinterRemoved struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinterRemoved is a free log retrieval operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) FilterMinterRemoved(opts *bind.FilterOpts, account []common.Address) (*StandaloneERC20MinterRemovedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _StandaloneERC20.contract.FilterLogs(opts, "MinterRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20MinterRemovedIterator{contract: _StandaloneERC20.contract, event: "MinterRemoved", logs: logs, sub: sub}, nil
}

// WatchMinterRemoved is a free log subscription operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) WatchMinterRemoved(opts *bind.WatchOpts, sink chan<- *StandaloneERC20MinterRemoved, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _StandaloneERC20.contract.WatchLogs(opts, "MinterRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StandaloneERC20MinterRemoved)
				if err := _StandaloneERC20.contract.UnpackLog(event, "MinterRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterRemoved is a log parse operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) ParseMinterRemoved(log types.Log) (*StandaloneERC20MinterRemoved, error) {
	event := new(StandaloneERC20MinterRemoved)
	if err := _StandaloneERC20.contract.UnpackLog(event, "MinterRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StandaloneERC20PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the StandaloneERC20 contract.
type StandaloneERC20PausedIterator struct {
	Event *StandaloneERC20Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StandaloneERC20PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StandaloneERC20Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StandaloneERC20Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StandaloneERC20PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StandaloneERC20PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StandaloneERC20Paused represents a Paused event raised by the StandaloneERC20 contract.
type StandaloneERC20Paused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StandaloneERC20 *StandaloneERC20Filterer) FilterPaused(opts *bind.FilterOpts) (*StandaloneERC20PausedIterator, error) {

	logs, sub, err := _StandaloneERC20.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20PausedIterator{contract: _StandaloneERC20.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StandaloneERC20 *StandaloneERC20Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *StandaloneERC20Paused) (event.Subscription, error) {

	logs, sub, err := _StandaloneERC20.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StandaloneERC20Paused)
				if err := _StandaloneERC20.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StandaloneERC20 *StandaloneERC20Filterer) ParsePaused(log types.Log) (*StandaloneERC20Paused, error) {
	event := new(StandaloneERC20Paused)
	if err := _StandaloneERC20.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StandaloneERC20PauserAddedIterator is returned from FilterPauserAdded and is used to iterate over the raw logs and unpacked data for PauserAdded events raised by the StandaloneERC20 contract.
type StandaloneERC20PauserAddedIterator struct {
	Event *StandaloneERC20PauserAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StandaloneERC20PauserAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StandaloneERC20PauserAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StandaloneERC20PauserAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StandaloneERC20PauserAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StandaloneERC20PauserAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StandaloneERC20PauserAdded represents a PauserAdded event raised by the StandaloneERC20 contract.
type StandaloneERC20PauserAdded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserAdded is a free log retrieval operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) FilterPauserAdded(opts *bind.FilterOpts, account []common.Address) (*StandaloneERC20PauserAddedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _StandaloneERC20.contract.FilterLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20PauserAddedIterator{contract: _StandaloneERC20.contract, event: "PauserAdded", logs: logs, sub: sub}, nil
}

// WatchPauserAdded is a free log subscription operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) WatchPauserAdded(opts *bind.WatchOpts, sink chan<- *StandaloneERC20PauserAdded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _StandaloneERC20.contract.WatchLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StandaloneERC20PauserAdded)
				if err := _StandaloneERC20.contract.UnpackLog(event, "PauserAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserAdded is a log parse operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) ParsePauserAdded(log types.Log) (*StandaloneERC20PauserAdded, error) {
	event := new(StandaloneERC20PauserAdded)
	if err := _StandaloneERC20.contract.UnpackLog(event, "PauserAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StandaloneERC20PauserRemovedIterator is returned from FilterPauserRemoved and is used to iterate over the raw logs and unpacked data for PauserRemoved events raised by the StandaloneERC20 contract.
type StandaloneERC20PauserRemovedIterator struct {
	Event *StandaloneERC20PauserRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StandaloneERC20PauserRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StandaloneERC20PauserRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StandaloneERC20PauserRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StandaloneERC20PauserRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StandaloneERC20PauserRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StandaloneERC20PauserRemoved represents a PauserRemoved event raised by the StandaloneERC20 contract.
type StandaloneERC20PauserRemoved struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserRemoved is a free log retrieval operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) FilterPauserRemoved(opts *bind.FilterOpts, account []common.Address) (*StandaloneERC20PauserRemovedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _StandaloneERC20.contract.FilterLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20PauserRemovedIterator{contract: _StandaloneERC20.contract, event: "PauserRemoved", logs: logs, sub: sub}, nil
}

// WatchPauserRemoved is a free log subscription operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) WatchPauserRemoved(opts *bind.WatchOpts, sink chan<- *StandaloneERC20PauserRemoved, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _StandaloneERC20.contract.WatchLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StandaloneERC20PauserRemoved)
				if err := _StandaloneERC20.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRemoved is a log parse operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_StandaloneERC20 *StandaloneERC20Filterer) ParsePauserRemoved(log types.Log) (*StandaloneERC20PauserRemoved, error) {
	event := new(StandaloneERC20PauserRemoved)
	if err := _StandaloneERC20.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StandaloneERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the StandaloneERC20 contract.
type StandaloneERC20TransferIterator struct {
	Event *StandaloneERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StandaloneERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StandaloneERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StandaloneERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StandaloneERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StandaloneERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StandaloneERC20Transfer represents a Transfer event raised by the StandaloneERC20 contract.
type StandaloneERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StandaloneERC20 *StandaloneERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*StandaloneERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _StandaloneERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20TransferIterator{contract: _StandaloneERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StandaloneERC20 *StandaloneERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StandaloneERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _StandaloneERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StandaloneERC20Transfer)
				if err := _StandaloneERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StandaloneERC20 *StandaloneERC20Filterer) ParseTransfer(log types.Log) (*StandaloneERC20Transfer, error) {
	event := new(StandaloneERC20Transfer)
	if err := _StandaloneERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StandaloneERC20UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the StandaloneERC20 contract.
type StandaloneERC20UnpausedIterator struct {
	Event *StandaloneERC20Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StandaloneERC20UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StandaloneERC20Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StandaloneERC20Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StandaloneERC20UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StandaloneERC20UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StandaloneERC20Unpaused represents a Unpaused event raised by the StandaloneERC20 contract.
type StandaloneERC20Unpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StandaloneERC20 *StandaloneERC20Filterer) FilterUnpaused(opts *bind.FilterOpts) (*StandaloneERC20UnpausedIterator, error) {

	logs, sub, err := _StandaloneERC20.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &StandaloneERC20UnpausedIterator{contract: _StandaloneERC20.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StandaloneERC20 *StandaloneERC20Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *StandaloneERC20Unpaused) (event.Subscription, error) {

	logs, sub, err := _StandaloneERC20.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StandaloneERC20Unpaused)
				if err := _StandaloneERC20.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StandaloneERC20 *StandaloneERC20Filterer) ParseUnpaused(log types.Log) (*StandaloneERC20Unpaused, error) {
	event := new(StandaloneERC20Unpaused)
	if err := _StandaloneERC20.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StringABI is the input ABI used to generate the binding from.
const StringABI = "[]"

// StringBin is the compiled bytecode used for deploying new contracts.
var StringBin = "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582088163d9252902d1d2530d9541ff2da038c574ce9a284b402b5d401fff205e36764736f6c63430005100032"

// DeployString deploys a new Ethereum contract, binding an instance of String to it.
func DeployString(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *String, error) {
	parsed, err := abi.JSON(strings.NewReader(StringABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StringBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &String{StringCaller: StringCaller{contract: contract}, StringTransactor: StringTransactor{contract: contract}, StringFilterer: StringFilterer{contract: contract}}, nil
}

// String is an auto generated Go binding around an Ethereum contract.
type String struct {
	StringCaller     // Read-only binding to the contract
	StringTransactor // Write-only binding to the contract
	StringFilterer   // Log filterer for contract events
}

// StringCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StringSession struct {
	Contract     *String           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StringCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StringCallerSession struct {
	Contract *StringCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StringTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StringTransactorSession struct {
	Contract     *StringTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StringRaw is an auto generated low-level Go binding around an Ethereum contract.
type StringRaw struct {
	Contract *String // Generic contract binding to access the raw methods on
}

// StringCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StringCallerRaw struct {
	Contract *StringCaller // Generic read-only contract binding to access the raw methods on
}

// StringTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StringTransactorRaw struct {
	Contract *StringTransactor // Generic write-only contract binding to access the raw methods on
}

// NewString creates a new instance of String, bound to a specific deployed contract.
func NewString(address common.Address, backend bind.ContractBackend) (*String, error) {
	contract, err := bindString(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &String{StringCaller: StringCaller{contract: contract}, StringTransactor: StringTransactor{contract: contract}, StringFilterer: StringFilterer{contract: contract}}, nil
}

// NewStringCaller creates a new read-only instance of String, bound to a specific deployed contract.
func NewStringCaller(address common.Address, caller bind.ContractCaller) (*StringCaller, error) {
	contract, err := bindString(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringCaller{contract: contract}, nil
}

// NewStringTransactor creates a new write-only instance of String, bound to a specific deployed contract.
func NewStringTransactor(address common.Address, transactor bind.ContractTransactor) (*StringTransactor, error) {
	contract, err := bindString(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringTransactor{contract: contract}, nil
}

// NewStringFilterer creates a new log filterer instance of String, bound to a specific deployed contract.
func NewStringFilterer(address common.Address, filterer bind.ContractFilterer) (*StringFilterer, error) {
	contract, err := bindString(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringFilterer{contract: contract}, nil
}

// bindString binds a generic wrapper to an already deployed contract.
func bindString(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StringABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_String *StringRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _String.Contract.StringCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_String *StringRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _String.Contract.StringTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_String *StringRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _String.Contract.StringTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_String *StringCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _String.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_String *StringTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _String.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_String *StringTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _String.Contract.contract.Transact(opts, method, params...)
}

// StringTestABI is the input ABI used to generate the binding from.
const StringTestABI = "[{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"c\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"d\",\"type\":\"string\"}],\"name\":\"add4\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"fromAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"fromBytes32\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"fromUint\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// StringTestBin is the compiled bytecode used for deploying new contracts.
var StringTestBin = "0x608060405234801561001057600080fd5b50610a2b806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634abd3462146100515780637d3d11d0146102f9578063b72e717d14610316578063e3814b191461033c575b600080fd5b6102846004803603608081101561006757600080fd5b810190602081018135600160201b81111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111600160201b831117156100b457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561010657600080fd5b82018360208201111561011857600080fd5b803590602001918460018302840111600160201b8311171561013957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561018b57600080fd5b82018360208201111561019d57600080fd5b803590602001918460018302840111600160201b831117156101be57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561021057600080fd5b82018360208201111561022257600080fd5b803590602001918460018302840111600160201b8311171561024357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610359945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102be5781810151838201526020016102a6565b50505050905090810190601f1680156102eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102846004803603602081101561030f57600080fd5b50356103b0565b6102846004803603602081101561032c57600080fd5b50356001600160a01b03166103c3565b6102846004803603602081101561035257600080fd5b50356103ce565b60606103a785858585604051806020016040528060008152506040518060200160405280600081525060405180602001604052806000815250604051806020016040528060008152506103d9565b95945050505050565b60606103bb82610656565b90505b919050565b60606103bb826107c2565b60606103bb8261093e565b606088888888888888886040516020018089805190602001908083835b602083106104155780518252601f1990920191602091820191016103f6565b51815160209384036101000a60001901801990921691161790528b5191909301928b0191508083835b6020831061045d5780518252601f19909201916020918201910161043e565b51815160209384036101000a60001901801990921691161790528a5191909301928a0191508083835b602083106104a55780518252601f199092019160209182019101610486565b51815160209384036101000a600019018019909216911617905289519190930192890191508083835b602083106104ed5780518252601f1990920191602091820191016104ce565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b602083106105355780518252601f199092019160209182019101610516565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b6020831061057d5780518252601f19909201916020918201910161055e565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b602083106105c55780518252601f1990920191602091820191016105a6565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b6020831061060d5780518252601f1990920191602091820191016105ee565b6001836020036101000a03801982511681845116808217855250505050505090500198505050505050505050604051602081830303815290604052905098975050505050505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151604280825260808201909352606092839190602082018180388339019050509050600360fc1b816000815181106106b157fe5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106106da57fe5b60200101906001600160f81b031916908160001a90535060005b60208110156107ba5782600486836020811061070c57fe5b1a60f81b6001600160f81b031916901c60f81c60ff168151811061072c57fe5b602001015160f81c60f81b82826002026002018151811061074957fe5b60200101906001600160f81b031916908160001a9053508285826020811061076d57fe5b825191901a600f1690811061077e57fe5b602001015160f81c60f81b82826002026003018151811061079b57fe5b60200101906001600160f81b031916908160001a9053506001016106f4565b509392505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602a80825260608281019094526001600160a01b03851692918491602082018180388339019050509050600360fc1b8160008151811061082657fe5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061084f57fe5b60200101906001600160f81b031916908160001a90535060005b6014811015610935578260048583600c016020811061088457fe5b1a60f81b6001600160f81b031916901c60f81c60ff16815181106108a457fe5b602001015160f81c60f81b8282600202600201815181106108c157fe5b60200101906001600160f81b031916908160001a905350828482600c01602081106108e857fe5b825191901a600f169081106108f957fe5b602001015160f81c60f81b82826002026003018151811061091657fe5b60200101906001600160f81b031916908160001a905350600101610869565b50949350505050565b60608161096357506040805180820190915260018152600360fc1b60208201526103be565b8160005b811561097b57600101600a82049150610967565b6060816040519080825280601f01601f1916602001820160405280156109a8576020820181803883390190505b50905060001982015b851561093557600a860660300160f81b828280600190039350815181106109d457fe5b60200101906001600160f81b031916908160001a905350600a860495506109b156fea265627a7a72315820afad9c4472257ef61d3f9c5aecf14a5ac7e348f5798617b02c18c8128a3b811064736f6c63430005100032"

// DeployStringTest deploys a new Ethereum contract, binding an instance of StringTest to it.
func DeployStringTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StringTest, error) {
	parsed, err := abi.JSON(strings.NewReader(StringTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StringTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StringTest{StringTestCaller: StringTestCaller{contract: contract}, StringTestTransactor: StringTestTransactor{contract: contract}, StringTestFilterer: StringTestFilterer{contract: contract}}, nil
}

// StringTest is an auto generated Go binding around an Ethereum contract.
type StringTest struct {
	StringTestCaller     // Read-only binding to the contract
	StringTestTransactor // Write-only binding to the contract
	StringTestFilterer   // Log filterer for contract events
}

// StringTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StringTestSession struct {
	Contract     *StringTest       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StringTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StringTestCallerSession struct {
	Contract *StringTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// StringTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StringTestTransactorSession struct {
	Contract     *StringTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// StringTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type StringTestRaw struct {
	Contract *StringTest // Generic contract binding to access the raw methods on
}

// StringTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StringTestCallerRaw struct {
	Contract *StringTestCaller // Generic read-only contract binding to access the raw methods on
}

// StringTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StringTestTransactorRaw struct {
	Contract *StringTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStringTest creates a new instance of StringTest, bound to a specific deployed contract.
func NewStringTest(address common.Address, backend bind.ContractBackend) (*StringTest, error) {
	contract, err := bindStringTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StringTest{StringTestCaller: StringTestCaller{contract: contract}, StringTestTransactor: StringTestTransactor{contract: contract}, StringTestFilterer: StringTestFilterer{contract: contract}}, nil
}

// NewStringTestCaller creates a new read-only instance of StringTest, bound to a specific deployed contract.
func NewStringTestCaller(address common.Address, caller bind.ContractCaller) (*StringTestCaller, error) {
	contract, err := bindStringTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringTestCaller{contract: contract}, nil
}

// NewStringTestTransactor creates a new write-only instance of StringTest, bound to a specific deployed contract.
func NewStringTestTransactor(address common.Address, transactor bind.ContractTransactor) (*StringTestTransactor, error) {
	contract, err := bindStringTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringTestTransactor{contract: contract}, nil
}

// NewStringTestFilterer creates a new log filterer instance of StringTest, bound to a specific deployed contract.
func NewStringTestFilterer(address common.Address, filterer bind.ContractFilterer) (*StringTestFilterer, error) {
	contract, err := bindStringTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringTestFilterer{contract: contract}, nil
}

// bindStringTest binds a generic wrapper to an already deployed contract.
func bindStringTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StringTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StringTest *StringTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StringTest.Contract.StringTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StringTest *StringTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StringTest.Contract.StringTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StringTest *StringTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StringTest.Contract.StringTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StringTest *StringTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StringTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StringTest *StringTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StringTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StringTest *StringTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StringTest.Contract.contract.Transact(opts, method, params...)
}

// Add4 is a free data retrieval call binding the contract method 0x4abd3462.
//
// Solidity: function add4(string a, string b, string c, string d) pure returns(string)
func (_StringTest *StringTestCaller) Add4(opts *bind.CallOpts, a string, b string, c string, d string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _StringTest.contract.Call(opts, out, "add4", a, b, c, d)
	return *ret0, err
}

// Add4 is a free data retrieval call binding the contract method 0x4abd3462.
//
// Solidity: function add4(string a, string b, string c, string d) pure returns(string)
func (_StringTest *StringTestSession) Add4(a string, b string, c string, d string) (string, error) {
	return _StringTest.Contract.Add4(&_StringTest.CallOpts, a, b, c, d)
}

// Add4 is a free data retrieval call binding the contract method 0x4abd3462.
//
// Solidity: function add4(string a, string b, string c, string d) pure returns(string)
func (_StringTest *StringTestCallerSession) Add4(a string, b string, c string, d string) (string, error) {
	return _StringTest.Contract.Add4(&_StringTest.CallOpts, a, b, c, d)
}

// FromAddress is a free data retrieval call binding the contract method 0xb72e717d.
//
// Solidity: function fromAddress(address _addr) pure returns(string)
func (_StringTest *StringTestCaller) FromAddress(opts *bind.CallOpts, _addr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _StringTest.contract.Call(opts, out, "fromAddress", _addr)
	return *ret0, err
}

// FromAddress is a free data retrieval call binding the contract method 0xb72e717d.
//
// Solidity: function fromAddress(address _addr) pure returns(string)
func (_StringTest *StringTestSession) FromAddress(_addr common.Address) (string, error) {
	return _StringTest.Contract.FromAddress(&_StringTest.CallOpts, _addr)
}

// FromAddress is a free data retrieval call binding the contract method 0xb72e717d.
//
// Solidity: function fromAddress(address _addr) pure returns(string)
func (_StringTest *StringTestCallerSession) FromAddress(_addr common.Address) (string, error) {
	return _StringTest.Contract.FromAddress(&_StringTest.CallOpts, _addr)
}

// FromBytes32 is a free data retrieval call binding the contract method 0x7d3d11d0.
//
// Solidity: function fromBytes32(bytes32 _value) pure returns(string)
func (_StringTest *StringTestCaller) FromBytes32(opts *bind.CallOpts, _value [32]byte) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _StringTest.contract.Call(opts, out, "fromBytes32", _value)
	return *ret0, err
}

// FromBytes32 is a free data retrieval call binding the contract method 0x7d3d11d0.
//
// Solidity: function fromBytes32(bytes32 _value) pure returns(string)
func (_StringTest *StringTestSession) FromBytes32(_value [32]byte) (string, error) {
	return _StringTest.Contract.FromBytes32(&_StringTest.CallOpts, _value)
}

// FromBytes32 is a free data retrieval call binding the contract method 0x7d3d11d0.
//
// Solidity: function fromBytes32(bytes32 _value) pure returns(string)
func (_StringTest *StringTestCallerSession) FromBytes32(_value [32]byte) (string, error) {
	return _StringTest.Contract.FromBytes32(&_StringTest.CallOpts, _value)
}

// FromUint is a free data retrieval call binding the contract method 0xe3814b19.
//
// Solidity: function fromUint(uint256 _i) pure returns(string)
func (_StringTest *StringTestCaller) FromUint(opts *bind.CallOpts, _i *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _StringTest.contract.Call(opts, out, "fromUint", _i)
	return *ret0, err
}

// FromUint is a free data retrieval call binding the contract method 0xe3814b19.
//
// Solidity: function fromUint(uint256 _i) pure returns(string)
func (_StringTest *StringTestSession) FromUint(_i *big.Int) (string, error) {
	return _StringTest.Contract.FromUint(&_StringTest.CallOpts, _i)
}

// FromUint is a free data retrieval call binding the contract method 0xe3814b19.
//
// Solidity: function fromUint(uint256 _i) pure returns(string)
func (_StringTest *StringTestCallerSession) FromUint(_i *big.Int) (string, error) {
	return _StringTest.Contract.FromUint(&_StringTest.CallOpts, _i)
}

// UpgradeabilityProxyABI is the input ABI used to generate the binding from.
const UpgradeabilityProxyABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// UpgradeabilityProxyBin is the compiled bytecode used for deploying new contracts.
var UpgradeabilityProxyBin = "0x608060405260405161036d38038061036d8339818101604052604081101561002657600080fd5b81516020830180516040519294929383019291908464010000000082111561004d57600080fd5b90830190602082018581111561006257600080fd5b825164010000000081118282018810171561007c57600080fd5b82525081516020918201929091019080838360005b838110156100a9578181015183820152602001610091565b50505050905090810190601f1680156100d65780820380516001836020036101000a031916815260200191505b5060408181527f656970313936372e70726f78792e696d706c656d656e746174696f6e0000000082525190819003601c01902060008051602061031283398151915260001990910114925061012a91505057fe5b61013c826001600160e01b036101fb16565b8051156101f4576000826001600160a01b0316826040518082805190602001908083835b6020831061017f5780518252601f199092019160209182019101610160565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101df576040519150601f19603f3d011682016040523d82523d6000602084013e6101e4565b606091505b50509050806101f257600080fd5b505b5050610261565b61020e8161025b60201b6100681760201c565b6102495760405162461bcd60e51b815260040180806020018281038252603b815260200180610332603b913960400191505060405180910390fd5b60008051602061031283398151915255565b3b151590565b60a38061026f6000396000f3fe6080604052600a600c565b005b6012601e565b601e601a6020565b6045565b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e8080156063573d6000f35b3d6000fd5b3b15159056fea265627a7a723158202c241916f064a139766c6f0570bdfdfa20017f2a333ca513a1e00f5818366e8664736f6c63430005100032360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc43616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373"

// DeployUpgradeabilityProxy deploys a new Ethereum contract, binding an instance of UpgradeabilityProxy to it.
func DeployUpgradeabilityProxy(auth *bind.TransactOpts, backend bind.ContractBackend, _logic common.Address, _data []byte) (common.Address, *types.Transaction, *UpgradeabilityProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(UpgradeabilityProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UpgradeabilityProxyBin), backend, _logic, _data)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UpgradeabilityProxy{UpgradeabilityProxyCaller: UpgradeabilityProxyCaller{contract: contract}, UpgradeabilityProxyTransactor: UpgradeabilityProxyTransactor{contract: contract}, UpgradeabilityProxyFilterer: UpgradeabilityProxyFilterer{contract: contract}}, nil
}

// UpgradeabilityProxy is an auto generated Go binding around an Ethereum contract.
type UpgradeabilityProxy struct {
	UpgradeabilityProxyCaller     // Read-only binding to the contract
	UpgradeabilityProxyTransactor // Write-only binding to the contract
	UpgradeabilityProxyFilterer   // Log filterer for contract events
}

// UpgradeabilityProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpgradeabilityProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeabilityProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpgradeabilityProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeabilityProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpgradeabilityProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpgradeabilityProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpgradeabilityProxySession struct {
	Contract     *UpgradeabilityProxy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// UpgradeabilityProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpgradeabilityProxyCallerSession struct {
	Contract *UpgradeabilityProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// UpgradeabilityProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpgradeabilityProxyTransactorSession struct {
	Contract     *UpgradeabilityProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// UpgradeabilityProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpgradeabilityProxyRaw struct {
	Contract *UpgradeabilityProxy // Generic contract binding to access the raw methods on
}

// UpgradeabilityProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpgradeabilityProxyCallerRaw struct {
	Contract *UpgradeabilityProxyCaller // Generic read-only contract binding to access the raw methods on
}

// UpgradeabilityProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpgradeabilityProxyTransactorRaw struct {
	Contract *UpgradeabilityProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpgradeabilityProxy creates a new instance of UpgradeabilityProxy, bound to a specific deployed contract.
func NewUpgradeabilityProxy(address common.Address, backend bind.ContractBackend) (*UpgradeabilityProxy, error) {
	contract, err := bindUpgradeabilityProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxy{UpgradeabilityProxyCaller: UpgradeabilityProxyCaller{contract: contract}, UpgradeabilityProxyTransactor: UpgradeabilityProxyTransactor{contract: contract}, UpgradeabilityProxyFilterer: UpgradeabilityProxyFilterer{contract: contract}}, nil
}

// NewUpgradeabilityProxyCaller creates a new read-only instance of UpgradeabilityProxy, bound to a specific deployed contract.
func NewUpgradeabilityProxyCaller(address common.Address, caller bind.ContractCaller) (*UpgradeabilityProxyCaller, error) {
	contract, err := bindUpgradeabilityProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxyCaller{contract: contract}, nil
}

// NewUpgradeabilityProxyTransactor creates a new write-only instance of UpgradeabilityProxy, bound to a specific deployed contract.
func NewUpgradeabilityProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*UpgradeabilityProxyTransactor, error) {
	contract, err := bindUpgradeabilityProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxyTransactor{contract: contract}, nil
}

// NewUpgradeabilityProxyFilterer creates a new log filterer instance of UpgradeabilityProxy, bound to a specific deployed contract.
func NewUpgradeabilityProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*UpgradeabilityProxyFilterer, error) {
	contract, err := bindUpgradeabilityProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxyFilterer{contract: contract}, nil
}

// bindUpgradeabilityProxy binds a generic wrapper to an already deployed contract.
func bindUpgradeabilityProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UpgradeabilityProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeabilityProxy *UpgradeabilityProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UpgradeabilityProxy.Contract.UpgradeabilityProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeabilityProxy *UpgradeabilityProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.UpgradeabilityProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeabilityProxy *UpgradeabilityProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.UpgradeabilityProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpgradeabilityProxy *UpgradeabilityProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UpgradeabilityProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpgradeabilityProxy *UpgradeabilityProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpgradeabilityProxy *UpgradeabilityProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_UpgradeabilityProxy *UpgradeabilityProxyTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _UpgradeabilityProxy.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_UpgradeabilityProxy *UpgradeabilityProxySession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.Fallback(&_UpgradeabilityProxy.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_UpgradeabilityProxy *UpgradeabilityProxyTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _UpgradeabilityProxy.Contract.Fallback(&_UpgradeabilityProxy.TransactOpts, calldata)
}

// UpgradeabilityProxyUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the UpgradeabilityProxy contract.
type UpgradeabilityProxyUpgradedIterator struct {
	Event *UpgradeabilityProxyUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpgradeabilityProxyUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpgradeabilityProxyUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpgradeabilityProxyUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpgradeabilityProxyUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpgradeabilityProxyUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpgradeabilityProxyUpgraded represents a Upgraded event raised by the UpgradeabilityProxy contract.
type UpgradeabilityProxyUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_UpgradeabilityProxy *UpgradeabilityProxyFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*UpgradeabilityProxyUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _UpgradeabilityProxy.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &UpgradeabilityProxyUpgradedIterator{contract: _UpgradeabilityProxy.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_UpgradeabilityProxy *UpgradeabilityProxyFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *UpgradeabilityProxyUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _UpgradeabilityProxy.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpgradeabilityProxyUpgraded)
				if err := _UpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_UpgradeabilityProxy *UpgradeabilityProxyFilterer) ParseUpgraded(log types.Log) (*UpgradeabilityProxyUpgraded, error) {
	event := new(UpgradeabilityProxyUpgraded)
	if err := _UpgradeabilityProxy.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// VestingABI is the input ABI used to generate the binding from.
const VestingABI = "[{\"inputs\":[{\"internalType\":\"contractGatewayRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"addVestingSchedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"calculateClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contractGatewayRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"schedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// VestingBin is the compiled bytecode used for deploying new contracts.
var VestingBin = "0x608060405234801561001057600080fd5b506040516111393803806111398339818101604052602081101561003357600080fd5b50516100493361006e602090811b61078617901c565b606680546001600160a01b0319166001600160a01b039290921691909117905561016f565b600054610100900460ff168061009057506100906001600160e01b0361016916565b8061009e575060005460ff16155b6100d95760405162461bcd60e51b815260040180806020018281038252602e81526020018061110b602e913960400191505060405180910390fd5b600054610100900460ff16158015610104576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610165576000805461ff00191690555b5050565b303b1590565b610f8d8061017e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638f32d59b116100665780638f32d59b146101c9578063c4d66de8146101e5578063c63ff8dd1461020b578063f2fde38b1461027b578063fe7b0007146102a15761009e565b8063627189f6146100a3578063715018a6146101415780637b1039991461014957806380c3780f1461016d5780638da5cb5b146101c1575b600080fd5b61013f600480360360c08110156100b957600080fd5b6001600160a01b038235169160208101359161ffff604083013516916060810135916080820135919081019060c0810160a082013564010000000081111561010057600080fd5b82018360208201111561011257600080fd5b8035906020019184600183028401116401000000008311171561013457600080fd5b5090925090506102e0565b005b61013f61066b565b61015161070e565b604080516001600160a01b039092168252519081900360200190f35b6101936004803603602081101561018357600080fd5b50356001600160a01b031661071d565b6040805195865261ffff90941660208601528484019290925260608401526080830152519081900360a00190f35b610151610751565b6101d1610760565b604080519115158252519081900360200190f35b61013f600480360360208110156101fb57600080fd5b50356001600160a01b0316610786565b61013f6004803603602081101561022157600080fd5b81019060208101813564010000000081111561023c57600080fd5b82018360208201111561024e57600080fd5b8035906020019184600183028401116401000000008311171561027057600080fd5b509092509050610878565b61013f6004803603602081101561029157600080fd5b50356001600160a01b0316610a4e565b6102c7600480360360208110156102b757600080fd5b50356001600160a01b0316610ab3565b6040805192835260208301919091528051918290030190f35b6102e8610760565b610339576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038716600090815260676020526040902054156103a4576040805162461bcd60e51b815260206004820152601f60248201527f76657374696e67207363686564756c6520616c72656164792065786973747300604482015290519081900360640190fd5b600084116103f9576040805162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e2030000000604482015290519081900360640190fd5b60008561ffff161161043c5760405162461bcd60e51b8152600401808060200182810382526021815260200180610ec36021913960400191505060405180910390fd5b604080516001600160a01b03808a166020808401919091528284018a905261ffff89166060808501919091528451808503909101815260808401808652815191830191909120606654633249b58f60e11b90925260848501839052600360a48601526242544360e81b60c4860152945160009491909316926364936b1e9260e480840193919291829003018186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d602081101561050157600080fd5b505160405163159ab14d60e01b8152600481018481526024820189905260448201889052608060648301908152608483018790526001600160a01b039093169263159ab14d9286928b928b928b928b92909160a401848480828437600081840152601f19601f8201169050808301925050509650505050505050602060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b505050506040513d60208110156105bf57600080fd5b505190506105cb610e8f565b6040518060a001604052808a6000146105e4578a6105e6565b425b815261ffff998a166020808301919091526040808301959095526000606080840182905260809384018290526001600160a01b039e909e16815260678252859020835181559083015160018201805461ffff191691909c1617909a559281015160028a0155998a01516003890155509790970151600490950194909455505050505050565b610673610760565b6106c4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6066546001600160a01b031681565b60676020526000908152604090208054600182015460028301546003840154600490940154929361ffff9092169290919085565b6033546001600160a01b031690565b6033546000906001600160a01b0316610777610b92565b6001600160a01b031614905090565b600054610100900460ff168061079f575061079f610b96565b806107ad575060005460ff16155b6107e85760405162461bcd60e51b815260040180806020018281038252602e815260200180610f2b602e913960400191505060405180910390fd5b600054610100900460ff16158015610813576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0384811691909117918290556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015610874576000805461ff00191690555b5050565b60008061088433610ab3565b9092509050806108d1576040805162461bcd60e51b81526020600482015260136024820152726e6f20616d6f756e7420636c61696d61626c6560681b604482015290519081900360640190fd5b33600090815260676020526040902060038101546108f5908463ffffffff610b9c16565b6003820155600481015461090f908363ffffffff610b9c16565b60048083019190915560665460408051633249b58f60e11b81526020938101849052600360248201526242544360e81b604482015290516001600160a01b03909216926364936b1e92606480840193829003018186803b15801561097257600080fd5b505afa158015610986573d6000803e3d6000fd5b505050506040513d602081101561099c57600080fd5b5051604080516338463cff60e01b81526024810185905260048101918252604481018790526001600160a01b03909216916338463cff918891889187918190606401858580828437600081840152601f19601f820116905080830192505050945050505050602060405180830381600087803b158015610a1b57600080fd5b505af1158015610a2f573d6000803e3d6000fd5b505050506040513d6020811015610a4557600080fd5b50505050505050565b610a56610760565b610aa7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610ab081610bff565b50565b6001600160a01b038116600090815260676020526040812060028101548291901580610adf5750805442105b15610af1575060009150819050610b8d565b8054600090610b0790429063ffffffff610ca016565b90506000610b1e82622819a063ffffffff610ce216565b60038401546001850154919250600091610b4d9190610b419061ffff1685610d24565b9063ffffffff610ca016565b60018501546002860154919250600091610b829161ffff1690610b76908563ffffffff610d3a16565b9063ffffffff610ce216565b919650909450505050505b915091565b3390565b303b1590565b600082820183811015610bf6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6001600160a01b038116610c445760405162461bcd60e51b8152600401808060200182810382526026815260200180610ee46026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610bf683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610d93565b6000610bf683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610e2a565b6000818310610d335781610bf6565b5090919050565b600082610d4957506000610bf9565b82820282848281610d5657fe5b0414610bf65760405162461bcd60e51b8152600401808060200182810382526021815260200180610f0a6021913960400191505060405180910390fd5b60008184841115610e225760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610de7578181015183820152602001610dcf565b50505050905090810190601f168015610e145780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183610e795760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610de7578181015183820152602001610dcf565b506000838581610e8557fe5b0495945050505050565b6040518060a0016040528060008152602001600061ffff168152602001600081526020016000815260200160008152509056fe6475726174696f6e206d757374206265206174206c656173742031206d6f6e74684f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820a56ac41e27de113e4aff9e748d7ec5a1f13a03d02aa18f586b0f1ed2a568ed9f64736f6c63430005100032436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564"

// DeployVesting deploys a new Ethereum contract, binding an instance of Vesting to it.
func DeployVesting(auth *bind.TransactOpts, backend bind.ContractBackend, _registry common.Address) (common.Address, *types.Transaction, *Vesting, error) {
	parsed, err := abi.JSON(strings.NewReader(VestingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VestingBin), backend, _registry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Vesting{VestingCaller: VestingCaller{contract: contract}, VestingTransactor: VestingTransactor{contract: contract}, VestingFilterer: VestingFilterer{contract: contract}}, nil
}

// Vesting is an auto generated Go binding around an Ethereum contract.
type Vesting struct {
	VestingCaller     // Read-only binding to the contract
	VestingTransactor // Write-only binding to the contract
	VestingFilterer   // Log filterer for contract events
}

// VestingCaller is an auto generated read-only Go binding around an Ethereum contract.
type VestingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VestingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VestingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VestingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VestingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VestingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VestingSession struct {
	Contract     *Vesting          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VestingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VestingCallerSession struct {
	Contract *VestingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// VestingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VestingTransactorSession struct {
	Contract     *VestingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// VestingRaw is an auto generated low-level Go binding around an Ethereum contract.
type VestingRaw struct {
	Contract *Vesting // Generic contract binding to access the raw methods on
}

// VestingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VestingCallerRaw struct {
	Contract *VestingCaller // Generic read-only contract binding to access the raw methods on
}

// VestingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VestingTransactorRaw struct {
	Contract *VestingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVesting creates a new instance of Vesting, bound to a specific deployed contract.
func NewVesting(address common.Address, backend bind.ContractBackend) (*Vesting, error) {
	contract, err := bindVesting(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Vesting{VestingCaller: VestingCaller{contract: contract}, VestingTransactor: VestingTransactor{contract: contract}, VestingFilterer: VestingFilterer{contract: contract}}, nil
}

// NewVestingCaller creates a new read-only instance of Vesting, bound to a specific deployed contract.
func NewVestingCaller(address common.Address, caller bind.ContractCaller) (*VestingCaller, error) {
	contract, err := bindVesting(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VestingCaller{contract: contract}, nil
}

// NewVestingTransactor creates a new write-only instance of Vesting, bound to a specific deployed contract.
func NewVestingTransactor(address common.Address, transactor bind.ContractTransactor) (*VestingTransactor, error) {
	contract, err := bindVesting(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VestingTransactor{contract: contract}, nil
}

// NewVestingFilterer creates a new log filterer instance of Vesting, bound to a specific deployed contract.
func NewVestingFilterer(address common.Address, filterer bind.ContractFilterer) (*VestingFilterer, error) {
	contract, err := bindVesting(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VestingFilterer{contract: contract}, nil
}

// bindVesting binds a generic wrapper to an already deployed contract.
func bindVesting(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VestingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vesting *VestingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Vesting.Contract.VestingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vesting *VestingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vesting.Contract.VestingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vesting *VestingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vesting.Contract.VestingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vesting *VestingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Vesting.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vesting *VestingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vesting.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vesting *VestingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vesting.Contract.contract.Transact(opts, method, params...)
}

// CalculateClaimable is a free data retrieval call binding the contract method 0xfe7b0007.
//
// Solidity: function calculateClaimable(address _to) view returns(uint256, uint256)
func (_Vesting *VestingCaller) CalculateClaimable(opts *bind.CallOpts, _to common.Address) (*big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Vesting.contract.Call(opts, out, "calculateClaimable", _to)
	return *ret0, *ret1, err
}

// CalculateClaimable is a free data retrieval call binding the contract method 0xfe7b0007.
//
// Solidity: function calculateClaimable(address _to) view returns(uint256, uint256)
func (_Vesting *VestingSession) CalculateClaimable(_to common.Address) (*big.Int, *big.Int, error) {
	return _Vesting.Contract.CalculateClaimable(&_Vesting.CallOpts, _to)
}

// CalculateClaimable is a free data retrieval call binding the contract method 0xfe7b0007.
//
// Solidity: function calculateClaimable(address _to) view returns(uint256, uint256)
func (_Vesting *VestingCallerSession) CalculateClaimable(_to common.Address) (*big.Int, *big.Int, error) {
	return _Vesting.Contract.CalculateClaimable(&_Vesting.CallOpts, _to)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_Vesting *VestingCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Vesting.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_Vesting *VestingSession) IsOwner() (bool, error) {
	return _Vesting.Contract.IsOwner(&_Vesting.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() view returns(bool)
func (_Vesting *VestingCallerSession) IsOwner() (bool, error) {
	return _Vesting.Contract.IsOwner(&_Vesting.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Vesting *VestingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Vesting.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Vesting *VestingSession) Owner() (common.Address, error) {
	return _Vesting.Contract.Owner(&_Vesting.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Vesting *VestingCallerSession) Owner() (common.Address, error) {
	return _Vesting.Contract.Owner(&_Vesting.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Vesting *VestingCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Vesting.contract.Call(opts, out, "registry")
	return *ret0, err
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Vesting *VestingSession) Registry() (common.Address, error) {
	return _Vesting.Contract.Registry(&_Vesting.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Vesting *VestingCallerSession) Registry() (common.Address, error) {
	return _Vesting.Contract.Registry(&_Vesting.CallOpts)
}

// Schedules is a free data retrieval call binding the contract method 0x80c3780f.
//
// Solidity: function schedules(address ) view returns(uint256 startTime, uint16 duration, uint256 amount, uint256 monthsClaimed, uint256 amountClaimed)
func (_Vesting *VestingCaller) Schedules(opts *bind.CallOpts, arg0 common.Address) (struct {
	StartTime     *big.Int
	Duration      uint16
	Amount        *big.Int
	MonthsClaimed *big.Int
	AmountClaimed *big.Int
}, error) {
	ret := new(struct {
		StartTime     *big.Int
		Duration      uint16
		Amount        *big.Int
		MonthsClaimed *big.Int
		AmountClaimed *big.Int
	})
	out := ret
	err := _Vesting.contract.Call(opts, out, "schedules", arg0)
	return *ret, err
}

// Schedules is a free data retrieval call binding the contract method 0x80c3780f.
//
// Solidity: function schedules(address ) view returns(uint256 startTime, uint16 duration, uint256 amount, uint256 monthsClaimed, uint256 amountClaimed)
func (_Vesting *VestingSession) Schedules(arg0 common.Address) (struct {
	StartTime     *big.Int
	Duration      uint16
	Amount        *big.Int
	MonthsClaimed *big.Int
	AmountClaimed *big.Int
}, error) {
	return _Vesting.Contract.Schedules(&_Vesting.CallOpts, arg0)
}

// Schedules is a free data retrieval call binding the contract method 0x80c3780f.
//
// Solidity: function schedules(address ) view returns(uint256 startTime, uint16 duration, uint256 amount, uint256 monthsClaimed, uint256 amountClaimed)
func (_Vesting *VestingCallerSession) Schedules(arg0 common.Address) (struct {
	StartTime     *big.Int
	Duration      uint16
	Amount        *big.Int
	MonthsClaimed *big.Int
	AmountClaimed *big.Int
}, error) {
	return _Vesting.Contract.Schedules(&_Vesting.CallOpts, arg0)
}

// AddVestingSchedule is a paid mutator transaction binding the contract method 0x627189f6.
//
// Solidity: function addVestingSchedule(address _beneficiary, uint256 _startTime, uint16 _duration, uint256 _amount, bytes32 _nHash, bytes _sig) returns()
func (_Vesting *VestingTransactor) AddVestingSchedule(opts *bind.TransactOpts, _beneficiary common.Address, _startTime *big.Int, _duration uint16, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _Vesting.contract.Transact(opts, "addVestingSchedule", _beneficiary, _startTime, _duration, _amount, _nHash, _sig)
}

// AddVestingSchedule is a paid mutator transaction binding the contract method 0x627189f6.
//
// Solidity: function addVestingSchedule(address _beneficiary, uint256 _startTime, uint16 _duration, uint256 _amount, bytes32 _nHash, bytes _sig) returns()
func (_Vesting *VestingSession) AddVestingSchedule(_beneficiary common.Address, _startTime *big.Int, _duration uint16, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _Vesting.Contract.AddVestingSchedule(&_Vesting.TransactOpts, _beneficiary, _startTime, _duration, _amount, _nHash, _sig)
}

// AddVestingSchedule is a paid mutator transaction binding the contract method 0x627189f6.
//
// Solidity: function addVestingSchedule(address _beneficiary, uint256 _startTime, uint16 _duration, uint256 _amount, bytes32 _nHash, bytes _sig) returns()
func (_Vesting *VestingTransactorSession) AddVestingSchedule(_beneficiary common.Address, _startTime *big.Int, _duration uint16, _amount *big.Int, _nHash [32]byte, _sig []byte) (*types.Transaction, error) {
	return _Vesting.Contract.AddVestingSchedule(&_Vesting.TransactOpts, _beneficiary, _startTime, _duration, _amount, _nHash, _sig)
}

// Claim is a paid mutator transaction binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes _to) returns()
func (_Vesting *VestingTransactor) Claim(opts *bind.TransactOpts, _to []byte) (*types.Transaction, error) {
	return _Vesting.contract.Transact(opts, "claim", _to)
}

// Claim is a paid mutator transaction binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes _to) returns()
func (_Vesting *VestingSession) Claim(_to []byte) (*types.Transaction, error) {
	return _Vesting.Contract.Claim(&_Vesting.TransactOpts, _to)
}

// Claim is a paid mutator transaction binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes _to) returns()
func (_Vesting *VestingTransactorSession) Claim(_to []byte) (*types.Transaction, error) {
	return _Vesting.Contract.Claim(&_Vesting.TransactOpts, _to)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_Vesting *VestingTransactor) Initialize(opts *bind.TransactOpts, sender common.Address) (*types.Transaction, error) {
	return _Vesting.contract.Transact(opts, "initialize", sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_Vesting *VestingSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _Vesting.Contract.Initialize(&_Vesting.TransactOpts, sender)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address sender) returns()
func (_Vesting *VestingTransactorSession) Initialize(sender common.Address) (*types.Transaction, error) {
	return _Vesting.Contract.Initialize(&_Vesting.TransactOpts, sender)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Vesting *VestingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vesting.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Vesting *VestingSession) RenounceOwnership() (*types.Transaction, error) {
	return _Vesting.Contract.RenounceOwnership(&_Vesting.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Vesting *VestingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Vesting.Contract.RenounceOwnership(&_Vesting.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Vesting *VestingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Vesting.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Vesting *VestingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Vesting.Contract.TransferOwnership(&_Vesting.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Vesting *VestingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Vesting.Contract.TransferOwnership(&_Vesting.TransactOpts, newOwner)
}

// VestingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Vesting contract.
type VestingOwnershipTransferredIterator struct {
	Event *VestingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingOwnershipTransferred represents a OwnershipTransferred event raised by the Vesting contract.
type VestingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Vesting *VestingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*VestingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Vesting.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &VestingOwnershipTransferredIterator{contract: _Vesting.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Vesting *VestingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VestingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Vesting.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingOwnershipTransferred)
				if err := _Vesting.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Vesting *VestingFilterer) ParseOwnershipTransferred(log types.Log) (*VestingOwnershipTransferred, error) {
	event := new(VestingOwnershipTransferred)
	if err := _Vesting.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}
